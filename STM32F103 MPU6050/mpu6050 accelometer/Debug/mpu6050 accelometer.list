
mpu6050 accelometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008b80  08008b80  00018b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf4  08008bf4  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08008bf4  08008bf4  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bf4  08008bf4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000164  08008d60  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  08008d60  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ad  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b5  00000000  00000000  0003283a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  000351f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970e  00000000  00000000  00036a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000facf  00000000  00000000  0005018e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087304  00000000  00000000  0005fc5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6f61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  000e6fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000164 	.word	0x20000164
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b68 	.word	0x08008b68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000168 	.word	0x20000168
 800014c:	08008b68 	.word	0x08008b68

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_f2iz>:
 800098c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000990:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000994:	d30f      	bcc.n	80009b6 <__aeabi_f2iz+0x2a>
 8000996:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800099a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099e:	d90d      	bls.n	80009bc <__aeabi_f2iz+0x30>
 80009a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ac:	fa23 f002 	lsr.w	r0, r3, r2
 80009b0:	bf18      	it	ne
 80009b2:	4240      	negne	r0, r0
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr
 80009bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009c0:	d101      	bne.n	80009c6 <__aeabi_f2iz+0x3a>
 80009c2:	0242      	lsls	r2, r0, #9
 80009c4:	d105      	bne.n	80009d2 <__aeabi_f2iz+0x46>
 80009c6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009ca:	bf08      	it	eq
 80009cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d0:	4770      	bx	lr
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	4770      	bx	lr

080009d8 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	2301      	movs	r3, #1
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2275      	movs	r2, #117	; 0x75
 80009f0:	21d0      	movs	r1, #208	; 0xd0
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MPU6050_Init+0xa8>)
 80009f4:	f001 f8fa 	bl	8001bec <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b68      	cmp	r3, #104	; 0x68
 80009fc:	d13b      	bne.n	8000a76 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	226b      	movs	r2, #107	; 0x6b
 8000a14:	21d0      	movs	r1, #208	; 0xd0
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a18:	f000 ffee 	bl	80019f8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	2219      	movs	r2, #25
 8000a32:	21d0      	movs	r1, #208	; 0xd0
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a36:	f000 ffdf 	bl	80019f8 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	9302      	str	r3, [sp, #8]
 8000a44:	2301      	movs	r3, #1
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	221c      	movs	r2, #28
 8000a50:	21d0      	movs	r1, #208	; 0xd0
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a54:	f000 ffd0 	bl	80019f8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2301      	movs	r3, #1
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	221b      	movs	r2, #27
 8000a6e:	21d0      	movs	r1, #208	; 0xd0
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a72:	f000 ffc1 	bl	80019f8 <HAL_I2C_Mem_Write>
	}

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001b8 	.word	0x200001b8
 8000a84:	00000000 	.word	0x00000000

08000a88 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	2306      	movs	r3, #6
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	463b      	mov	r3, r7
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	223b      	movs	r2, #59	; 0x3b
 8000aa0:	21d0      	movs	r1, #208	; 0xd0
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <MPU6050_Read_Accel+0x118>)
 8000aa4:	f001 f8a2 	bl	8001bec <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MPU6050_Read_Accel+0x11c>)
 8000ab8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000aba:	78bb      	ldrb	r3, [r7, #2]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MPU6050_Read_Accel+0x120>)
 8000aca:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	797b      	ldrb	r3, [r7, #5]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MPU6050_Read_Accel+0x124>)
 8000adc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW*9.8/16384.0;
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MPU6050_Read_Accel+0x11c>)
 8000ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fc85 	bl	80003f4 <__aeabi_i2d>
 8000aea:	a32b      	add	r3, pc, #172	; (adr r3, 8000b98 <MPU6050_Read_Accel+0x110>)
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	f7ff fcea 	bl	80004c8 <__aeabi_dmul>
 8000af4:	4603      	mov	r3, r0
 8000af6:	460c      	mov	r4, r1
 8000af8:	4618      	mov	r0, r3
 8000afa:	4621      	mov	r1, r4
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MPU6050_Read_Accel+0x128>)
 8000b02:	f7ff fe0b 	bl	800071c <__aeabi_ddiv>
 8000b06:	4603      	mov	r3, r0
 8000b08:	460c      	mov	r4, r1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	f7ff feed 	bl	80008ec <__aeabi_d2f>
 8000b12:	4602      	mov	r2, r0
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MPU6050_Read_Accel+0x12c>)
 8000b16:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW*9.8/16384.0;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MPU6050_Read_Accel+0x120>)
 8000b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc68 	bl	80003f4 <__aeabi_i2d>
 8000b24:	a31c      	add	r3, pc, #112	; (adr r3, 8000b98 <MPU6050_Read_Accel+0x110>)
 8000b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2a:	f7ff fccd 	bl	80004c8 <__aeabi_dmul>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460c      	mov	r4, r1
 8000b32:	4618      	mov	r0, r3
 8000b34:	4621      	mov	r1, r4
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MPU6050_Read_Accel+0x128>)
 8000b3c:	f7ff fdee 	bl	800071c <__aeabi_ddiv>
 8000b40:	4603      	mov	r3, r0
 8000b42:	460c      	mov	r4, r1
 8000b44:	4618      	mov	r0, r3
 8000b46:	4621      	mov	r1, r4
 8000b48:	f7ff fed0 	bl	80008ec <__aeabi_d2f>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MPU6050_Read_Accel+0x130>)
 8000b50:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW*9.8/16384.0;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MPU6050_Read_Accel+0x124>)
 8000b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fc4b 	bl	80003f4 <__aeabi_i2d>
 8000b5e:	a30e      	add	r3, pc, #56	; (adr r3, 8000b98 <MPU6050_Read_Accel+0x110>)
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	f7ff fcb0 	bl	80004c8 <__aeabi_dmul>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	4621      	mov	r1, r4
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MPU6050_Read_Accel+0x128>)
 8000b76:	f7ff fdd1 	bl	800071c <__aeabi_ddiv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460c      	mov	r4, r1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	4621      	mov	r1, r4
 8000b82:	f7ff feb3 	bl	80008ec <__aeabi_d2f>
 8000b86:	4602      	mov	r2, r0
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MPU6050_Read_Accel+0x134>)
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	f3af 8000 	nop.w
 8000b98:	9999999a 	.word	0x9999999a
 8000b9c:	40239999 	.word	0x40239999
 8000ba0:	200001b8 	.word	0x200001b8
 8000ba4:	20000190 	.word	0x20000190
 8000ba8:	20000192 	.word	0x20000192
 8000bac:	20000194 	.word	0x20000194
 8000bb0:	40d00000 	.word	0x40d00000
 8000bb4:	20000214 	.word	0x20000214
 8000bb8:	2000020c 	.word	0x2000020c
 8000bbc:	20000218 	.word	0x20000218

08000bc0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2306      	movs	r3, #6
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	2243      	movs	r2, #67	; 0x43
 8000bd8:	21d0      	movs	r1, #208	; 0xd0
 8000bda:	4831      	ldr	r0, [pc, #196]	; (8000ca0 <MPU6050_Read_Gyro+0xe0>)
 8000bdc:	f001 f806 	bl	8001bec <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000be0:	783b      	ldrb	r3, [r7, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	787b      	ldrb	r3, [r7, #1]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MPU6050_Read_Gyro+0xe4>)
 8000bf0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000bf2:	78bb      	ldrb	r3, [r7, #2]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MPU6050_Read_Gyro+0xe8>)
 8000c02:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000c04:	793b      	ldrb	r3, [r7, #4]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	797b      	ldrb	r3, [r7, #5]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MPU6050_Read_Gyro+0xec>)
 8000c14:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/310.0;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MPU6050_Read_Gyro+0xe4>)
 8000c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fbe9 	bl	80003f4 <__aeabi_i2d>
 8000c22:	a31d      	add	r3, pc, #116	; (adr r3, 8000c98 <MPU6050_Read_Gyro+0xd8>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fd78 	bl	800071c <__aeabi_ddiv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4618      	mov	r0, r3
 8000c32:	4621      	mov	r1, r4
 8000c34:	f7ff fe5a 	bl	80008ec <__aeabi_d2f>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MPU6050_Read_Gyro+0xf0>)
 8000c3c:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/310.0;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MPU6050_Read_Gyro+0xe8>)
 8000c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbd5 	bl	80003f4 <__aeabi_i2d>
 8000c4a:	a313      	add	r3, pc, #76	; (adr r3, 8000c98 <MPU6050_Read_Gyro+0xd8>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fd64 	bl	800071c <__aeabi_ddiv>
 8000c54:	4603      	mov	r3, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	f7ff fe46 	bl	80008ec <__aeabi_d2f>
 8000c60:	4602      	mov	r2, r0
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MPU6050_Read_Gyro+0xf4>)
 8000c64:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/310.0;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MPU6050_Read_Gyro+0xec>)
 8000c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fbc1 	bl	80003f4 <__aeabi_i2d>
 8000c72:	a309      	add	r3, pc, #36	; (adr r3, 8000c98 <MPU6050_Read_Gyro+0xd8>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fd50 	bl	800071c <__aeabi_ddiv>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	4618      	mov	r0, r3
 8000c82:	4621      	mov	r1, r4
 8000c84:	f7ff fe32 	bl	80008ec <__aeabi_d2f>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MPU6050_Read_Gyro+0xf8>)
 8000c8c:	601a      	str	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40736000 	.word	0x40736000
 8000ca0:	200001b8 	.word	0x200001b8
 8000ca4:	20000196 	.word	0x20000196
 8000ca8:	20000198 	.word	0x20000198
 8000cac:	2000019a 	.word	0x2000019a
 8000cb0:	200001b4 	.word	0x200001b4
 8000cb4:	20000210 	.word	0x20000210
 8000cb8:	2000021c 	.word	0x2000021c

08000cbc <HAL_GPIO_EXTI_Callback>:


/********************* EXTI RELATED ************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7)
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	2b80      	cmp	r3, #128	; 0x80
 8000cca:	d102      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x20>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	20000180 	.word	0x20000180

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fa1c 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f856 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 f8dc 	bl	8000ea8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf0:	f000 f8ac 	bl	8000e4c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000cf4:	f007 fb52 	bl	800839c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000cf8:	f7ff fe6e 	bl	80009d8 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel();
 8000cfc:	f7ff fec4 	bl	8000a88 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000d00:	f7ff ff5e 	bl	8000bc0 <MPU6050_Read_Gyro>

	mousehid.mouse_y = -Gy;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <main+0x9c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe3d 	bl	800098c <__aeabi_f2iz>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b25a      	sxtb	r2, r3
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <main+0xa0>)
 8000d18:	709a      	strb	r2, [r3, #2]

	mousehid.mouse_x = -Gz;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <main+0xa4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fe32 	bl	800098c <__aeabi_f2iz>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <main+0xa0>)
 8000d2e:	705a      	strb	r2, [r3, #1]

	buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000d30:	2120      	movs	r1, #32
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0xa8>)
 8000d34:	f000 fce0 	bl	80016f8 <HAL_GPIO_ReadPin>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <main+0xac>)
 8000d3e:	601a      	str	r2, [r3, #0]

	if (buttonstate != oldbuttonstate )
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <main+0xac>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <main+0xb0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d00e      	beq.n	8000d6a <main+0x8a>
	{
	  mousehid.button = buttonstate;  // left click =1, right click =2
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <main+0xac>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <main+0xa0>)
 8000d54:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000d56:	2204      	movs	r2, #4
 8000d58:	4909      	ldr	r1, [pc, #36]	; (8000d80 <main+0xa0>)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <main+0xb4>)
 8000d5c:	f006 fa3c 	bl	80071d8 <USBD_HID_SendReport>
	  oldbuttonstate = buttonstate;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <main+0xac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <main+0xb0>)
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e004      	b.n	8000d74 <main+0x94>
	}
	else{
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <main+0xa0>)
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <main+0xb4>)
 8000d70:	f006 fa32 	bl	80071d8 <USBD_HID_SendReport>
	}


	HAL_Delay (15);  // wait for a while
 8000d74:	200f      	movs	r0, #15
 8000d76:	f000 fa35 	bl	80011e4 <HAL_Delay>
	MPU6050_Read_Accel();
 8000d7a:	e7bf      	b.n	8000cfc <main+0x1c>
 8000d7c:	20000210 	.word	0x20000210
 8000d80:	20000184 	.word	0x20000184
 8000d84:	2000021c 	.word	0x2000021c
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	20000188 	.word	0x20000188
 8000d90:	2000018c 	.word	0x2000018c
 8000d94:	20000224 	.word	0x20000224

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b094      	sub	sp, #80	; 0x50
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	2228      	movs	r2, #40	; 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f007 fed6 	bl	8008b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f964 	bl	80040bc <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dfa:	f000 f8b7 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fbce 	bl	80045bc <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e26:	f000 f8a1 	bl	8000f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 fd49 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e40:	f000 f894 	bl	8000f6c <Error_Handler>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3750      	adds	r7, #80	; 0x50
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <MX_I2C1_Init+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_I2C1_Init+0x58>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e8a:	f000 fc7d 	bl	8001788 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 f86a 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001b8 	.word	0x200001b8
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	000186a0 	.word	0x000186a0

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2110      	movs	r1, #16
 8000f08:	4815      	ldr	r0, [pc, #84]	; (8000f60 <MX_GPIO_Init+0xb8>)
 8000f0a:	f000 fc0c 	bl	8001726 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_GPIO_Init+0xbc>)
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_GPIO_Init+0xc0>)
 8000f22:	f000 fa8f 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f26:	2310      	movs	r3, #16
 8000f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <MX_GPIO_Init+0xb8>)
 8000f3e:	f000 fa81 	bl	8001444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2017      	movs	r0, #23
 8000f48:	f000 fa45 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f4c:	2017      	movs	r0, #23
 8000f4e:	f000 fa5e 	bl	800140e <HAL_NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	10210000 	.word	0x10210000
 8000f68:	40010800 	.word	0x40010800

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <Error_Handler+0x6>

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_MspInit+0x60>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_MspInit+0x60>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <HAL_I2C_MspInit+0x70>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d123      	bne.n	8001040 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_I2C_MspInit+0x74>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_I2C_MspInit+0x74>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_I2C_MspInit+0x74>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001010:	23c0      	movs	r3, #192	; 0xc0
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_I2C_MspInit+0x78>)
 8001024:	f000 fa0e 	bl	8001444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_I2C_MspInit+0x74>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_I2C_MspInit+0x74>)
 800102e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001032:	61d3      	str	r3, [r2, #28]
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_I2C_MspInit+0x74>)
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010c00 	.word	0x40010c00

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f887 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010aa:	f001 fc8c 	bl	80029c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200006e8 	.word	0x200006e8

080010b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f000 fb4b 	bl	8001758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
	...

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff ffe4 	bl	80010c6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f007 fd07 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff fded 	bl	8000ce0 <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001110:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 8001114:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001118:	200009d4 	.word	0x200009d4

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x28>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f945 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	200f      	movs	r0, #15
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff ff1a 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f95d 	bl	800142a <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f925 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x20>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000220 	.word	0x20000220

080011d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_GetTick+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	20000220 	.word	0x20000220

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff fff0 	bl	80011d0 <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_Delay+0x40>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffe0 	bl	80011d0 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000008 	.word	0x20000008

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <__NVIC_EnableIRQ+0x34>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff2d 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff42 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff35 	bl	800128c <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e127      	b.n	80016a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001458:	2201      	movs	r2, #1
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 8116 	bne.w	80016a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b12      	cmp	r3, #18
 800147c:	d034      	beq.n	80014e8 <HAL_GPIO_Init+0xa4>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d80d      	bhi.n	800149e <HAL_GPIO_Init+0x5a>
 8001482:	2b02      	cmp	r3, #2
 8001484:	d02b      	beq.n	80014de <HAL_GPIO_Init+0x9a>
 8001486:	2b02      	cmp	r3, #2
 8001488:	d804      	bhi.n	8001494 <HAL_GPIO_Init+0x50>
 800148a:	2b00      	cmp	r3, #0
 800148c:	d031      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d01c      	beq.n	80014cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001492:	e048      	b.n	8001526 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001494:	2b03      	cmp	r3, #3
 8001496:	d043      	beq.n	8001520 <HAL_GPIO_Init+0xdc>
 8001498:	2b11      	cmp	r3, #17
 800149a:	d01b      	beq.n	80014d4 <HAL_GPIO_Init+0x90>
          break;
 800149c:	e043      	b.n	8001526 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800149e:	4a89      	ldr	r2, [pc, #548]	; (80016c4 <HAL_GPIO_Init+0x280>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d026      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
 80014a4:	4a87      	ldr	r2, [pc, #540]	; (80016c4 <HAL_GPIO_Init+0x280>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d806      	bhi.n	80014b8 <HAL_GPIO_Init+0x74>
 80014aa:	4a87      	ldr	r2, [pc, #540]	; (80016c8 <HAL_GPIO_Init+0x284>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d020      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
 80014b0:	4a86      	ldr	r2, [pc, #536]	; (80016cc <HAL_GPIO_Init+0x288>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01d      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
          break;
 80014b6:	e036      	b.n	8001526 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014b8:	4a85      	ldr	r2, [pc, #532]	; (80016d0 <HAL_GPIO_Init+0x28c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
 80014be:	4a85      	ldr	r2, [pc, #532]	; (80016d4 <HAL_GPIO_Init+0x290>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d016      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
 80014c4:	4a84      	ldr	r2, [pc, #528]	; (80016d8 <HAL_GPIO_Init+0x294>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0xae>
          break;
 80014ca:	e02c      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e028      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e023      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	3308      	adds	r3, #8
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e01e      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	330c      	adds	r3, #12
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e019      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014fa:	2304      	movs	r3, #4
 80014fc:	623b      	str	r3, [r7, #32]
          break;
 80014fe:	e012      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	611a      	str	r2, [r3, #16]
          break;
 8001512:	e008      	b.n	8001526 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	615a      	str	r2, [r3, #20]
          break;
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2bff      	cmp	r3, #255	; 0xff
 800152a:	d801      	bhi.n	8001530 <HAL_GPIO_Init+0xec>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	e001      	b.n	8001534 <HAL_GPIO_Init+0xf0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3304      	adds	r3, #4
 8001534:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2bff      	cmp	r3, #255	; 0xff
 800153a:	d802      	bhi.n	8001542 <HAL_GPIO_Init+0xfe>
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	e002      	b.n	8001548 <HAL_GPIO_Init+0x104>
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3b08      	subs	r3, #8
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	210f      	movs	r1, #15
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	401a      	ands	r2, r3
 800155a:	6a39      	ldr	r1, [r7, #32]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	431a      	orrs	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8096 	beq.w	80016a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001576:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_GPIO_Init+0x298>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_GPIO_Init+0x298>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6193      	str	r3, [r2, #24]
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <HAL_GPIO_Init+0x298>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800158e:	4a54      	ldr	r2, [pc, #336]	; (80016e0 <HAL_GPIO_Init+0x29c>)
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <HAL_GPIO_Init+0x2a0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x19e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_GPIO_Init+0x2a4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x19a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a49      	ldr	r2, [pc, #292]	; (80016ec <HAL_GPIO_Init+0x2a8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x196>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a48      	ldr	r2, [pc, #288]	; (80016f0 <HAL_GPIO_Init+0x2ac>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x192>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x1a0>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x1a0>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x1a0>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x1a0>
 80015e2:	2300      	movs	r3, #0
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f4:	493a      	ldr	r1, [pc, #232]	; (80016e0 <HAL_GPIO_Init+0x29c>)
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4938      	ldr	r1, [pc, #224]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4933      	ldr	r1, [pc, #204]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	492e      	ldr	r1, [pc, #184]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4929      	ldr	r1, [pc, #164]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 800164e:	4013      	ands	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	4924      	ldr	r1, [pc, #144]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	43db      	mvns	r3, r3
 8001674:	491f      	ldr	r1, [pc, #124]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001676:	4013      	ands	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	491a      	ldr	r1, [pc, #104]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	60cb      	str	r3, [r1, #12]
 8001692:	e006      	b.n	80016a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	43db      	mvns	r3, r3
 800169c:	4915      	ldr	r1, [pc, #84]	; (80016f4 <HAL_GPIO_Init+0x2b0>)
 800169e:	4013      	ands	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f aed0 	bne.w	8001458 <HAL_GPIO_Init+0x14>
  }
}
 80016b8:	bf00      	nop
 80016ba:	372c      	adds	r7, #44	; 0x2c
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	10210000 	.word	0x10210000
 80016c8:	10110000 	.word	0x10110000
 80016cc:	10120000 	.word	0x10120000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10220000 	.word	0x10220000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000
 80016e4:	40010800 	.word	0x40010800
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40011400 	.word	0x40011400
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e001      	b.n	800171a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	807b      	strh	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001736:	787b      	ldrb	r3, [r7, #1]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001742:	e003      	b.n	800174c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	041a      	lsls	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff faa0 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e11f      	b.n	80019da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fc12 	bl	8000fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2224      	movs	r2, #36	; 0x24
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017ec:	f003 f83c 	bl	8004868 <HAL_RCC_GetPCLK1Freq>
 80017f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a7b      	ldr	r2, [pc, #492]	; (80019e4 <HAL_I2C_Init+0x25c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d807      	bhi.n	800180c <HAL_I2C_Init+0x84>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a7a      	ldr	r2, [pc, #488]	; (80019e8 <HAL_I2C_Init+0x260>)
 8001800:	4293      	cmp	r3, r2
 8001802:	bf94      	ite	ls
 8001804:	2301      	movls	r3, #1
 8001806:	2300      	movhi	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e006      	b.n	800181a <HAL_I2C_Init+0x92>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4a77      	ldr	r2, [pc, #476]	; (80019ec <HAL_I2C_Init+0x264>)
 8001810:	4293      	cmp	r3, r2
 8001812:	bf94      	ite	ls
 8001814:	2301      	movls	r3, #1
 8001816:	2300      	movhi	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0db      	b.n	80019da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4a72      	ldr	r2, [pc, #456]	; (80019f0 <HAL_I2C_Init+0x268>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0c9b      	lsrs	r3, r3, #18
 800182c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a64      	ldr	r2, [pc, #400]	; (80019e4 <HAL_I2C_Init+0x25c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d802      	bhi.n	800185c <HAL_I2C_Init+0xd4>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3301      	adds	r3, #1
 800185a:	e009      	b.n	8001870 <HAL_I2C_Init+0xe8>
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	4a63      	ldr	r2, [pc, #396]	; (80019f4 <HAL_I2C_Init+0x26c>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	3301      	adds	r3, #1
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	430b      	orrs	r3, r1
 8001876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4956      	ldr	r1, [pc, #344]	; (80019e4 <HAL_I2C_Init+0x25c>)
 800188c:	428b      	cmp	r3, r1
 800188e:	d80d      	bhi.n	80018ac <HAL_I2C_Init+0x124>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e59      	subs	r1, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fbb1 f3f3 	udiv	r3, r1, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	bf38      	it	cc
 80018a8:	2304      	movcc	r3, #4
 80018aa:	e04f      	b.n	800194c <HAL_I2C_Init+0x1c4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d111      	bne.n	80018d8 <HAL_I2C_Init+0x150>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	e012      	b.n	80018fe <HAL_I2C_Init+0x176>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e58      	subs	r0, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	0099      	lsls	r1, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Init+0x17e>
 8001902:	2301      	movs	r3, #1
 8001904:	e022      	b.n	800194c <HAL_I2C_Init+0x1c4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10e      	bne.n	800192c <HAL_I2C_Init+0x1a4>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e58      	subs	r0, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	440b      	add	r3, r1
 800191c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	e00f      	b.n	800194c <HAL_I2C_Init+0x1c4>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	6809      	ldr	r1, [r1, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800197a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6911      	ldr	r1, [r2, #16]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68d2      	ldr	r2, [r2, #12]
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	430b      	orrs	r3, r1
 800198e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	000186a0 	.word	0x000186a0
 80019e8:	001e847f 	.word	0x001e847f
 80019ec:	003d08ff 	.word	0x003d08ff
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	817b      	strh	r3, [r7, #10]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	813b      	strh	r3, [r7, #8]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a12:	f7ff fbdd 	bl	80011d0 <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	f040 80d9 	bne.w	8001bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2319      	movs	r3, #25
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	496d      	ldr	r1, [pc, #436]	; (8001be4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fcbb 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0cc      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_I2C_Mem_Write+0x56>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e0c5      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d007      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2221      	movs	r2, #33	; 0x21
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2240      	movs	r2, #64	; 0x40
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a3a      	ldr	r2, [r7, #32]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ab6:	88f8      	ldrh	r0, [r7, #6]
 8001ab8:	893a      	ldrh	r2, [r7, #8]
 8001aba:	8979      	ldrh	r1, [r7, #10]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 faf2 	bl	80020b0 <I2C_RequestMemoryWrite>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d052      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e081      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 fd3c 	bl	8002558 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d107      	bne.n	8001afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06b      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d11b      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x180>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d017      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1aa      	bne.n	8001ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fd28 	bl	80025da <I2C_WaitOnBTFFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e016      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	00100002 	.word	0x00100002
 8001be8:	ffff0000 	.word	0xffff0000

08001bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	817b      	strh	r3, [r7, #10]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	813b      	strh	r3, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c0a:	f7ff fae1 	bl	80011d0 <HAL_GetTick>
 8001c0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	f040 823d 	bne.w	8002098 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2319      	movs	r3, #25
 8001c24:	2201      	movs	r2, #1
 8001c26:	4981      	ldr	r1, [pc, #516]	; (8001e2c <HAL_I2C_Mem_Read+0x240>)
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fbbf 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e230      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_I2C_Mem_Read+0x5a>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e229      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d007      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2222      	movs	r2, #34	; 0x22
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a61      	ldr	r2, [pc, #388]	; (8001e30 <HAL_I2C_Mem_Read+0x244>)
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa8c 	bl	80021dc <I2C_RequestMemoryRead>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1e5      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d113      	bne.n	8001cfe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e1b9      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d11d      	bne.n	8001d42 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3e:	b662      	cpsie	i
 8001d40:	e197      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d11d      	bne.n	8001d86 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d82:	b662      	cpsie	i
 8001d84:	e175      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dac:	e161      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	f200 811a 	bhi.w	8001fec <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d123      	bne.n	8001e08 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fc49 	bl	800265c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e162      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e06:	e134      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d150      	bne.n	8001eb2 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e16:	2200      	movs	r2, #0
 8001e18:	4906      	ldr	r1, [pc, #24]	; (8001e34 <HAL_I2C_Mem_Read+0x248>)
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fac6 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e137      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
 8001e2a:	bf00      	nop
 8001e2c:	00100002 	.word	0x00100002
 8001e30:	ffff0000 	.word	0xffff0000
 8001e34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e48:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e7c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb0:	e0df      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb8:	2200      	movs	r2, #0
 8001eba:	497a      	ldr	r1, [pc, #488]	; (80020a4 <HAL_I2C_Mem_Read+0x4b8>)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fa75 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0e6      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_I2C_Mem_Read+0x4bc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	4a65      	ldr	r2, [pc, #404]	; (80020ac <HAL_I2C_Mem_Read+0x4c0>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	0a1a      	lsrs	r2, r3, #8
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00da      	lsls	r2, r3, #3
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d117      	bne.n	8001f66 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f58:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e099      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d1da      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fb6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fea:	e042      	b.n	8002072 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fb33 	bl	800265c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e04c      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	d118      	bne.n	8002072 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae99 	bne.w	8001dae <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	00010004 	.word	0x00010004
 80020a8:	20000000 	.word	0x20000000
 80020ac:	14f8b589 	.word	0x14f8b589

080020b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4603      	mov	r3, r0
 80020c0:	817b      	strh	r3, [r7, #10]
 80020c2:	460b      	mov	r3, r1
 80020c4:	813b      	strh	r3, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f960 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002100:	d103      	bne.n	800210a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e05f      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800210e:	897b      	ldrh	r3, [r7, #10]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800211c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	492d      	ldr	r1, [pc, #180]	; (80021d8 <I2C_RequestMemoryWrite+0x128>)
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f998 	bl	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e04c      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fa02 	bl	8002558 <I2C_WaitOnTXEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b04      	cmp	r3, #4
 8002160:	d107      	bne.n	8002172 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e02b      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800217c:	893b      	ldrh	r3, [r7, #8]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	e021      	b.n	80021cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002188:	893b      	ldrh	r3, [r7, #8]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b2da      	uxtb	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f9dc 	bl	8002558 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d107      	bne.n	80021be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e005      	b.n	80021ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021c2:	893b      	ldrh	r3, [r7, #8]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	00010002 	.word	0x00010002

080021dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	460b      	mov	r3, r1
 80021f0:	813b      	strh	r3, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002204:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002214:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2200      	movs	r2, #0
 800221e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f8c2 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223c:	d103      	bne.n	8002246 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0aa      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224a:	897b      	ldrh	r3, [r7, #10]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002258:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	6a3a      	ldr	r2, [r7, #32]
 800225e:	4952      	ldr	r1, [pc, #328]	; (80023a8 <I2C_RequestMemoryRead+0x1cc>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f8fa 	bl	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e097      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f964 	bl	8002558 <I2C_WaitOnTXEFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b04      	cmp	r3, #4
 800229c:	d107      	bne.n	80022ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e076      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022b8:	893b      	ldrh	r3, [r7, #8]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	611a      	str	r2, [r3, #16]
 80022c2:	e021      	b.n	8002308 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022c4:	893b      	ldrh	r3, [r7, #8]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f93e 	bl	8002558 <I2C_WaitOnTXEFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d107      	bne.n	80022fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e050      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022fe:	893b      	ldrh	r3, [r7, #8]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230a:	6a39      	ldr	r1, [r7, #32]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f923 	bl	8002558 <I2C_WaitOnTXEFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	2b04      	cmp	r3, #4
 800231e:	d107      	bne.n	8002330 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e035      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002342:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2200      	movs	r2, #0
 800234c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f82b 	bl	80023ac <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236a:	d103      	bne.n	8002374 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e013      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002378:	897b      	ldrh	r3, [r7, #10]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	6a3a      	ldr	r2, [r7, #32]
 800238c:	4906      	ldr	r1, [pc, #24]	; (80023a8 <I2C_RequestMemoryRead+0x1cc>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f863 	bl	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00010002 	.word	0x00010002

080023ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023bc:	e025      	b.n	800240a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d021      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7fe ff03 	bl	80011d0 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e023      	b.n	8002452 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10d      	bne.n	8002430 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4013      	ands	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	e00c      	b.n	800244a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	429a      	cmp	r2, r3
 800244e:	d0b6      	beq.n	80023be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002468:	e051      	b.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002478:	d123      	bne.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002488:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002492:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0204 	orr.w	r2, r3, #4
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e046      	b.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d021      	beq.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7fe fe81 	bl	80011d0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d116      	bne.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e020      	b.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10c      	bne.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e00b      	b.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	43da      	mvns	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d18d      	bne.n	800246a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002564:	e02d      	b.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8ce 	bl	8002708 <I2C_IsAcknowledgeFailed>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e02d      	b.n	80025d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d021      	beq.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257e:	f7fe fe27 	bl	80011d0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	429a      	cmp	r2, r3
 800258c:	d302      	bcc.n	8002594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e007      	b.n	80025d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d1ca      	bne.n	8002566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025e6:	e02d      	b.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f88d 	bl	8002708 <I2C_IsAcknowledgeFailed>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e02d      	b.n	8002654 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d021      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002600:	f7fe fde6 	bl	80011d0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 0220 	orr.w	r2, r3, #32
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e007      	b.n	8002654 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d1ca      	bne.n	80025e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002668:	e042      	b.n	80026f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b10      	cmp	r3, #16
 8002676:	d119      	bne.n	80026ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0210 	mvn.w	r2, #16
 8002680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e029      	b.n	8002700 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ac:	f7fe fd90 	bl	80011d0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d302      	bcc.n	80026c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e007      	b.n	8002700 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d1b5      	bne.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d11b      	bne.n	8002758 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002728:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b08b      	sub	sp, #44	; 0x2c
 8002768:	af06      	add	r7, sp, #24
 800276a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0fd      	b.n	8002972 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f005 ff3a 	bl	8008604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2203      	movs	r2, #3
 8002794:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 f971 	bl	8004a84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	687e      	ldr	r6, [r7, #4]
 80027aa:	466d      	mov	r5, sp
 80027ac:	f106 0410 	add.w	r4, r6, #16
 80027b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	602b      	str	r3, [r5, #0]
 80027b8:	1d33      	adds	r3, r6, #4
 80027ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f002 f93b 	bl	8004a38 <USB_CoreInit>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0ce      	b.n	8002972 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 f96c 	bl	8004ab8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e04c      	b.n	8002880 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	3301      	adds	r3, #1
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	b298      	uxth	r0, r3
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3336      	adds	r3, #54	; 0x36
 8002824:	4602      	mov	r2, r0
 8002826:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3303      	adds	r3, #3
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	3338      	adds	r3, #56	; 0x38
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	333c      	adds	r3, #60	; 0x3c
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3340      	adds	r3, #64	; 0x40
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	3301      	adds	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	d3ad      	bcc.n	80027e6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	e044      	b.n	800291a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028e8:	7bfa      	ldrb	r2, [r7, #15]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	3301      	adds	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d3b5      	bcc.n	8002890 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	687e      	ldr	r6, [r7, #4]
 800292c:	466d      	mov	r5, sp
 800292e:	f106 0410 	add.w	r4, r6, #16
 8002932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	602b      	str	r3, [r5, #0]
 800293a:	1d33      	adds	r3, r6, #4
 800293c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293e:	6838      	ldr	r0, [r7, #0]
 8002940:	f002 f8c6 	bl	8004ad0 <USB_DevInit>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00d      	b.n	8002972 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fa37 	bl	8006dde <USB_DevDisconnect>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800297a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_PCD_Start+0x16>
 800298c:	2302      	movs	r3, #2
 800298e:	e016      	b.n	80029be <HAL_PCD_Start+0x44>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f002 f85b 	bl	8004a58 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029a2:	2101      	movs	r1, #1
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f006 f87c 	bl	8008aa2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 fa0b 	bl	8006dca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b088      	sub	sp, #32
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fa0d 	bl	8006df2 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e2:	d102      	bne.n	80029ea <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fb4a 	bl	800307e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f004 f9ff 	bl	8006df2 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d112      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a12:	b292      	uxth	r2, r2
 8002a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f005 fe6e 	bl	80086fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f925 	bl	8002c70 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 f9e1 	bl	8006df2 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3a:	d10b      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 f9ca 	bl	8006df2 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a68:	d10b      	bne.n	8002a82 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 f9b3 	bl	8006df2 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	d126      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f005 fe4f 	bl	800876c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 f981 	bl	8006df2 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002afa:	f040 8084 	bne.w	8002c06 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e011      	b.n	8002b28 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	7ffb      	ldrb	r3, [r7, #31]
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	b292      	uxth	r2, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	f107 0120 	add.w	r1, r7, #32
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	3301      	adds	r3, #1
 8002b26:	77fb      	strb	r3, [r7, #31]
 8002b28:	7ffb      	ldrb	r3, [r7, #31]
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d9ea      	bls.n	8002b04 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	b292      	uxth	r2, r2
 8002b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b5e:	bf00      	nop
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f6      	beq.n	8002b60 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b84:	b292      	uxth	r2, r2
 8002b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	77fb      	strb	r3, [r7, #31]
 8002b8e:	e010      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4611      	mov	r1, r2
 8002b98:	7ffa      	ldrb	r2, [r7, #31]
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	440a      	add	r2, r1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	f107 0120 	add.w	r1, r7, #32
 8002ba4:	440b      	add	r3, r1
 8002ba6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002baa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	d9eb      	bls.n	8002b90 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be2:	b292      	uxth	r2, r2
 8002be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0204 	orr.w	r2, r2, #4
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f005 fd99 	bl	8008738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 f8f1 	bl	8006df2 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1a:	d10e      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f005 fd52 	bl	80086de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f8d7 	bl	8006df2 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4e:	d10b      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c62:	b292      	uxth	r2, r2
 8002c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_PCD_SetAddress+0x1a>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e013      	b.n	8002cb2 <HAL_PCD_SetAddress+0x42>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 f87e 	bl	8006da4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	70fb      	strb	r3, [r7, #3]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	803b      	strh	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0e      	bge.n	8002cfe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	705a      	strb	r2, [r3, #1]
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 0207 	and.w	r2, r3, #7
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d28:	883a      	ldrh	r2, [r7, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	78ba      	ldrb	r2, [r7, #2]
 8002d32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d46:	78bb      	ldrb	r3, [r7, #2]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d102      	bne.n	8002d52 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_PCD_EP_Open+0xa6>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e00e      	b.n	8002d7e <HAL_PCD_EP_Open+0xc4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fece 	bl	8004b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da0e      	bge.n	8002db8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]
 8002db6:	e00e      	b.n	8002dd6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 0207 	and.w	r2, r3, #7
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_PCD_EP_Close+0x6a>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e00e      	b.n	8002e0e <HAL_PCD_EP_Close+0x88>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68f9      	ldr	r1, [r7, #12]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 f9f0 	bl	80051e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	460b      	mov	r3, r1
 8002e24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	f003 0207 	and.w	r2, r3, #7
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6979      	ldr	r1, [r7, #20]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 fba2 	bl	80055bc <USB_EPStartXfer>
 8002e78:	e005      	b.n	8002e86 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fb9b 	bl	80055bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6979      	ldr	r1, [r7, #20]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fb5f 	bl	80055bc <USB_EPStartXfer>
 8002efe:	e005      	b.n	8002f0c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6979      	ldr	r1, [r7, #20]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fb58 	bl	80055bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 0207 	and.w	r2, r3, #7
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d901      	bls.n	8002f34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e04c      	b.n	8002fce <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0e      	bge.n	8002f5a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	705a      	strb	r2, [r3, #1]
 8002f58:	e00c      	b.n	8002f74 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_EP_SetStall+0x7e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e01c      	b.n	8002fce <HAL_PCD_EP_SetStall+0xb8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f003 fe01 	bl	8006baa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f003 ff26 	bl	8006e10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d901      	bls.n	8002ff4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e040      	b.n	8003076 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da0e      	bge.n	800301a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	705a      	strb	r2, [r3, #1]
 8003018:	e00e      	b.n	8003038 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 0207 	and.w	r2, r3, #7
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_PCD_EP_ClrStall+0x82>
 8003054:	2302      	movs	r3, #2
 8003056:	e00e      	b.n	8003076 <HAL_PCD_EP_ClrStall+0xa0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 fdef 	bl	8006c4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b08e      	sub	sp, #56	; 0x38
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003086:	e2ec      	b.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003090:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800309e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8161 	bne.w	800336a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d152      	bne.n	8003158 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	81fb      	strh	r3, [r7, #14]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3328      	adds	r3, #40	; 0x28
 80030da:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	3302      	adds	r3, #2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	441a      	add	r2, r3
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003116:	2100      	movs	r1, #0
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f005 fac6 	bl	80086aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 829b 	beq.w	8003662 <PCD_EP_ISR_Handler+0x5e4>
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 8296 	bne.w	8003662 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003142:	b2da      	uxtb	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b292      	uxth	r2, r2
 800314a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003156:	e284      	b.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003168:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800316a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316e:	2b00      	cmp	r3, #0
 8003170:	d034      	beq.n	80031dc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	3306      	adds	r3, #6
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f003 fe7c 	bl	8006eae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031c2:	4013      	ands	r3, r2
 80031c4:	823b      	strh	r3, [r7, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	8a3a      	ldrh	r2, [r7, #16]
 80031cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d0:	b292      	uxth	r2, r2
 80031d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f005 fa3b 	bl	8008650 <HAL_PCD_SetupStageCallback>
 80031da:	e242      	b.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031dc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f280 823e 	bge.w	8003662 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031f2:	4013      	ands	r3, r2
 80031f4:	83bb      	strh	r3, [r7, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	8bba      	ldrh	r2, [r7, #28]
 80031fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003200:	b292      	uxth	r2, r2
 8003202:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	3306      	adds	r3, #6
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d019      	beq.n	800326c <PCD_EP_ISR_Handler+0x1ee>
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	6959      	ldr	r1, [r3, #20]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003250:	b29b      	uxth	r3, r3
 8003252:	f003 fe2c 	bl	8006eae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	441a      	add	r2, r3
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003264:	2100      	movs	r1, #0
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f005 fa04 	bl	8008674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 81f2 	bne.w	8003662 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	4413      	add	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d112      	bne.n	80032cc <PCD_EP_ISR_Handler+0x24e>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	e02f      	b.n	800332c <PCD_EP_ISR_Handler+0x2ae>
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b3e      	cmp	r3, #62	; 0x3e
 80032d2:	d813      	bhi.n	80032fc <PCD_EP_ISR_Handler+0x27e>
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <PCD_EP_ISR_Handler+0x270>
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	3301      	adds	r3, #1
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	029b      	lsls	r3, r3, #10
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e017      	b.n	800332c <PCD_EP_ISR_Handler+0x2ae>
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <PCD_EP_ISR_Handler+0x298>
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	3b01      	subs	r3, #1
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	b29b      	uxth	r3, r3
 800331a:	029b      	lsls	r3, r3, #10
 800331c:	b29b      	uxth	r3, r3
 800331e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003326:	b29a      	uxth	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	827b      	strh	r3, [r7, #18]
 800333e:	8a7b      	ldrh	r3, [r7, #18]
 8003340:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003344:	827b      	strh	r3, [r7, #18]
 8003346:	8a7b      	ldrh	r3, [r7, #18]
 8003348:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800334c:	827b      	strh	r3, [r7, #18]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	8a7b      	ldrh	r3, [r7, #18]
 8003354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]
 8003368:	e17b      	b.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800337c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003380:	2b00      	cmp	r3, #0
 8003382:	f280 80ea 	bge.w	800355a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29a      	uxth	r2, r3
 8003398:	f640 738f 	movw	r3, #3983	; 0xf8f
 800339c:	4013      	ands	r3, r2
 800339e:	853b      	strh	r3, [r7, #40]	; 0x28
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b4:	b292      	uxth	r2, r2
 80033b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	7b1b      	ldrb	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d122      	bne.n	800341c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033de:	b29b      	uxth	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	3306      	adds	r3, #6
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8087 	beq.w	8003516 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	6959      	ldr	r1, [r3, #20]
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	88da      	ldrh	r2, [r3, #6]
 8003414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003416:	f003 fd4a 	bl	8006eae <USB_ReadPMA>
 800341a:	e07c      	b.n	8003516 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	78db      	ldrb	r3, [r3, #3]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d108      	bne.n	8003436 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003424:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003426:	461a      	mov	r2, r3
 8003428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f927 	bl	800367e <HAL_PCD_EP_DB_Receive>
 8003430:	4603      	mov	r3, r0
 8003432:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003434:	e06f      	b.n	8003516 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003450:	847b      	strh	r3, [r7, #34]	; 0x22
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	441a      	add	r2, r3
 8003460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003472:	b29b      	uxth	r3, r3
 8003474:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d021      	beq.n	80034d4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	3302      	adds	r3, #2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02a      	beq.n	8003516 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	6959      	ldr	r1, [r3, #20]
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	891a      	ldrh	r2, [r3, #8]
 80034cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034ce:	f003 fcee 	bl	8006eae <USB_ReadPMA>
 80034d2:	e020      	b.n	8003516 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	3306      	adds	r3, #6
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	6959      	ldr	r1, [r3, #20]
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	895a      	ldrh	r2, [r3, #10]
 8003510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003512:	f003 fccc 	bl	8006eae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800351c:	441a      	add	r2, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003528:	441a      	add	r2, r3
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <PCD_EP_ISR_Handler+0x4c2>
 8003536:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	429a      	cmp	r2, r3
 800353e:	d206      	bcs.n	800354e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f005 f894 	bl	8008674 <HAL_PCD_DataOutStageCallback>
 800354c:	e005      	b.n	800355a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003554:	4618      	mov	r0, r3
 8003556:	f002 f831 	bl	80055bc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800355a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d07e      	beq.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	843b      	strh	r3, [r7, #32]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	8c3b      	ldrh	r3, [r7, #32]
 80035a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d00c      	beq.n	80035d2 <PCD_EP_ISR_Handler+0x554>
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d146      	bne.n	8003656 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d141      	bne.n	8003656 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	3302      	adds	r3, #2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	8bfb      	ldrh	r3, [r7, #30]
 8003602:	429a      	cmp	r2, r3
 8003604:	d906      	bls.n	8003614 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	8bfb      	ldrh	r3, [r7, #30]
 800360c:	1ad2      	subs	r2, r2, r3
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	619a      	str	r2, [r3, #24]
 8003612:	e002      	b.n	800361a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f005 f83e 	bl	80086aa <HAL_PCD_DataInStageCallback>
 800362e:	e018      	b.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	8bfb      	ldrh	r3, [r7, #30]
 8003636:	441a      	add	r2, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	8bfb      	ldrh	r3, [r7, #30]
 8003642:	441a      	add	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364e:	4618      	mov	r0, r3
 8003650:	f001 ffb4 	bl	80055bc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003654:	e005      	b.n	8003662 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003658:	461a      	mov	r2, r3
 800365a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f91b 	bl	8003898 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800366a:	b29b      	uxth	r3, r3
 800366c:	b21b      	sxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	f6ff ad0a 	blt.w	8003088 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3738      	adds	r7, #56	; 0x38
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b088      	sub	sp, #32
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d07e      	beq.n	8003794 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	3302      	adds	r3, #2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	8b7b      	ldrh	r3, [r7, #26]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d306      	bcc.n	80036d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	8b7b      	ldrh	r3, [r7, #26]
 80036d0:	1ad2      	subs	r2, r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	619a      	str	r2, [r3, #24]
 80036d6:	e002      	b.n	80036de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d123      	bne.n	800372e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003700:	833b      	strh	r3, [r7, #24]
 8003702:	8b3b      	ldrh	r3, [r7, #24]
 8003704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003708:	833b      	strh	r3, [r7, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	8b3b      	ldrh	r3, [r7, #24]
 800371a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372a:	b29b      	uxth	r3, r3
 800372c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01f      	beq.n	8003778 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	82fb      	strh	r3, [r7, #22]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	8afb      	ldrh	r3, [r7, #22]
 8003764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003774:	b29b      	uxth	r3, r3
 8003776:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003778:	8b7b      	ldrh	r3, [r7, #26]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8087 	beq.w	800388e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6959      	ldr	r1, [r3, #20]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	891a      	ldrh	r2, [r3, #8]
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	f003 fb8e 	bl	8006eae <USB_ReadPMA>
 8003792:	e07c      	b.n	800388e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	3306      	adds	r3, #6
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	8b7b      	ldrh	r3, [r7, #26]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d306      	bcc.n	80037d6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	8b7b      	ldrh	r3, [r7, #26]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	619a      	str	r2, [r3, #24]
 80037d4:	e002      	b.n	80037dc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d123      	bne.n	800382c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fe:	83fb      	strh	r3, [r7, #30]
 8003800:	8bfb      	ldrh	r3, [r7, #30]
 8003802:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003806:	83fb      	strh	r3, [r7, #30]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	8bfb      	ldrh	r3, [r7, #30]
 8003818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003828:	b29b      	uxth	r3, r3
 800382a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11f      	bne.n	8003876 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003850:	83bb      	strh	r3, [r7, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	441a      	add	r2, r3
 8003860:	8bbb      	ldrh	r3, [r7, #28]
 8003862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800386a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003872:	b29b      	uxth	r3, r3
 8003874:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003876:	8b7b      	ldrh	r3, [r7, #26]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	6959      	ldr	r1, [r3, #20]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	895a      	ldrh	r2, [r3, #10]
 8003888:	8b7b      	ldrh	r3, [r7, #26]
 800388a:	f003 fb10 	bl	8006eae <USB_ReadPMA>
    }
  }

  return count;
 800388e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b0a2      	sub	sp, #136	; 0x88
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 81c7 	beq.w	8003c40 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	3302      	adds	r3, #2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d907      	bls.n	80038fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80038f2:	1ad2      	subs	r2, r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	619a      	str	r2, [r3, #24]
 80038f8:	e002      	b.n	8003900 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f040 80b9 	bne.w	8003a7c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d126      	bne.n	8003960 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	4413      	add	r3, r2
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	011a      	lsls	r2, r3, #4
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	4413      	add	r3, r2
 8003934:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003944:	b29a      	uxth	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003958:	b29a      	uxth	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	e01a      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d116      	bne.n	8003996 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	633b      	str	r3, [r7, #48]	; 0x30
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	4413      	add	r3, r2
 800397e:	633b      	str	r3, [r7, #48]	; 0x30
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	011a      	lsls	r2, r3, #4
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	4413      	add	r3, r2
 800398a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	2200      	movs	r2, #0
 8003994:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d126      	bne.n	80039f2 <HAL_PCD_EP_DB_Transmit+0x15a>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4413      	add	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	011a      	lsls	r2, r3, #4
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4413      	add	r3, r2
 80039c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	e017      	b.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x18a>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d113      	bne.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x18a>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	4413      	add	r3, r2
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	011a      	lsls	r2, r3, #4
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f004 fe3e 	bl	80086aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 82d1 	beq.w	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a54:	827b      	strh	r3, [r7, #18]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	441a      	add	r2, r3
 8003a64:	8a7b      	ldrh	r3, [r7, #18]
 8003a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]
 8003a7a:	e2af      	b.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d021      	beq.n	8003aca <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 8283 	bne.w	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ade:	441a      	add	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003aec:	441a      	add	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d309      	bcc.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6a1a      	ldr	r2, [r3, #32]
 8003b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0a:	1ad2      	subs	r2, r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	621a      	str	r2, [r3, #32]
 8003b10:	e015      	b.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d107      	bne.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003b1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003b1e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b28:	e009      	b.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d155      	bne.n	8003bf2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	4413      	add	r3, r2
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	011a      	lsls	r2, r3, #4
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	4413      	add	r3, r2
 8003b68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d112      	bne.n	8003b9a <HAL_PCD_EP_DB_Transmit+0x302>
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	e047      	b.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8003b9e:	d811      	bhi.n	8003bc4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	653b      	str	r3, [r7, #80]	; 0x50
 8003bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	029b      	lsls	r3, r3, #10
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	e032      	b.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <HAL_PCD_EP_DB_Transmit+0x342>
 8003bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	801a      	strh	r2, [r3, #0]
 8003bf0:	e01b      	b.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	785b      	ldrb	r3, [r3, #1]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d117      	bne.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x392>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	4413      	add	r3, r2
 8003c10:	643b      	str	r3, [r7, #64]	; 0x40
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	011a      	lsls	r2, r3, #4
 8003c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6959      	ldr	r1, [r3, #20]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	891a      	ldrh	r2, [r3, #8]
 8003c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	f003 f8f4 	bl	8006e26 <USB_WritePMA>
 8003c3e:	e1cd      	b.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	3306      	adds	r3, #6
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d307      	bcc.n	8003c88 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c80:	1ad2      	subs	r2, r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	619a      	str	r2, [r3, #24]
 8003c86:	e002      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 80c1 	bne.w	8003e1a <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d126      	bne.n	8003cee <HAL_PCD_EP_DB_Transmit+0x456>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cb4:	4413      	add	r3, r2
 8003cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	011a      	lsls	r2, r3, #4
 8003cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cea:	801a      	strh	r2, [r3, #0]
 8003cec:	e01a      	b.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	785b      	ldrb	r3, [r3, #1]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d116      	bne.n	8003d24 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0a:	4413      	add	r3, r2
 8003d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	011a      	lsls	r2, r3, #4
 8003d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d16:	4413      	add	r3, r2
 8003d18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d20:	2200      	movs	r2, #0
 8003d22:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d126      	bne.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x4ea>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	4413      	add	r3, r2
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	011a      	lsls	r2, r3, #4
 8003d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d54:	4413      	add	r3, r2
 8003d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	e01c      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x524>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d118      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x524>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	011a      	lsls	r2, r3, #4
 8003da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003daa:	4413      	add	r3, r2
 8003dac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f004 fc71 	bl	80086aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 8104 	bne.w	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]
 8003e18:	e0e0      	b.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d121      	bne.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	f040 80b4 	bne.w	8003fdc <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e7c:	441a      	add	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d309      	bcc.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6a1a      	ldr	r2, [r3, #32]
 8003ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea8:	1ad2      	subs	r2, r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	621a      	str	r2, [r3, #32]
 8003eae:	e015      	b.n	8003edc <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 8003eb8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ec6:	e009      	b.n	8003edc <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d155      	bne.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x6fe>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	461a      	mov	r2, r3
 8003efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efe:	4413      	add	r3, r2
 8003f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	011a      	lsls	r2, r3, #4
 8003f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d112      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x6a6>
 8003f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e044      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x730>
 8003f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f40:	2b3e      	cmp	r3, #62	; 0x3e
 8003f42:	d811      	bhi.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x6d0>
 8003f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	677b      	str	r3, [r7, #116]	; 0x74
 8003f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x6c2>
 8003f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f56:	3301      	adds	r3, #1
 8003f58:	677b      	str	r3, [r7, #116]	; 0x74
 8003f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	029b      	lsls	r3, r3, #10
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f64:	801a      	strh	r2, [r3, #0]
 8003f66:	e02f      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x730>
 8003f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x6e6>
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	029b      	lsls	r3, r3, #10
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	e018      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x730>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d114      	bne.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x730>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fac:	4413      	add	r3, r2
 8003fae:	667b      	str	r3, [r7, #100]	; 0x64
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	011a      	lsls	r2, r3, #4
 8003fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb8:	4413      	add	r3, r2
 8003fba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6959      	ldr	r1, [r3, #20]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	895a      	ldrh	r2, [r3, #10]
 8003fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f002 ff25 	bl	8006e26 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff6:	823b      	strh	r3, [r7, #16]
 8003ff8:	8a3b      	ldrh	r3, [r7, #16]
 8003ffa:	f083 0310 	eor.w	r3, r3, #16
 8003ffe:	823b      	strh	r3, [r7, #16]
 8004000:	8a3b      	ldrh	r3, [r7, #16]
 8004002:	f083 0320 	eor.w	r3, r3, #32
 8004006:	823b      	strh	r3, [r7, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	8a3b      	ldrh	r3, [r7, #16]
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3788      	adds	r7, #136	; 0x88
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004036:	b480      	push	{r7}
 8004038:	b087      	sub	sp, #28
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	817b      	strh	r3, [r7, #10]
 8004044:	4613      	mov	r3, r2
 8004046:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004054:	897b      	ldrh	r3, [r7, #10]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e009      	b.n	8004080 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800406c:	897a      	ldrh	r2, [r7, #10]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	b29a      	uxth	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	80da      	strh	r2, [r3, #6]
 8004094:	e00b      	b.n	80040ae <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2201      	movs	r2, #1
 800409a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
	...

080040bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e26c      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8087 	beq.w	80041ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040dc:	4b92      	ldr	r3, [pc, #584]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d00c      	beq.n	8004102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040e8:	4b8f      	ldr	r3, [pc, #572]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d112      	bne.n	800411a <HAL_RCC_OscConfig+0x5e>
 80040f4:	4b8c      	ldr	r3, [pc, #560]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d10b      	bne.n	800411a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004102:	4b89      	ldr	r3, [pc, #548]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d06c      	beq.n	80041e8 <HAL_RCC_OscConfig+0x12c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d168      	bne.n	80041e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e246      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x76>
 8004124:	4b80      	ldr	r3, [pc, #512]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7f      	ldr	r2, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800412a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e02e      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x98>
 800413a:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7a      	ldr	r2, [pc, #488]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b78      	ldr	r3, [pc, #480]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a77      	ldr	r2, [pc, #476]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800414c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e01d      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0xbc>
 800415e:	4b72      	ldr	r3, [pc, #456]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a71      	ldr	r2, [pc, #452]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	4b6f      	ldr	r3, [pc, #444]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a6e      	ldr	r2, [pc, #440]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e00b      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
 8004178:	4b6b      	ldr	r3, [pc, #428]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6a      	ldr	r2, [pc, #424]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800417e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	4b68      	ldr	r3, [pc, #416]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a67      	ldr	r2, [pc, #412]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800418a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fd f81a 	bl	80011d0 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a0:	f7fd f816 	bl	80011d0 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	; 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e1fa      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	4b5d      	ldr	r3, [pc, #372]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0xe4>
 80041be:	e014      	b.n	80041ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fd f806 	bl	80011d0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fd f802 	bl	80011d0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e1e6      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x10c>
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d063      	beq.n	80042be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041f6:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004202:	4b49      	ldr	r3, [pc, #292]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b08      	cmp	r3, #8
 800420c:	d11c      	bne.n	8004248 <HAL_RCC_OscConfig+0x18c>
 800420e:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d116      	bne.n	8004248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421a:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_RCC_OscConfig+0x176>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e1ba      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4939      	ldr	r1, [pc, #228]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004246:	e03a      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004250:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_RCC_OscConfig+0x270>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fc ffbb 	bl	80011d0 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425e:	f7fc ffb7 	bl	80011d0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e19b      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4927      	ldr	r1, [pc, #156]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
 8004290:	e015      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_RCC_OscConfig+0x270>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fc ff9a 	bl	80011d0 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a0:	f7fc ff96 	bl	80011d0 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e17a      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03a      	beq.n	8004340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d019      	beq.n	8004306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <HAL_RCC_OscConfig+0x274>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d8:	f7fc ff7a 	bl	80011d0 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e0:	f7fc ff76 	bl	80011d0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e15a      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042fe:	2001      	movs	r0, #1
 8004300:	f000 fac6 	bl	8004890 <RCC_Delay>
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_RCC_OscConfig+0x274>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430c:	f7fc ff60 	bl	80011d0 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004312:	e00f      	b.n	8004334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004314:	f7fc ff5c 	bl	80011d0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d908      	bls.n	8004334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e140      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	42420000 	.word	0x42420000
 8004330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	4b9e      	ldr	r3, [pc, #632]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e9      	bne.n	8004314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a6 	beq.w	800449a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004352:	4b97      	ldr	r3, [pc, #604]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10d      	bne.n	800437a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	4b94      	ldr	r3, [pc, #592]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	4a93      	ldr	r2, [pc, #588]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004368:	61d3      	str	r3, [r2, #28]
 800436a:	4b91      	ldr	r3, [pc, #580]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437a:	4b8e      	ldr	r3, [pc, #568]	; (80045b4 <HAL_RCC_OscConfig+0x4f8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d118      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004386:	4b8b      	ldr	r3, [pc, #556]	; (80045b4 <HAL_RCC_OscConfig+0x4f8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a8a      	ldr	r2, [pc, #552]	; (80045b4 <HAL_RCC_OscConfig+0x4f8>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004392:	f7fc ff1d 	bl	80011d0 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439a:	f7fc ff19 	bl	80011d0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b64      	cmp	r3, #100	; 0x64
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0fd      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ac:	4b81      	ldr	r3, [pc, #516]	; (80045b4 <HAL_RCC_OscConfig+0x4f8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d106      	bne.n	80043ce <HAL_RCC_OscConfig+0x312>
 80043c0:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	4a7a      	ldr	r2, [pc, #488]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6213      	str	r3, [r2, #32]
 80043cc:	e02d      	b.n	800442a <HAL_RCC_OscConfig+0x36e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x334>
 80043d6:	4b76      	ldr	r3, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4a75      	ldr	r2, [pc, #468]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	6213      	str	r3, [r2, #32]
 80043e2:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	4a72      	ldr	r2, [pc, #456]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6213      	str	r3, [r2, #32]
 80043ee:	e01c      	b.n	800442a <HAL_RCC_OscConfig+0x36e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d10c      	bne.n	8004412 <HAL_RCC_OscConfig+0x356>
 80043f8:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4a6c      	ldr	r2, [pc, #432]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80043fe:	f043 0304 	orr.w	r3, r3, #4
 8004402:	6213      	str	r3, [r2, #32]
 8004404:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4a69      	ldr	r2, [pc, #420]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6213      	str	r3, [r2, #32]
 8004410:	e00b      	b.n	800442a <HAL_RCC_OscConfig+0x36e>
 8004412:	4b67      	ldr	r3, [pc, #412]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4a66      	ldr	r2, [pc, #408]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6213      	str	r3, [r2, #32]
 800441e:	4b64      	ldr	r3, [pc, #400]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4a63      	ldr	r2, [pc, #396]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d015      	beq.n	800445e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004432:	f7fc fecd 	bl	80011d0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fc fec9 	bl	80011d0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e0ab      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	4b57      	ldr	r3, [pc, #348]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ee      	beq.n	800443a <HAL_RCC_OscConfig+0x37e>
 800445c:	e014      	b.n	8004488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445e:	f7fc feb7 	bl	80011d0 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fc feb3 	bl	80011d0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e095      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447c:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ee      	bne.n	8004466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4a47      	ldr	r2, [pc, #284]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8081 	beq.w	80045a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a4:	4b42      	ldr	r3, [pc, #264]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d061      	beq.n	8004574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d146      	bne.n	8004546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <HAL_RCC_OscConfig+0x4fc>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fc fe87 	bl	80011d0 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fc fe83 	bl	80011d0 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e067      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ec:	d108      	bne.n	8004500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ee:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	492d      	ldr	r1, [pc, #180]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a19      	ldr	r1, [r3, #32]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	430b      	orrs	r3, r1
 8004512:	4927      	ldr	r1, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_RCC_OscConfig+0x4fc>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fc fe57 	bl	80011d0 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fc fe53 	bl	80011d0 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e037      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004538:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x46a>
 8004544:	e02f      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCC_OscConfig+0x4fc>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fc fe40 	bl	80011d0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fc fe3c 	bl	80011d0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e020      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x498>
 8004572:	e018      	b.n	80045a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e013      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_OscConfig+0x4f4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	429a      	cmp	r2, r3
 8004592:	d106      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
 80045b8:	42420060 	.word	0x42420060

080045bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0d0      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d910      	bls.n	8004600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 0207 	bic.w	r2, r3, #7
 80045e6:	4965      	ldr	r1, [pc, #404]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0b8      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d020      	beq.n	800464e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004618:	4b59      	ldr	r3, [pc, #356]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a58      	ldr	r2, [pc, #352]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004630:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a52      	ldr	r2, [pc, #328]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800463a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	494d      	ldr	r1, [pc, #308]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d040      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d115      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e07f      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e073      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06b      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b39      	ldr	r3, [pc, #228]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4936      	ldr	r1, [pc, #216]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fc fd90 	bl	80011d0 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fc fd8c 	bl	80011d0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e053      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d210      	bcs.n	800470c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0207 	bic.w	r2, r3, #7
 80046f2:	4922      	ldr	r1, [pc, #136]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e032      	b.n	8004772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004718:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4916      	ldr	r1, [pc, #88]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	490e      	ldr	r1, [pc, #56]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800474a:	f000 f821 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800474e:	4601      	mov	r1, r0
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	fa21 f303 	lsr.w	r3, r1, r3
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1cc>)
 8004764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_ClockConfig+0x1d0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fcee 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	40021000 	.word	0x40021000
 8004784:	08008bdc 	.word	0x08008bdc
 8004788:	20000000 	.word	0x20000000
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b490      	push	{r4, r7}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004796:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004798:	1d3c      	adds	r4, r7, #4
 800479a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800479c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047a0:	4b28      	ldr	r3, [pc, #160]	; (8004844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d002      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0x40>
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0x46>
 80047ce:	e02d      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d2:	623b      	str	r3, [r7, #32]
      break;
 80047d4:	e02d      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	0c9b      	lsrs	r3, r3, #18
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047e2:	4413      	add	r3, r2
 80047e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d013      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	0c5b      	lsrs	r3, r3, #17
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004802:	4413      	add	r3, r2
 8004804:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004808:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	4a0f      	ldr	r2, [pc, #60]	; (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 800480e:	fb02 f203 	mul.w	r2, r2, r3
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	e004      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	623b      	str	r3, [r7, #32]
      break;
 800482a:	e002      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <HAL_RCC_GetSysClockFreq+0xbc>)
 800482e:	623b      	str	r3, [r7, #32]
      break;
 8004830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004832:	6a3b      	ldr	r3, [r7, #32]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3728      	adds	r7, #40	; 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	bc90      	pop	{r4, r7}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	08008b80 	.word	0x08008b80
 8004844:	08008b90 	.word	0x08008b90
 8004848:	40021000 	.word	0x40021000
 800484c:	007a1200 	.word	0x007a1200
 8004850:	003d0900 	.word	0x003d0900

08004854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <HAL_RCC_GetHCLKFreq+0x10>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	20000000 	.word	0x20000000

08004868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800486c:	f7ff fff2 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004870:	4601      	mov	r1, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4a03      	ldr	r2, [pc, #12]	; (800488c <HAL_RCC_GetPCLK1Freq+0x24>)
 800487e:	5cd3      	ldrb	r3, [r2, r3]
 8004880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	08008bec 	.word	0x08008bec

08004890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <RCC_Delay+0x34>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <RCC_Delay+0x38>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	0a5b      	lsrs	r3, r3, #9
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048ac:	bf00      	nop
  }
  while (Delay --);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1e5a      	subs	r2, r3, #1
 80048b2:	60fa      	str	r2, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f9      	bne.n	80048ac <RCC_Delay+0x1c>
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000000 	.word	0x20000000
 80048c8:	10624dd3 	.word	0x10624dd3

080048cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d07d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ec:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4a4b      	ldr	r2, [pc, #300]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004902:	61d3      	str	r3, [r2, #28]
 8004904:	4b49      	ldr	r3, [pc, #292]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	4b46      	ldr	r3, [pc, #280]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d118      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004920:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a42      	ldr	r2, [pc, #264]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800492c:	f7fc fc50 	bl	80011d0 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	e008      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fc fc4c 	bl	80011d0 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e06d      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b3a      	ldr	r3, [pc, #232]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004952:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d02e      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	429a      	cmp	r2, r3
 800496e:	d027      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004978:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004980:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004986:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d014      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fc fc1b 	bl	80011d0 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fc fc17 	bl	80011d0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e036      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ee      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4917      	ldr	r1, [pc, #92]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d8:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	490b      	ldr	r1, [pc, #44]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d008      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40007000 	.word	0x40007000
 8004a34:	42420440 	.word	0x42420440

08004a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a38:	b084      	sub	sp, #16
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	f107 0014 	add.w	r0, r7, #20
 8004a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	b004      	add	sp, #16
 8004a56:	4770      	bx	lr

08004a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	f107 0014 	add.w	r0, r7, #20
 8004ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr

08004b10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b09b      	sub	sp, #108	; 0x6c
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d81f      	bhi.n	8004b82 <USB_ActivateEndpoint+0x72>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <USB_ActivateEndpoint+0x38>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b8b 	.word	0x08004b8b
 8004b54:	08004b67 	.word	0x08004b67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b64:	e012      	b.n	8004b8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b6a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b72:	e00b      	b.n	8004b8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004b80:	e004      	b.n	8004b8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004b88:	e000      	b.n	8004b8c <USB_ActivateEndpoint+0x7c>
      break;
 8004b8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	7b1b      	ldrb	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 8149 	bne.w	8004e90 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8084 	beq.w	8004d10 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	88db      	ldrh	r3, [r3, #6]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	81fb      	strh	r3, [r7, #14]
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <USB_ActivateEndpoint+0x17c>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	81bb      	strh	r3, [r7, #12]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	89bb      	ldrh	r3, [r7, #12]
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	78db      	ldrb	r3, [r3, #3]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d020      	beq.n	8004cd6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004caa:	813b      	strh	r3, [r7, #8]
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	f083 0320 	eor.w	r3, r3, #32
 8004cb2:	813b      	strh	r3, [r7, #8]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]
 8004cd4:	e27f      	b.n	80051d6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	897b      	ldrh	r3, [r7, #10]
 8004cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]
 8004d0e:	e262      	b.n	80051d6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	4413      	add	r3, r2
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	011a      	lsls	r2, r3, #4
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	88db      	ldrh	r3, [r3, #6]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	4413      	add	r3, r2
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	011a      	lsls	r2, r3, #4
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d112      	bne.n	8004d96 <USB_ActivateEndpoint+0x286>
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e02f      	b.n	8004df6 <USB_ActivateEndpoint+0x2e6>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d9c:	d813      	bhi.n	8004dc6 <USB_ActivateEndpoint+0x2b6>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	663b      	str	r3, [r7, #96]	; 0x60
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <USB_ActivateEndpoint+0x2a8>
 8004db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db4:	3301      	adds	r3, #1
 8004db6:	663b      	str	r3, [r7, #96]	; 0x60
 8004db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	e017      	b.n	8004df6 <USB_ActivateEndpoint+0x2e6>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <USB_ActivateEndpoint+0x2d0>
 8004dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	663b      	str	r3, [r7, #96]	; 0x60
 8004de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	83fb      	strh	r3, [r7, #30]
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01b      	beq.n	8004e46 <USB_ActivateEndpoint+0x336>
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	83bb      	strh	r3, [r7, #28]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8bbb      	ldrh	r3, [r7, #28]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5c:	837b      	strh	r3, [r7, #26]
 8004e5e:	8b7b      	ldrh	r3, [r7, #26]
 8004e60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e64:	837b      	strh	r3, [r7, #26]
 8004e66:	8b7b      	ldrh	r3, [r7, #26]
 8004e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e6c:	837b      	strh	r3, [r7, #26]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	8b7b      	ldrh	r3, [r7, #26]
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
 8004e8e:	e1a2      	b.n	80051d6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004edc:	4413      	add	r3, r2
 8004ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	891b      	ldrh	r3, [r3, #8]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	653b      	str	r3, [r7, #80]	; 0x50
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	4413      	add	r3, r2
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	011a      	lsls	r2, r3, #4
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	895b      	ldrh	r3, [r3, #10]
 8004f28:	085b      	lsrs	r3, r3, #1
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 8091 	bne.w	8005060 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01b      	beq.n	8004f8e <USB_ActivateEndpoint+0x47e>
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	441a      	add	r2, r3
 8004f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004f9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <USB_ActivateEndpoint+0x4ce>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ff6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ff8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ffc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005000:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005004:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503c:	867b      	strh	r3, [r7, #50]	; 0x32
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
 800505e:	e0ba      	b.n	80051d6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005070:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01d      	beq.n	80050b8 <USB_ActivateEndpoint+0x5a8>
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01d      	beq.n	8005110 <USB_ActivateEndpoint+0x600>
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800510c:	b29b      	uxth	r3, r3
 800510e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	78db      	ldrb	r3, [r3, #3]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d024      	beq.n	8005162 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005132:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005136:	f083 0320 	eor.w	r3, r3, #32
 800513a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]
 8005160:	e01d      	b.n	800519e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005178:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	441a      	add	r2, r3
 8005186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051da:	4618      	mov	r0, r3
 80051dc:	376c      	adds	r7, #108	; 0x6c
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b08d      	sub	sp, #52	; 0x34
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	7b1b      	ldrb	r3, [r3, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 808e 	bne.w	8005314 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d044      	beq.n	800528a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	81bb      	strh	r3, [r7, #12]
 800520e:	89bb      	ldrh	r3, [r7, #12]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01b      	beq.n	8005250 <USB_DeactivateEndpoint+0x6c>
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	817b      	strh	r3, [r7, #10]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	441a      	add	r2, r3
 800523a:	897b      	ldrh	r3, [r7, #10]
 800523c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800524c:	b29b      	uxth	r3, r3
 800524e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005266:	813b      	strh	r3, [r7, #8]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	441a      	add	r2, r3
 8005272:	893b      	ldrh	r3, [r7, #8]
 8005274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800527c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005284:	b29b      	uxth	r3, r3
 8005286:	8013      	strh	r3, [r2, #0]
 8005288:	e192      	b.n	80055b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	827b      	strh	r3, [r7, #18]
 8005298:	8a7b      	ldrh	r3, [r7, #18]
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01b      	beq.n	80052da <USB_DeactivateEndpoint+0xf6>
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	823b      	strh	r3, [r7, #16]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	8a3b      	ldrh	r3, [r7, #16]
 80052c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f0:	81fb      	strh	r3, [r7, #14]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	89fb      	ldrh	r3, [r7, #14]
 80052fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]
 8005312:	e14d      	b.n	80055b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 80a5 	bne.w	8005468 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	843b      	strh	r3, [r7, #32]
 800532c:	8c3b      	ldrh	r3, [r7, #32]
 800532e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01b      	beq.n	800536e <USB_DeactivateEndpoint+0x18a>
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	83fb      	strh	r3, [r7, #30]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	441a      	add	r2, r3
 8005358:	8bfb      	ldrh	r3, [r7, #30]
 800535a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536a:	b29b      	uxth	r3, r3
 800536c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	83bb      	strh	r3, [r7, #28]
 800537c:	8bbb      	ldrh	r3, [r7, #28]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01b      	beq.n	80053be <USB_DeactivateEndpoint+0x1da>
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539c:	837b      	strh	r3, [r7, #26]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	8b7b      	ldrh	r3, [r7, #26]
 80053aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	833b      	strh	r3, [r7, #24]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	8b3b      	ldrh	r3, [r7, #24]
 80053e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	82fb      	strh	r3, [r7, #22]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8afb      	ldrh	r3, [r7, #22]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005444:	82bb      	strh	r3, [r7, #20]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8abb      	ldrh	r3, [r7, #20]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
 8005466:	e0a3      	b.n	80055b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005476:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <USB_DeactivateEndpoint+0x2d4>
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <USB_DeactivateEndpoint+0x324>
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800552c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553c:	b29b      	uxth	r3, r3
 800553e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005556:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800559c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3734      	adds	r7, #52	; 0x34
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0cc      	sub	sp, #304	; 0x130
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	6018      	str	r0, [r3, #0]
 80055c6:	463b      	mov	r3, r7
 80055c8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 872e 	bne.w	8006432 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055d6:	463b      	mov	r3, r7
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d905      	bls.n	80055f2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80055e6:	463b      	mov	r3, r7
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055f0:	e004      	b.n	80055fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	7b1b      	ldrb	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d134      	bne.n	8005670 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005606:	463b      	mov	r3, r7
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6959      	ldr	r1, [r3, #20]
 800560c:	463b      	mov	r3, r7
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	88da      	ldrh	r2, [r3, #6]
 8005612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005616:	b29b      	uxth	r3, r3
 8005618:	1d38      	adds	r0, r7, #4
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	f001 fc03 	bl	8006e26 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	1d3a      	adds	r2, r7, #4
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005632:	b29b      	uxth	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	f107 0210 	add.w	r2, r7, #16
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	440a      	add	r2, r1
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	011a      	lsls	r2, r3, #4
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4413      	add	r3, r2
 8005654:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005662:	b29a      	uxth	r2, r3
 8005664:	f107 030c 	add.w	r3, r7, #12
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	f000 beac 	b.w	80063c8 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005670:	463b      	mov	r3, r7
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	78db      	ldrb	r3, [r3, #3]
 8005676:	2b02      	cmp	r3, #2
 8005678:	f040 838c 	bne.w	8005d94 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	f240 8330 	bls.w	8005cee <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	463b      	mov	r3, r7
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 819e 	beq.w	8005a3c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005704:	1d3a      	adds	r2, r7, #4
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	463b      	mov	r3, r7
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d17a      	bne.n	800580a <USB_EPStartXfer+0x24e>
 8005714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005718:	1d3a      	adds	r2, r7, #4
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005726:	b29b      	uxth	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800572e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	440a      	add	r2, r1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	011a      	lsls	r2, r3, #4
 8005740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4413      	add	r3, r2
 8005748:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800574c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d11a      	bne.n	8005790 <USB_EPStartXfer+0x1d4>
 800575a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005768:	b29a      	uxth	r2, r3
 800576a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005784:	b29a      	uxth	r2, r3
 8005786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e062      	b.n	8005856 <USB_EPStartXfer+0x29a>
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	2b3e      	cmp	r3, #62	; 0x3e
 8005796:	d819      	bhi.n	80057cc <USB_EPStartXfer+0x210>
 8005798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d004      	beq.n	80057b8 <USB_EPStartXfer+0x1fc>
 80057ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057b2:	3301      	adds	r3, #1
 80057b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e044      	b.n	8005856 <USB_EPStartXfer+0x29a>
 80057cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_EPStartXfer+0x230>
 80057e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	029b      	lsls	r3, r3, #10
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fe:	b29a      	uxth	r2, r3
 8005800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e025      	b.n	8005856 <USB_EPStartXfer+0x29a>
 800580a:	463b      	mov	r3, r7
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	785b      	ldrb	r3, [r3, #1]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d120      	bne.n	8005856 <USB_EPStartXfer+0x29a>
 8005814:	1d3b      	adds	r3, r7, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581c:	b29b      	uxth	r3, r3
 800581e:	4619      	mov	r1, r3
 8005820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005824:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	440a      	add	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	011a      	lsls	r2, r3, #4
 8005836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4413      	add	r3, r2
 800583e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584c:	b29a      	uxth	r2, r3
 800584e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	895b      	ldrh	r3, [r3, #10]
 800585c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6959      	ldr	r1, [r3, #20]
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	b29b      	uxth	r3, r3
 800586c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005870:	1d38      	adds	r0, r7, #4
 8005872:	6800      	ldr	r0, [r0, #0]
 8005874:	f001 fad7 	bl	8006e26 <USB_WritePMA>
            ep->xfer_buff += len;
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005882:	441a      	add	r2, r3
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1a      	ldr	r2, [r3, #32]
 8005890:	463b      	mov	r3, r7
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	429a      	cmp	r2, r3
 8005898:	d909      	bls.n	80058ae <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	1ad2      	subs	r2, r2, r3
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	621a      	str	r2, [r3, #32]
 80058ac:	e008      	b.n	80058c0 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80058ae:	463b      	mov	r3, r7
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2200      	movs	r2, #0
 80058be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058c0:	463b      	mov	r3, r7
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d17a      	bne.n	80059c0 <USB_EPStartXfer+0x404>
 80058ca:	f107 0318 	add.w	r3, r7, #24
 80058ce:	1d3a      	adds	r2, r7, #4
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058dc:	b29b      	uxth	r3, r3
 80058de:	4619      	mov	r1, r3
 80058e0:	f107 0318 	add.w	r3, r7, #24
 80058e4:	f107 0218 	add.w	r2, r7, #24
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	440a      	add	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	463b      	mov	r3, r7
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	f107 0318 	add.w	r3, r7, #24
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005902:	f107 0314 	add.w	r3, r7, #20
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11a      	bne.n	8005946 <USB_EPStartXfer+0x38a>
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800591e:	b29a      	uxth	r2, r3
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	f107 0314 	add.w	r3, r7, #20
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593a:	b29a      	uxth	r2, r3
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e067      	b.n	8005a16 <USB_EPStartXfer+0x45a>
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	2b3e      	cmp	r3, #62	; 0x3e
 800594c:	d819      	bhi.n	8005982 <USB_EPStartXfer+0x3c6>
 800594e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <USB_EPStartXfer+0x3b2>
 8005964:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005968:	3301      	adds	r3, #1
 800596a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800596e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005972:	b29b      	uxth	r3, r3
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	b29a      	uxth	r2, r3
 8005978:	f107 0314 	add.w	r3, r7, #20
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e049      	b.n	8005a16 <USB_EPStartXfer+0x45a>
 8005982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800598c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	2b00      	cmp	r3, #0
 8005996:	d104      	bne.n	80059a2 <USB_EPStartXfer+0x3e6>
 8005998:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800599c:	3b01      	subs	r3, #1
 800599e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	029b      	lsls	r3, r3, #10
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f107 0314 	add.w	r3, r7, #20
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e02a      	b.n	8005a16 <USB_EPStartXfer+0x45a>
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d125      	bne.n	8005a16 <USB_EPStartXfer+0x45a>
 80059ca:	f107 0320 	add.w	r3, r7, #32
 80059ce:	1d3a      	adds	r2, r7, #4
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	f107 0320 	add.w	r3, r7, #32
 80059e4:	f107 0220 	add.w	r2, r7, #32
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	440a      	add	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	011a      	lsls	r2, r3, #4
 80059f6:	f107 0320 	add.w	r3, r7, #32
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a02:	f107 031c 	add.w	r3, r7, #28
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f107 031c 	add.w	r3, r7, #28
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	891b      	ldrh	r3, [r3, #8]
 8005a1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6959      	ldr	r1, [r3, #20]
 8005a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a30:	1d38      	adds	r0, r7, #4
 8005a32:	6800      	ldr	r0, [r0, #0]
 8005a34:	f001 f9f7 	bl	8006e26 <USB_WritePMA>
 8005a38:	f000 bcc6 	b.w	80063c8 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d164      	bne.n	8005b10 <USB_EPStartXfer+0x554>
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	4413      	add	r3, r2
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	011a      	lsls	r2, r3, #4
 8005a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a68:	4413      	add	r3, r2
 8005a6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d112      	bne.n	8005a9e <USB_EPStartXfer+0x4e2>
 8005a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e057      	b.n	8005b4e <USB_EPStartXfer+0x592>
 8005a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa4:	d817      	bhi.n	8005ad6 <USB_EPStartXfer+0x51a>
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <USB_EPStartXfer+0x50a>
 8005abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e03b      	b.n	8005b4e <USB_EPStartXfer+0x592>
 8005ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <USB_EPStartXfer+0x53a>
 8005aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005af0:	3b01      	subs	r3, #1
 8005af2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005af6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	029b      	lsls	r3, r3, #10
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e01e      	b.n	8005b4e <USB_EPStartXfer+0x592>
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d119      	bne.n	8005b4e <USB_EPStartXfer+0x592>
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2e:	4413      	add	r3, r2
 8005b30:	653b      	str	r3, [r7, #80]	; 0x50
 8005b32:	463b      	mov	r3, r7
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b4e:	463b      	mov	r3, r7
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	891b      	ldrh	r3, [r3, #8]
 8005b54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6959      	ldr	r1, [r3, #20]
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b68:	1d38      	adds	r0, r7, #4
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	f001 f95b 	bl	8006e26 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7a:	441a      	add	r2, r3
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d909      	bls.n	8005ba6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a1a      	ldr	r2, [r3, #32]
 8005b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	621a      	str	r2, [r3, #32]
 8005ba4:	e008      	b.n	8005bb8 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d164      	bne.n	8005c92 <USB_EPStartXfer+0x6d6>
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	4413      	add	r3, r2
 8005bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	011a      	lsls	r2, r3, #4
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d112      	bne.n	8005c20 <USB_EPStartXfer+0x664>
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	e054      	b.n	8005cca <USB_EPStartXfer+0x70e>
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	2b3e      	cmp	r3, #62	; 0x3e
 8005c26:	d817      	bhi.n	8005c58 <USB_EPStartXfer+0x69c>
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <USB_EPStartXfer+0x68c>
 8005c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e038      	b.n	8005cca <USB_EPStartXfer+0x70e>
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <USB_EPStartXfer+0x6bc>
 8005c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c72:	3b01      	subs	r3, #1
 8005c74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	029b      	lsls	r3, r3, #10
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e01b      	b.n	8005cca <USB_EPStartXfer+0x70e>
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d116      	bne.n	8005cca <USB_EPStartXfer+0x70e>
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005caa:	4413      	add	r3, r2
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	463b      	mov	r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	895b      	ldrh	r3, [r3, #10]
 8005cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6959      	ldr	r1, [r3, #20]
 8005cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ce4:	1d38      	adds	r0, r7, #4
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	f001 f89d 	bl	8006e26 <USB_WritePMA>
 8005cec:	e36c      	b.n	80063c8 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d50:	4413      	add	r3, r2
 8005d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	011a      	lsls	r2, r3, #4
 8005d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d5e:	4413      	add	r3, r2
 8005d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	891b      	ldrh	r3, [r3, #8]
 8005d76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6959      	ldr	r1, [r3, #20]
 8005d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d8a:	1d38      	adds	r0, r7, #4
 8005d8c:	6800      	ldr	r0, [r0, #0]
 8005d8e:	f001 f84a 	bl	8006e26 <USB_WritePMA>
 8005d92:	e319      	b.n	80063c8 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005d94:	1d3b      	adds	r3, r7, #4
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	463b      	mov	r3, r7
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dcc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005dd8:	463b      	mov	r3, r7
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dea:	1d3b      	adds	r3, r7, #4
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8162 	beq.w	80060ca <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d164      	bne.n	8005ee2 <USB_EPStartXfer+0x926>
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2c:	4413      	add	r3, r2
 8005e2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	011a      	lsls	r2, r3, #4
 8005e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e40:	677b      	str	r3, [r7, #116]	; 0x74
 8005e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d112      	bne.n	8005e70 <USB_EPStartXfer+0x8b4>
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e057      	b.n	8005f20 <USB_EPStartXfer+0x964>
 8005e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e74:	2b3e      	cmp	r3, #62	; 0x3e
 8005e76:	d817      	bhi.n	8005ea8 <USB_EPStartXfer+0x8ec>
 8005e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <USB_EPStartXfer+0x8dc>
 8005e8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e92:	3301      	adds	r3, #1
 8005e94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	e03b      	b.n	8005f20 <USB_EPStartXfer+0x964>
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <USB_EPStartXfer+0x90c>
 8005ebe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ec8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e01e      	b.n	8005f20 <USB_EPStartXfer+0x964>
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d119      	bne.n	8005f20 <USB_EPStartXfer+0x964>
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005efc:	4413      	add	r3, r2
 8005efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	011a      	lsls	r2, r3, #4
 8005f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f0e:	4413      	add	r3, r2
 8005f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f20:	463b      	mov	r3, r7
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	895b      	ldrh	r3, [r3, #10]
 8005f26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6959      	ldr	r1, [r3, #20]
 8005f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f3a:	1d38      	adds	r0, r7, #4
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f000 ff72 	bl	8006e26 <USB_WritePMA>
          ep->xfer_buff += len;
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4c:	441a      	add	r2, r3
 8005f4e:	463b      	mov	r3, r7
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d909      	bls.n	8005f78 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	463b      	mov	r3, r7
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	621a      	str	r2, [r3, #32]
 8005f76:	e008      	b.n	8005f8a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 821a 	beq.w	80063c8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d164      	bne.n	8006068 <USB_EPStartXfer+0xaac>
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fb2:	4413      	add	r3, r2
 8005fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	011a      	lsls	r2, r3, #4
 8005fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d112      	bne.n	8005ff6 <USB_EPStartXfer+0xa3a>
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	e057      	b.n	80060a6 <USB_EPStartXfer+0xaea>
 8005ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8005ffc:	d817      	bhi.n	800602e <USB_EPStartXfer+0xa72>
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <USB_EPStartXfer+0xa62>
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	3301      	adds	r3, #1
 800601a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006022:	b29b      	uxth	r3, r3
 8006024:	029b      	lsls	r3, r3, #10
 8006026:	b29a      	uxth	r2, r3
 8006028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e03b      	b.n	80060a6 <USB_EPStartXfer+0xaea>
 800602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <USB_EPStartXfer+0xa92>
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	3b01      	subs	r3, #1
 800604a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006052:	b29b      	uxth	r3, r3
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006060:	b29a      	uxth	r2, r3
 8006062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e01e      	b.n	80060a6 <USB_EPStartXfer+0xaea>
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d119      	bne.n	80060a6 <USB_EPStartXfer+0xaea>
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	673b      	str	r3, [r7, #112]	; 0x70
 8006078:	1d3b      	adds	r3, r7, #4
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006080:	b29b      	uxth	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006086:	4413      	add	r3, r2
 8006088:	673b      	str	r3, [r7, #112]	; 0x70
 800608a:	463b      	mov	r3, r7
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006094:	4413      	add	r3, r2
 8006096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800609a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800609c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	891b      	ldrh	r3, [r3, #8]
 80060ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060b0:	463b      	mov	r3, r7
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6959      	ldr	r1, [r3, #20]
 80060b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060c0:	1d38      	adds	r0, r7, #4
 80060c2:	6800      	ldr	r0, [r0, #0]
 80060c4:	f000 feaf 	bl	8006e26 <USB_WritePMA>
 80060c8:	e17e      	b.n	80063c8 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060ca:	463b      	mov	r3, r7
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d16f      	bne.n	80061b4 <USB_EPStartXfer+0xbf8>
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060ec:	4413      	add	r3, r2
 80060ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060f2:	463b      	mov	r3, r7
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060fe:	4413      	add	r3, r2
 8006100:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <USB_EPStartXfer+0xb82>
 8006110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006134:	b29a      	uxth	r2, r3
 8006136:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	e05f      	b.n	80061fe <USB_EPStartXfer+0xc42>
 800613e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006142:	2b3e      	cmp	r3, #62	; 0x3e
 8006144:	d818      	bhi.n	8006178 <USB_EPStartXfer+0xbbc>
 8006146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <USB_EPStartXfer+0xbaa>
 800615c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006160:	3301      	adds	r3, #1
 8006162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800616a:	b29b      	uxth	r3, r3
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e042      	b.n	80061fe <USB_EPStartXfer+0xc42>
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	095b      	lsrs	r3, r3, #5
 800617e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USB_EPStartXfer+0xbdc>
 800618e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006192:	3b01      	subs	r3, #1
 8006194:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006198:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800619c:	b29b      	uxth	r3, r3
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b0:	801a      	strh	r2, [r3, #0]
 80061b2:	e024      	b.n	80061fe <USB_EPStartXfer+0xc42>
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d11f      	bne.n	80061fe <USB_EPStartXfer+0xc42>
 80061be:	1d3b      	adds	r3, r7, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061d6:	4413      	add	r3, r2
 80061d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061dc:	463b      	mov	r3, r7
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	011a      	lsls	r2, r3, #4
 80061e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061e8:	4413      	add	r3, r2
 80061ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	891b      	ldrh	r3, [r3, #8]
 8006204:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6959      	ldr	r1, [r3, #20]
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	b29b      	uxth	r3, r3
 8006214:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006218:	1d38      	adds	r0, r7, #4
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	f000 fe03 	bl	8006e26 <USB_WritePMA>
          ep->xfer_buff += len;
 8006220:	463b      	mov	r3, r7
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622a:	441a      	add	r2, r3
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	429a      	cmp	r2, r3
 8006240:	d909      	bls.n	8006256 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006242:	463b      	mov	r3, r7
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	621a      	str	r2, [r3, #32]
 8006254:	e008      	b.n	8006268 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006256:	463b      	mov	r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006260:	463b      	mov	r3, r7
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2200      	movs	r2, #0
 8006266:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 80ab 	beq.w	80063c8 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006272:	1d3b      	adds	r3, r7, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d16f      	bne.n	8006364 <USB_EPStartXfer+0xda8>
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800628c:	1d3b      	adds	r3, r7, #4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800629c:	4413      	add	r3, r2
 800629e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062a2:	463b      	mov	r3, r7
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	011a      	lsls	r2, r3, #4
 80062aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062ae:	4413      	add	r3, r2
 80062b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d116      	bne.n	80062ee <USB_EPStartXfer+0xd32>
 80062c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e05b      	b.n	80063a6 <USB_EPStartXfer+0xdea>
 80062ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f2:	2b3e      	cmp	r3, #62	; 0x3e
 80062f4:	d818      	bhi.n	8006328 <USB_EPStartXfer+0xd6c>
 80062f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <USB_EPStartXfer+0xd5a>
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006310:	3301      	adds	r3, #1
 8006312:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631a:	b29b      	uxth	r3, r3
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	b29a      	uxth	r2, r3
 8006320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e03e      	b.n	80063a6 <USB_EPStartXfer+0xdea>
 8006328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006336:	f003 031f 	and.w	r3, r3, #31
 800633a:	2b00      	cmp	r3, #0
 800633c:	d104      	bne.n	8006348 <USB_EPStartXfer+0xd8c>
 800633e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006342:	3b01      	subs	r3, #1
 8006344:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634c:	b29b      	uxth	r3, r3
 800634e:	029b      	lsls	r3, r3, #10
 8006350:	b29b      	uxth	r3, r3
 8006352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635a:	b29a      	uxth	r2, r3
 800635c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e020      	b.n	80063a6 <USB_EPStartXfer+0xdea>
 8006364:	463b      	mov	r3, r7
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d11b      	bne.n	80063a6 <USB_EPStartXfer+0xdea>
 800636e:	1d3b      	adds	r3, r7, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800637e:	4413      	add	r3, r2
 8006380:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	011a      	lsls	r2, r3, #4
 800638c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006390:	4413      	add	r3, r2
 8006392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800639a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	895b      	ldrh	r3, [r3, #10]
 80063ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b0:	463b      	mov	r3, r7
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063c0:	1d38      	adds	r0, r7, #4
 80063c2:	6800      	ldr	r0, [r0, #0]
 80063c4:	f000 fd2f 	bl	8006e26 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f107 020a 	add.w	r2, r7, #10
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e6:	8013      	strh	r3, [r2, #0]
 80063e8:	f107 030a 	add.w	r3, r7, #10
 80063ec:	f107 020a 	add.w	r2, r7, #10
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	f082 0210 	eor.w	r2, r2, #16
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	f107 030a 	add.w	r3, r7, #10
 80063fc:	f107 020a 	add.w	r2, r7, #10
 8006400:	8812      	ldrh	r2, [r2, #0]
 8006402:	f082 0220 	eor.w	r2, r2, #32
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	f107 030a 	add.w	r3, r7, #10
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642c:	b29b      	uxth	r3, r3
 800642e:	8013      	strh	r3, [r2, #0]
 8006430:	e3b5      	b.n	8006b9e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	7b1b      	ldrb	r3, [r3, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f040 8090 	bne.w	800655e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800643e:	463b      	mov	r3, r7
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	463b      	mov	r3, r7
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	429a      	cmp	r2, r3
 800644c:	d90e      	bls.n	800646c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	619a      	str	r2, [r3, #24]
 800646a:	e008      	b.n	800647e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006476:	463b      	mov	r3, r7
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006486:	1d3b      	adds	r3, r7, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006496:	4413      	add	r3, r2
 8006498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <USB_EPStartXfer+0xf2c>
 80064ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e32c      	b.n	8006b42 <USB_EPStartXfer+0x1586>
 80064e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ec:	2b3e      	cmp	r3, #62	; 0x3e
 80064ee:	d818      	bhi.n	8006522 <USB_EPStartXfer+0xf66>
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <USB_EPStartXfer+0xf54>
 8006506:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800650a:	3301      	adds	r3, #1
 800650c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006510:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e30f      	b.n	8006b42 <USB_EPStartXfer+0x1586>
 8006522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <USB_EPStartXfer+0xf86>
 8006538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800653c:	3b01      	subs	r3, #1
 800653e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006542:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006546:	b29b      	uxth	r3, r3
 8006548:	029b      	lsls	r3, r3, #10
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e2f1      	b.n	8006b42 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	78db      	ldrb	r3, [r3, #3]
 8006564:	2b02      	cmp	r3, #2
 8006566:	f040 818f 	bne.w	8006888 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d175      	bne.n	8006660 <USB_EPStartXfer+0x10a4>
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800657c:	1d3b      	adds	r3, r7, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800658c:	4413      	add	r3, r2
 800658e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006592:	463b      	mov	r3, r7
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	011a      	lsls	r2, r3, #4
 800659a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800659e:	4413      	add	r3, r2
 80065a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d116      	bne.n	80065e0 <USB_EPStartXfer+0x1024>
 80065b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	e065      	b.n	80066ac <USB_EPStartXfer+0x10f0>
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b3e      	cmp	r3, #62	; 0x3e
 80065e8:	d81a      	bhi.n	8006620 <USB_EPStartXfer+0x1064>
 80065ea:	463b      	mov	r3, r7
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <USB_EPStartXfer+0x1052>
 8006604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006608:	3301      	adds	r3, #1
 800660a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006612:	b29b      	uxth	r3, r3
 8006614:	029b      	lsls	r3, r3, #10
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e045      	b.n	80066ac <USB_EPStartXfer+0x10f0>
 8006620:	463b      	mov	r3, r7
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <USB_EPStartXfer+0x1088>
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663e:	3b01      	subs	r3, #1
 8006640:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006648:	b29b      	uxth	r3, r3
 800664a:	029b      	lsls	r3, r3, #10
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e025      	b.n	80066ac <USB_EPStartXfer+0x10f0>
 8006660:	463b      	mov	r3, r7
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	785b      	ldrb	r3, [r3, #1]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d120      	bne.n	80066ac <USB_EPStartXfer+0x10f0>
 800666a:	1d3b      	adds	r3, r7, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006672:	1d3b      	adds	r3, r7, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006682:	4413      	add	r3, r2
 8006684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	011a      	lsls	r2, r3, #4
 8006690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006694:	4413      	add	r3, r2
 8006696:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800669a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	1d3b      	adds	r3, r7, #4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066b4:	463b      	mov	r3, r7
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d175      	bne.n	80067aa <USB_EPStartXfer+0x11ee>
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066d6:	4413      	add	r3, r2
 80066d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	011a      	lsls	r2, r3, #4
 80066e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d116      	bne.n	800672a <USB_EPStartXfer+0x116e>
 80066fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006708:	b29a      	uxth	r2, r3
 800670a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e061      	b.n	80067ee <USB_EPStartXfer+0x1232>
 800672a:	463b      	mov	r3, r7
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b3e      	cmp	r3, #62	; 0x3e
 8006732:	d81a      	bhi.n	800676a <USB_EPStartXfer+0x11ae>
 8006734:	463b      	mov	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <USB_EPStartXfer+0x119c>
 800674e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006752:	3301      	adds	r3, #1
 8006754:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006758:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800675c:	b29b      	uxth	r3, r3
 800675e:	029b      	lsls	r3, r3, #10
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e041      	b.n	80067ee <USB_EPStartXfer+0x1232>
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006776:	463b      	mov	r3, r7
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <USB_EPStartXfer+0x11d2>
 8006784:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006788:	3b01      	subs	r3, #1
 800678a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800678e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e021      	b.n	80067ee <USB_EPStartXfer+0x1232>
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d11c      	bne.n	80067ee <USB_EPStartXfer+0x1232>
 80067b4:	1d3b      	adds	r3, r7, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067bc:	b29b      	uxth	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067c4:	4413      	add	r3, r2
 80067c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	011a      	lsls	r2, r3, #4
 80067d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067d6:	4413      	add	r3, r2
 80067d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e0:	463b      	mov	r3, r7
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067ee:	463b      	mov	r3, r7
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 81a4 	beq.w	8006b42 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	463b      	mov	r3, r7
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800680e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <USB_EPStartXfer+0x126a>
 800681a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10d      	bne.n	8006842 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006826:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800682a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800682e:	2b00      	cmp	r3, #0
 8006830:	f040 8187 	bne.w	8006b42 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006834:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 8180 	bne.w	8006b42 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	463b      	mov	r3, r7
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]
 8006886:	e15c      	b.n	8006b42 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006888:	463b      	mov	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	78db      	ldrb	r3, [r3, #3]
 800688e:	2b01      	cmp	r3, #1
 8006890:	f040 8155 	bne.w	8006b3e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006894:	463b      	mov	r3, r7
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d90e      	bls.n	80068c2 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80068a4:	463b      	mov	r3, r7
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b8:	1ad2      	subs	r2, r2, r3
 80068ba:	463b      	mov	r3, r7
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	619a      	str	r2, [r3, #24]
 80068c0:	e008      	b.n	80068d4 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80068cc:	463b      	mov	r3, r7
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2200      	movs	r2, #0
 80068d2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80068d4:	463b      	mov	r3, r7
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d16f      	bne.n	80069be <USB_EPStartXfer+0x1402>
 80068de:	1d3b      	adds	r3, r7, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068e6:	1d3b      	adds	r3, r7, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068f6:	4413      	add	r3, r2
 80068f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068fc:	463b      	mov	r3, r7
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	011a      	lsls	r2, r3, #4
 8006904:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006908:	4413      	add	r3, r2
 800690a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800690e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d116      	bne.n	8006948 <USB_EPStartXfer+0x138c>
 800691a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006926:	b29a      	uxth	r2, r3
 8006928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693e:	b29a      	uxth	r2, r3
 8006940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e05f      	b.n	8006a08 <USB_EPStartXfer+0x144c>
 8006948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694c:	2b3e      	cmp	r3, #62	; 0x3e
 800694e:	d818      	bhi.n	8006982 <USB_EPStartXfer+0x13c6>
 8006950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800695a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <USB_EPStartXfer+0x13b4>
 8006966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800696a:	3301      	adds	r3, #1
 800696c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006974:	b29b      	uxth	r3, r3
 8006976:	029b      	lsls	r3, r3, #10
 8006978:	b29a      	uxth	r2, r3
 800697a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e042      	b.n	8006a08 <USB_EPStartXfer+0x144c>
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800698c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <USB_EPStartXfer+0x13e6>
 8006998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800699c:	3b01      	subs	r3, #1
 800699e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e024      	b.n	8006a08 <USB_EPStartXfer+0x144c>
 80069be:	463b      	mov	r3, r7
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d11f      	bne.n	8006a08 <USB_EPStartXfer+0x144c>
 80069c8:	1d3b      	adds	r3, r7, #4
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	4413      	add	r3, r2
 80069e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069e6:	463b      	mov	r3, r7
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	011a      	lsls	r2, r3, #4
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	1d3b      	adds	r3, r7, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a10:	463b      	mov	r3, r7
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d16f      	bne.n	8006afa <USB_EPStartXfer+0x153e>
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a22:	1d3b      	adds	r3, r7, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a32:	4413      	add	r3, r2
 8006a34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a38:	463b      	mov	r3, r7
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	011a      	lsls	r2, r3, #4
 8006a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a44:	4413      	add	r3, r2
 8006a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d116      	bne.n	8006a84 <USB_EPStartXfer+0x14c8>
 8006a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e05e      	b.n	8006b42 <USB_EPStartXfer+0x1586>
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a88:	2b3e      	cmp	r3, #62	; 0x3e
 8006a8a:	d818      	bhi.n	8006abe <USB_EPStartXfer+0x1502>
 8006a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <USB_EPStartXfer+0x14f0>
 8006aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006aac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e041      	b.n	8006b42 <USB_EPStartXfer+0x1586>
 8006abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <USB_EPStartXfer+0x1522>
 8006ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	029b      	lsls	r3, r3, #10
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e023      	b.n	8006b42 <USB_EPStartXfer+0x1586>
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d11e      	bne.n	8006b42 <USB_EPStartXfer+0x1586>
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	4413      	add	r3, r2
 8006b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	011a      	lsls	r2, r3, #4
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	4413      	add	r3, r2
 8006b28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e001      	b.n	8006b42 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e02e      	b.n	8006ba0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b42:	1d3b      	adds	r3, r7, #4
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b60:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b68:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b74:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d020      	beq.n	8006bfe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd2:	81bb      	strh	r3, [r7, #12]
 8006bd4:	89bb      	ldrh	r3, [r7, #12]
 8006bd6:	f083 0310 	eor.w	r3, r3, #16
 8006bda:	81bb      	strh	r3, [r7, #12]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	89bb      	ldrh	r3, [r7, #12]
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]
 8006bfc:	e01f      	b.n	8006c3e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	81fb      	strh	r3, [r7, #14]
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c1c:	81fb      	strh	r3, [r7, #14]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	441a      	add	r2, r3
 8006c28:	89fb      	ldrh	r3, [r7, #14]
 8006c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr

08006c4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	7b1b      	ldrb	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 809d 	bne.w	8006d98 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d04c      	beq.n	8006d00 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	823b      	strh	r3, [r7, #16]
 8006c74:	8a3b      	ldrh	r3, [r7, #16]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01b      	beq.n	8006cb6 <USB_EPClearStall+0x6c>
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	81fb      	strh	r3, [r7, #14]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	89fb      	ldrh	r3, [r7, #14]
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	78db      	ldrb	r3, [r3, #3]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d06c      	beq.n	8006d98 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd4:	81bb      	strh	r3, [r7, #12]
 8006cd6:	89bb      	ldrh	r3, [r7, #12]
 8006cd8:	f083 0320 	eor.w	r3, r3, #32
 8006cdc:	81bb      	strh	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	89bb      	ldrh	r3, [r7, #12]
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]
 8006cfe:	e04b      	b.n	8006d98 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	82fb      	strh	r3, [r7, #22]
 8006d0e:	8afb      	ldrh	r3, [r7, #22]
 8006d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01b      	beq.n	8006d50 <USB_EPClearStall+0x106>
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	82bb      	strh	r3, [r7, #20]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	8abb      	ldrh	r3, [r7, #20]
 8006d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	827b      	strh	r3, [r7, #18]
 8006d68:	8a7b      	ldrh	r3, [r7, #18]
 8006d6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d6e:	827b      	strh	r3, [r7, #18]
 8006d70:	8a7b      	ldrh	r3, [r7, #18]
 8006d72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d76:	827b      	strh	r3, [r7, #18]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8a7b      	ldrh	r3, [r7, #18]
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2280      	movs	r2, #128	; 0x80
 8006dba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e04:	68fb      	ldr	r3, [r7, #12]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b08d      	sub	sp, #52	; 0x34
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	4611      	mov	r1, r2
 8006e32:	461a      	mov	r2, r3
 8006e34:	460b      	mov	r3, r1
 8006e36:	80fb      	strh	r3, [r7, #6]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e3c:	88bb      	ldrh	r3, [r7, #4]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	005a      	lsls	r2, r3, #1
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5e:	e01e      	b.n	8006e9e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	3301      	adds	r3, #1
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	3302      	adds	r3, #2
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	3302      	adds	r3, #2
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	3301      	adds	r3, #1
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1dd      	bne.n	8006e60 <USB_WritePMA+0x3a>
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	3734      	adds	r7, #52	; 0x34
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b08b      	sub	sp, #44	; 0x2c
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	461a      	mov	r2, r3
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	80fb      	strh	r3, [r7, #6]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ec4:	88bb      	ldrh	r3, [r7, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	005a      	lsls	r2, r3, #1
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee6:	e01b      	b.n	8006f20 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3301      	adds	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	3302      	adds	r3, #2
 8006f18:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e0      	bne.n	8006ee8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006f26:	88bb      	ldrh	r3, [r7, #4]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	701a      	strb	r2, [r3, #0]
  }
}
 8006f42:	bf00      	nop
 8006f44:	372c      	adds	r7, #44	; 0x2c
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006f58:	2304      	movs	r3, #4
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	2181      	movs	r1, #129	; 0x81
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fc75 	bl	800884e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f001 fd84 	bl	8008a78 <USBD_static_malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006f82:	2302      	movs	r3, #2
 8006f84:	e005      	b.n	8006f92 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006fa6:	2181      	movs	r1, #129	; 0x81
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fc76 	bl	800889a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fd63 	bl	8008a90 <USBD_static_free>
    pdev->pClassData = NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007006:	2b00      	cmp	r3, #0
 8007008:	d045      	beq.n	8007096 <USBD_HID_Setup+0xba>
 800700a:	2b20      	cmp	r3, #32
 800700c:	f040 80d3 	bne.w	80071b6 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	3b02      	subs	r3, #2
 8007016:	2b09      	cmp	r3, #9
 8007018:	d835      	bhi.n	8007086 <USBD_HID_Setup+0xaa>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <USBD_HID_Setup+0x44>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007077 	.word	0x08007077
 8007024:	08007057 	.word	0x08007057
 8007028:	08007087 	.word	0x08007087
 800702c:	08007087 	.word	0x08007087
 8007030:	08007087 	.word	0x08007087
 8007034:	08007087 	.word	0x08007087
 8007038:	08007087 	.word	0x08007087
 800703c:	08007087 	.word	0x08007087
 8007040:	08007065 	.word	0x08007065
 8007044:	08007049 	.word	0x08007049
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	885b      	ldrh	r3, [r3, #2]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	601a      	str	r2, [r3, #0]
          break;
 8007054:	e01e      	b.n	8007094 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2201      	movs	r2, #1
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f937 	bl	80082d0 <USBD_CtlSendData>
          break;
 8007062:	e017      	b.n	8007094 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	885b      	ldrh	r3, [r3, #2]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	b29b      	uxth	r3, r3
 800706c:	b2db      	uxtb	r3, r3
 800706e:	461a      	mov	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	605a      	str	r2, [r3, #4]
          break;
 8007074:	e00e      	b.n	8007094 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3304      	adds	r3, #4
 800707a:	2201      	movs	r2, #1
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f926 	bl	80082d0 <USBD_CtlSendData>
          break;
 8007084:	e006      	b.n	8007094 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f8b7 	bl	80081fc <USBD_CtlError>
          ret = USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	75fb      	strb	r3, [r7, #23]
          break;
 8007092:	bf00      	nop
      }
      break;
 8007094:	e096      	b.n	80071c4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b0b      	cmp	r3, #11
 800709c:	f200 8083 	bhi.w	80071a6 <USBD_HID_Setup+0x1ca>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <USBD_HID_Setup+0xcc>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	080071a7 	.word	0x080071a7
 80070b0:	080071a7 	.word	0x080071a7
 80070b4:	080071a7 	.word	0x080071a7
 80070b8:	080071a7 	.word	0x080071a7
 80070bc:	080071a7 	.word	0x080071a7
 80070c0:	08007101 	.word	0x08007101
 80070c4:	080071a7 	.word	0x080071a7
 80070c8:	080071a7 	.word	0x080071a7
 80070cc:	080071a7 	.word	0x080071a7
 80070d0:	08007159 	.word	0x08007159
 80070d4:	08007181 	.word	0x08007181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d107      	bne.n	80070f2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80070e2:	f107 030e 	add.w	r3, r7, #14
 80070e6:	2202      	movs	r2, #2
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f8f0 	bl	80082d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070f0:	e060      	b.n	80071b4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 f881 	bl	80081fc <USBD_CtlError>
            ret = USBD_FAIL;
 80070fa:	2302      	movs	r3, #2
 80070fc:	75fb      	strb	r3, [r7, #23]
          break;
 80070fe:	e059      	b.n	80071b4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b22      	cmp	r3, #34	; 0x22
 800710a:	d108      	bne.n	800711e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	88db      	ldrh	r3, [r3, #6]
 8007110:	2b4a      	cmp	r3, #74	; 0x4a
 8007112:	bf28      	it	cs
 8007114:	234a      	movcs	r3, #74	; 0x4a
 8007116:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007118:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <USBD_HID_Setup+0x1f4>)
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	e015      	b.n	800714a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	885b      	ldrh	r3, [r3, #2]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b21      	cmp	r3, #33	; 0x21
 8007128:	d108      	bne.n	800713c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800712a:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <USBD_HID_Setup+0x1f8>)
 800712c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	2b09      	cmp	r3, #9
 8007134:	bf28      	it	cs
 8007136:	2309      	movcs	r3, #9
 8007138:	83fb      	strh	r3, [r7, #30]
 800713a:	e006      	b.n	800714a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 f85c 	bl	80081fc <USBD_CtlError>
            ret = USBD_FAIL;
 8007144:	2302      	movs	r3, #2
 8007146:	75fb      	strb	r3, [r7, #23]
            break;
 8007148:	e034      	b.n	80071b4 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800714a:	8bfb      	ldrh	r3, [r7, #30]
 800714c:	461a      	mov	r2, r3
 800714e:	69b9      	ldr	r1, [r7, #24]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f8bd 	bl	80082d0 <USBD_CtlSendData>
          break;
 8007156:	e02d      	b.n	80071b4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800715e:	2b03      	cmp	r3, #3
 8007160:	d107      	bne.n	8007172 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3308      	adds	r3, #8
 8007166:	2201      	movs	r2, #1
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 f8b0 	bl	80082d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007170:	e020      	b.n	80071b4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f841 	bl	80081fc <USBD_CtlError>
            ret = USBD_FAIL;
 800717a:	2302      	movs	r3, #2
 800717c:	75fb      	strb	r3, [r7, #23]
          break;
 800717e:	e019      	b.n	80071b4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007186:	2b03      	cmp	r3, #3
 8007188:	d106      	bne.n	8007198 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007196:	e00d      	b.n	80071b4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 f82e 	bl	80081fc <USBD_CtlError>
            ret = USBD_FAIL;
 80071a0:	2302      	movs	r3, #2
 80071a2:	75fb      	strb	r3, [r7, #23]
          break;
 80071a4:	e006      	b.n	80071b4 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 f827 	bl	80081fc <USBD_CtlError>
          ret = USBD_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	75fb      	strb	r3, [r7, #23]
          break;
 80071b2:	bf00      	nop
      }
      break;
 80071b4:	e006      	b.n	80071c4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 f81f 	bl	80081fc <USBD_CtlError>
      ret = USBD_FAIL;
 80071be:	2302      	movs	r3, #2
 80071c0:	75fb      	strb	r3, [r7, #23]
      break;
 80071c2:	bf00      	nop
  }

  return ret;
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	200000c8 	.word	0x200000c8
 80071d4:	200000b0 	.word	0x200000b0

080071d8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d10c      	bne.n	8007212 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	7b1b      	ldrb	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d108      	bne.n	8007212 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2201      	movs	r2, #1
 8007204:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	2181      	movs	r1, #129	; 0x81
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 fbec 	bl	80089ea <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2222      	movs	r2, #34	; 0x22
 8007228:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800722a:	4b03      	ldr	r3, [pc, #12]	; (8007238 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20000044 	.word	0x20000044

0800723c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2222      	movs	r2, #34	; 0x22
 8007248:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800724a:	4b03      	ldr	r3, [pc, #12]	; (8007258 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000068 	.word	0x20000068

0800725c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2222      	movs	r2, #34	; 0x22
 8007268:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800726a:	4b03      	ldr	r3, [pc, #12]	; (8007278 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	2000008c 	.word	0x2000008c

0800727c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	2200      	movs	r2, #0
 8007290:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
	...

080072a0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	220a      	movs	r2, #10
 80072ac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80072ae:	4b03      	ldr	r3, [pc, #12]	; (80072bc <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	200000bc 	.word	0x200000bc

080072c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072d4:	2302      	movs	r3, #2
 80072d6:	e01a      	b.n	800730e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	79fa      	ldrb	r2, [r7, #7]
 8007304:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f001 fa3e 	bl	8008788 <USBD_LL_Init>

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
 8007336:	e001      	b.n	800733c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007338:	2302      	movs	r3, #2
 800733a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fa61 	bl	8008818 <USBD_LL_Start>

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007380:	2302      	movs	r3, #2
 8007382:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00c      	beq.n	80073a8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	4611      	mov	r1, r2
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	4611      	mov	r1, r2
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 feca 	bl	8008184 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2b01      	cmp	r3, #1
 8007412:	d00c      	beq.n	800742e <USBD_LL_SetupStage+0x56>
 8007414:	2b01      	cmp	r3, #1
 8007416:	d302      	bcc.n	800741e <USBD_LL_SetupStage+0x46>
 8007418:	2b02      	cmp	r3, #2
 800741a:	d010      	beq.n	800743e <USBD_LL_SetupStage+0x66>
 800741c:	e017      	b.n	800744e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9ca 	bl	80077c0 <USBD_StdDevReq>
      break;
 800742c:	e01a      	b.n	8007464 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa2c 	bl	8007894 <USBD_StdItfReq>
      break;
 800743c:	e012      	b.n	8007464 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa6a 	bl	8007920 <USBD_StdEPReq>
      break;
 800744c:	e00a      	b.n	8007464 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007454:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007458:	b2db      	uxtb	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fa3b 	bl	80088d8 <USBD_LL_StallEP>
      break;
 8007462:	bf00      	nop
  }

  return USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	460b      	mov	r3, r1
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d14b      	bne.n	800751a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007488:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007490:	2b03      	cmp	r3, #3
 8007492:	d134      	bne.n	80074fe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	429a      	cmp	r2, r3
 800749e:	d919      	bls.n	80074d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	1ad2      	subs	r2, r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d203      	bcs.n	80074c2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074be:	b29b      	uxth	r3, r3
 80074c0:	e002      	b.n	80074c8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 ff2d 	bl	800832c <USBD_CtlContinueRx>
 80074d2:	e038      	b.n	8007546 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d105      	bne.n	80074f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 ff2a 	bl	8008350 <USBD_CtlSendStatus>
 80074fc:	e023      	b.n	8007546 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007504:	2b05      	cmp	r3, #5
 8007506:	d11e      	bne.n	8007546 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007510:	2100      	movs	r1, #0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f001 f9e0 	bl	80088d8 <USBD_LL_StallEP>
 8007518:	e015      	b.n	8007546 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800752c:	2b03      	cmp	r3, #3
 800752e:	d108      	bne.n	8007542 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	7afa      	ldrb	r2, [r7, #11]
 800753a:	4611      	mov	r1, r2
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	4798      	blx	r3
 8007540:	e001      	b.n	8007546 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007542:	2302      	movs	r3, #2
 8007544:	e000      	b.n	8007548 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	460b      	mov	r3, r1
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d17f      	bne.n	8007664 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3314      	adds	r3, #20
 8007568:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007570:	2b02      	cmp	r3, #2
 8007572:	d15c      	bne.n	800762e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	429a      	cmp	r2, r3
 800757e:	d915      	bls.n	80075ac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	1ad2      	subs	r2, r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 feb5 	bl	8008308 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800759e:	2300      	movs	r3, #0
 80075a0:	2200      	movs	r2, #0
 80075a2:	2100      	movs	r1, #0
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f001 fa43 	bl	8008a30 <USBD_LL_PrepareReceive>
 80075aa:	e04e      	b.n	800764a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	6912      	ldr	r2, [r2, #16]
 80075b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80075b8:	fb02 f201 	mul.w	r2, r2, r1
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d11c      	bne.n	80075fc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d316      	bcc.n	80075fc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075d8:	429a      	cmp	r2, r3
 80075da:	d20f      	bcs.n	80075fc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fe91 	bl	8008308 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ee:	2300      	movs	r3, #0
 80075f0:	2200      	movs	r2, #0
 80075f2:	2100      	movs	r1, #0
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f001 fa1b 	bl	8008a30 <USBD_LL_PrepareReceive>
 80075fa:	e026      	b.n	800764a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800760e:	2b03      	cmp	r3, #3
 8007610:	d105      	bne.n	800761e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f001 f959 	bl	80088d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fea5 	bl	8008376 <USBD_CtlReceiveStatus>
 800762c:	e00d      	b.n	800764a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007634:	2b04      	cmp	r3, #4
 8007636:	d004      	beq.n	8007642 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007642:	2180      	movs	r1, #128	; 0x80
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f001 f947 	bl	80088d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007650:	2b01      	cmp	r3, #1
 8007652:	d11d      	bne.n	8007690 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff fe83 	bl	8007360 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007662:	e015      	b.n	8007690 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00d      	beq.n	800768c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007676:	2b03      	cmp	r3, #3
 8007678:	d108      	bne.n	800768c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	7afa      	ldrb	r2, [r7, #11]
 8007684:	4611      	mov	r1, r2
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	4798      	blx	r3
 800768a:	e001      	b.n	8007690 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800768c:	2302      	movs	r3, #2
 800768e:	e000      	b.n	8007692 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a2:	2340      	movs	r3, #64	; 0x40
 80076a4:	2200      	movs	r2, #0
 80076a6:	2100      	movs	r1, #0
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f8d0 	bl	800884e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2240      	movs	r2, #64	; 0x40
 80076ba:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076be:	2340      	movs	r3, #64	; 0x40
 80076c0:	2200      	movs	r2, #0
 80076c2:	2180      	movs	r1, #128	; 0x80
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f8c2 	bl	800884e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2240      	movs	r2, #64	; 0x40
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6852      	ldr	r2, [r2, #4]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	4611      	mov	r1, r2
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
  }

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr

0800773a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2204      	movs	r2, #4
 8007752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007770:	2b04      	cmp	r3, #4
 8007772:	d105      	bne.n	8007780 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779a:	2b03      	cmp	r3, #3
 800779c:	d10b      	bne.n	80077b6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d004      	beq.n	80077e4 <USBD_StdDevReq+0x24>
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	d002      	beq.n	80077e4 <USBD_StdDevReq+0x24>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <USBD_StdDevReq+0x34>
 80077e2:	e04c      	b.n	800787e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      break;
 80077f2:	e049      	b.n	8007888 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d83a      	bhi.n	8007872 <USBD_StdDevReq+0xb2>
 80077fc:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <USBD_StdDevReq+0x44>)
 80077fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007802:	bf00      	nop
 8007804:	08007855 	.word	0x08007855
 8007808:	08007869 	.word	0x08007869
 800780c:	08007873 	.word	0x08007873
 8007810:	0800785f 	.word	0x0800785f
 8007814:	08007873 	.word	0x08007873
 8007818:	08007837 	.word	0x08007837
 800781c:	0800782d 	.word	0x0800782d
 8007820:	08007873 	.word	0x08007873
 8007824:	0800784b 	.word	0x0800784b
 8007828:	08007841 	.word	0x08007841
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f9d4 	bl	8007bdc <USBD_GetDescriptor>
          break;
 8007834:	e022      	b.n	800787c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fb37 	bl	8007eac <USBD_SetAddress>
          break;
 800783e:	e01d      	b.n	800787c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fb74 	bl	8007f30 <USBD_SetConfig>
          break;
 8007848:	e018      	b.n	800787c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fbfd 	bl	800804c <USBD_GetConfig>
          break;
 8007852:	e013      	b.n	800787c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fc2c 	bl	80080b4 <USBD_GetStatus>
          break;
 800785c:	e00e      	b.n	800787c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc5a 	bl	800811a <USBD_SetFeature>
          break;
 8007866:	e009      	b.n	800787c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fc69 	bl	8008142 <USBD_ClrFeature>
          break;
 8007870:	e004      	b.n	800787c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fcc1 	bl	80081fc <USBD_CtlError>
          break;
 800787a:	bf00      	nop
      }
      break;
 800787c:	e004      	b.n	8007888 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fcbb 	bl	80081fc <USBD_CtlError>
      break;
 8007886:	bf00      	nop
  }

  return ret;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop

08007894 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d003      	beq.n	80078b6 <USBD_StdItfReq+0x22>
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d001      	beq.n	80078b6 <USBD_StdItfReq+0x22>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d12a      	bne.n	800790c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	3b01      	subs	r3, #1
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d81d      	bhi.n	80078fe <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	889b      	ldrh	r3, [r3, #4]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d813      	bhi.n	80078f4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	88db      	ldrh	r3, [r3, #6]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d110      	bne.n	8007908 <USBD_StdItfReq+0x74>
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10d      	bne.n	8007908 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fd2f 	bl	8008350 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078f2:	e009      	b.n	8007908 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fc80 	bl	80081fc <USBD_CtlError>
          break;
 80078fc:	e004      	b.n	8007908 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fc7b 	bl	80081fc <USBD_CtlError>
          break;
 8007906:	e000      	b.n	800790a <USBD_StdItfReq+0x76>
          break;
 8007908:	bf00      	nop
      }
      break;
 800790a:	e004      	b.n	8007916 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fc74 	bl	80081fc <USBD_CtlError>
      break;
 8007914:	bf00      	nop
  }

  return USBD_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	889b      	ldrh	r3, [r3, #4]
 8007932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800793c:	2b20      	cmp	r3, #32
 800793e:	d004      	beq.n	800794a <USBD_StdEPReq+0x2a>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0x2a>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <USBD_StdEPReq+0x3a>
 8007948:	e13d      	b.n	8007bc6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
      break;
 8007958:	e13a      	b.n	8007bd0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007962:	2b20      	cmp	r3, #32
 8007964:	d10a      	bne.n	800797c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	e12a      	b.n	8007bd2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d03e      	beq.n	8007a02 <USBD_StdEPReq+0xe2>
 8007984:	2b03      	cmp	r3, #3
 8007986:	d002      	beq.n	800798e <USBD_StdEPReq+0x6e>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d070      	beq.n	8007a6e <USBD_StdEPReq+0x14e>
 800798c:	e115      	b.n	8007bba <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007994:	2b02      	cmp	r3, #2
 8007996:	d002      	beq.n	800799e <USBD_StdEPReq+0x7e>
 8007998:	2b03      	cmp	r3, #3
 800799a:	d015      	beq.n	80079c8 <USBD_StdEPReq+0xa8>
 800799c:	e02b      	b.n	80079f6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <USBD_StdEPReq+0x9e>
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d009      	beq.n	80079be <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 ff92 	bl	80088d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 ff8e 	bl	80088d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079bc:	e020      	b.n	8007a00 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fc1b 	bl	80081fc <USBD_CtlError>
              break;
 80079c6:	e01b      	b.n	8007a00 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	885b      	ldrh	r3, [r3, #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10e      	bne.n	80079ee <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00b      	beq.n	80079ee <USBD_StdEPReq+0xce>
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d008      	beq.n	80079ee <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 ff75 	bl	80088d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fcae 	bl	8008350 <USBD_CtlSendStatus>

              break;
 80079f4:	e004      	b.n	8007a00 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fbff 	bl	80081fc <USBD_CtlError>
              break;
 80079fe:	bf00      	nop
          }
          break;
 8007a00:	e0e0      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d002      	beq.n	8007a12 <USBD_StdEPReq+0xf2>
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d015      	beq.n	8007a3c <USBD_StdEPReq+0x11c>
 8007a10:	e026      	b.n	8007a60 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00c      	beq.n	8007a32 <USBD_StdEPReq+0x112>
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d009      	beq.n	8007a32 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 ff58 	bl	80088d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 ff54 	bl	80088d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a30:	e01c      	b.n	8007a6c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fbe1 	bl	80081fc <USBD_CtlError>
              break;
 8007a3a:	e017      	b.n	8007a6c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	885b      	ldrh	r3, [r3, #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d112      	bne.n	8007a6a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 ff5f 	bl	8008916 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc79 	bl	8008350 <USBD_CtlSendStatus>
              }
              break;
 8007a5e:	e004      	b.n	8007a6a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fbca 	bl	80081fc <USBD_CtlError>
              break;
 8007a68:	e000      	b.n	8007a6c <USBD_StdEPReq+0x14c>
              break;
 8007a6a:	bf00      	nop
          }
          break;
 8007a6c:	e0aa      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d002      	beq.n	8007a7e <USBD_StdEPReq+0x15e>
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d032      	beq.n	8007ae2 <USBD_StdEPReq+0x1c2>
 8007a7c:	e097      	b.n	8007bae <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <USBD_StdEPReq+0x174>
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b80      	cmp	r3, #128	; 0x80
 8007a88:	d004      	beq.n	8007a94 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fbb5 	bl	80081fc <USBD_CtlError>
                break;
 8007a92:	e091      	b.n	8007bb8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	da0b      	bge.n	8007ab4 <USBD_StdEPReq+0x194>
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	3310      	adds	r3, #16
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	e00b      	b.n	8007acc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3304      	adds	r3, #4
 8007acc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fbf8 	bl	80082d0 <USBD_CtlSendData>
              break;
 8007ae0:	e06a      	b.n	8007bb8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da11      	bge.n	8007b0e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	f003 020f 	and.w	r2, r3, #15
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	3318      	adds	r3, #24
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d117      	bne.n	8007b34 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fb78 	bl	80081fc <USBD_CtlError>
                  break;
 8007b0c:	e054      	b.n	8007bb8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	f003 020f 	and.w	r2, r3, #15
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb65 	bl	80081fc <USBD_CtlError>
                  break;
 8007b32:	e041      	b.n	8007bb8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	da0b      	bge.n	8007b54 <USBD_StdEPReq+0x234>
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	3310      	adds	r3, #16
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	e00b      	b.n	8007b6c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <USBD_StdEPReq+0x25a>
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b80      	cmp	r3, #128	; 0x80
 8007b78:	d103      	bne.n	8007b82 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e00e      	b.n	8007ba0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fee4 	bl	8008954 <USBD_LL_IsStallEP>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e002      	b.n	8007ba0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fb92 	bl	80082d0 <USBD_CtlSendData>
              break;
 8007bac:	e004      	b.n	8007bb8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb23 	bl	80081fc <USBD_CtlError>
              break;
 8007bb6:	bf00      	nop
          }
          break;
 8007bb8:	e004      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fb1d 	bl	80081fc <USBD_CtlError>
          break;
 8007bc2:	bf00      	nop
      }
      break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fb17 	bl	80081fc <USBD_CtlError>
      break;
 8007bce:	bf00      	nop
  }

  return ret;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	2b06      	cmp	r3, #6
 8007bfe:	f200 8128 	bhi.w	8007e52 <USBD_GetDescriptor+0x276>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_GetDescriptor+0x2c>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c25 	.word	0x08007c25
 8007c0c:	08007c3d 	.word	0x08007c3d
 8007c10:	08007c7d 	.word	0x08007c7d
 8007c14:	08007e53 	.word	0x08007e53
 8007c18:	08007e53 	.word	0x08007e53
 8007c1c:	08007df3 	.word	0x08007df3
 8007c20:	08007e1f 	.word	0x08007e1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
      break;
 8007c3a:	e112      	b.n	8007e62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7c1b      	ldrb	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10d      	bne.n	8007c60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f107 0208 	add.w	r2, r7, #8
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c5e:	e100      	b.n	8007e62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	f107 0208 	add.w	r2, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	2202      	movs	r2, #2
 8007c78:	701a      	strb	r2, [r3, #0]
      break;
 8007c7a:	e0f2      	b.n	8007e62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	885b      	ldrh	r3, [r3, #2]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	f200 80ac 	bhi.w	8007de0 <USBD_GetDescriptor+0x204>
 8007c88:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <USBD_GetDescriptor+0xb4>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007ca9 	.word	0x08007ca9
 8007c94:	08007cdd 	.word	0x08007cdd
 8007c98:	08007d11 	.word	0x08007d11
 8007c9c:	08007d45 	.word	0x08007d45
 8007ca0:	08007d79 	.word	0x08007d79
 8007ca4:	08007dad 	.word	0x08007dad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cca:	e091      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa94 	bl	80081fc <USBD_CtlError>
            err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cda:	e089      	b.n	8007df0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7c12      	ldrb	r2, [r2, #16]
 8007cf4:	f107 0108 	add.w	r1, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfe:	e077      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa7a 	bl	80081fc <USBD_CtlError>
            err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0e:	e06f      	b.n	8007df0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7c12      	ldrb	r2, [r2, #16]
 8007d28:	f107 0108 	add.w	r1, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d32:	e05d      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa60 	bl	80081fc <USBD_CtlError>
            err++;
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	72fb      	strb	r3, [r7, #11]
          break;
 8007d42:	e055      	b.n	8007df0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	7c12      	ldrb	r2, [r2, #16]
 8007d5c:	f107 0108 	add.w	r1, r7, #8
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d66:	e043      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa46 	bl	80081fc <USBD_CtlError>
            err++;
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	3301      	adds	r3, #1
 8007d74:	72fb      	strb	r3, [r7, #11]
          break;
 8007d76:	e03b      	b.n	8007df0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	7c12      	ldrb	r2, [r2, #16]
 8007d90:	f107 0108 	add.w	r1, r7, #8
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9a:	e029      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa2c 	bl	80081fc <USBD_CtlError>
            err++;
 8007da4:	7afb      	ldrb	r3, [r7, #11]
 8007da6:	3301      	adds	r3, #1
 8007da8:	72fb      	strb	r3, [r7, #11]
          break;
 8007daa:	e021      	b.n	8007df0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7c12      	ldrb	r2, [r2, #16]
 8007dc4:	f107 0108 	add.w	r1, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dce:	e00f      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa12 	bl	80081fc <USBD_CtlError>
            err++;
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dde:	e007      	b.n	8007df0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa0a 	bl	80081fc <USBD_CtlError>
          err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007dee:	e038      	b.n	8007e62 <USBD_GetDescriptor+0x286>
 8007df0:	e037      	b.n	8007e62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7c1b      	ldrb	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	f107 0208 	add.w	r2, r7, #8
 8007e06:	4610      	mov	r0, r2
 8007e08:	4798      	blx	r3
 8007e0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e0c:	e029      	b.n	8007e62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f9f3 	bl	80081fc <USBD_CtlError>
        err++;
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e1c:	e021      	b.n	8007e62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7c1b      	ldrb	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10d      	bne.n	8007e42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	f107 0208 	add.w	r2, r7, #8
 8007e32:	4610      	mov	r0, r2
 8007e34:	4798      	blx	r3
 8007e36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	2207      	movs	r2, #7
 8007e3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e40:	e00f      	b.n	8007e62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f9d9 	bl	80081fc <USBD_CtlError>
        err++;
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e50:	e007      	b.n	8007e62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f9d1 	bl	80081fc <USBD_CtlError>
      err++;
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e60:	bf00      	nop
  }

  if (err != 0U)
 8007e62:	7afb      	ldrb	r3, [r7, #11]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d11c      	bne.n	8007ea2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e68:	893b      	ldrh	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d011      	beq.n	8007e92 <USBD_GetDescriptor+0x2b6>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	88da      	ldrh	r2, [r3, #6]
 8007e7a:	893b      	ldrh	r3, [r7, #8]
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	bf28      	it	cs
 8007e80:	4613      	movcs	r3, r2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e86:	893b      	ldrh	r3, [r7, #8]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68f9      	ldr	r1, [r7, #12]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fa1f 	bl	80082d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	88db      	ldrh	r3, [r3, #6]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d104      	bne.n	8007ea4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa58 	bl	8008350 <USBD_CtlSendStatus>
 8007ea0:	e000      	b.n	8007ea4 <USBD_GetDescriptor+0x2c8>
    return;
 8007ea2:	bf00      	nop
    }
  }
}
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop

08007eac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	889b      	ldrh	r3, [r3, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d130      	bne.n	8007f20 <USBD_SetAddress+0x74>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	88db      	ldrh	r3, [r3, #6]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d12c      	bne.n	8007f20 <USBD_SetAddress+0x74>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	885b      	ldrh	r3, [r3, #2]
 8007eca:	2b7f      	cmp	r3, #127	; 0x7f
 8007ecc:	d828      	bhi.n	8007f20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d104      	bne.n	8007eee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f988 	bl	80081fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eec:	e01c      	b.n	8007f28 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fd56 	bl	80089ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa25 	bl	8008350 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	e008      	b.n	8007f28 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1e:	e003      	b.n	8007f28 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f96a 	bl	80081fc <USBD_CtlError>
  }
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	4b41      	ldr	r3, [pc, #260]	; (8008048 <USBD_SetConfig+0x118>)
 8007f42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f44:	4b40      	ldr	r3, [pc, #256]	; (8008048 <USBD_SetConfig+0x118>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d904      	bls.n	8007f56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f954 	bl	80081fc <USBD_CtlError>
 8007f54:	e075      	b.n	8008042 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d002      	beq.n	8007f66 <USBD_SetConfig+0x36>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d023      	beq.n	8007fac <USBD_SetConfig+0x7c>
 8007f64:	e062      	b.n	800802c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f66:	4b38      	ldr	r3, [pc, #224]	; (8008048 <USBD_SetConfig+0x118>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d01a      	beq.n	8007fa4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f6e:	4b36      	ldr	r3, [pc, #216]	; (8008048 <USBD_SetConfig+0x118>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f80:	4b31      	ldr	r3, [pc, #196]	; (8008048 <USBD_SetConfig+0x118>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff f9f4 	bl	8007374 <USBD_SetClassConfig>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d104      	bne.n	8007f9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f931 	bl	80081fc <USBD_CtlError>
            return;
 8007f9a:	e052      	b.n	8008042 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9d7 	bl	8008350 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fa2:	e04e      	b.n	8008042 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f9d3 	bl	8008350 <USBD_CtlSendStatus>
        break;
 8007faa:	e04a      	b.n	8008042 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007fac:	4b26      	ldr	r3, [pc, #152]	; (8008048 <USBD_SetConfig+0x118>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d112      	bne.n	8007fda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007fbc:	4b22      	ldr	r3, [pc, #136]	; (8008048 <USBD_SetConfig+0x118>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007fc6:	4b20      	ldr	r3, [pc, #128]	; (8008048 <USBD_SetConfig+0x118>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff f9f0 	bl	80073b2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9bc 	bl	8008350 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fd8:	e033      	b.n	8008042 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007fda:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <USBD_SetConfig+0x118>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d01d      	beq.n	8008024 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff f9de 	bl	80073b2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <USBD_SetConfig+0x118>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008000:	4b11      	ldr	r3, [pc, #68]	; (8008048 <USBD_SetConfig+0x118>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff f9b4 	bl	8007374 <USBD_SetClassConfig>
 800800c:	4603      	mov	r3, r0
 800800e:	2b02      	cmp	r3, #2
 8008010:	d104      	bne.n	800801c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f8f1 	bl	80081fc <USBD_CtlError>
            return;
 800801a:	e012      	b.n	8008042 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f997 	bl	8008350 <USBD_CtlSendStatus>
        break;
 8008022:	e00e      	b.n	8008042 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f993 	bl	8008350 <USBD_CtlSendStatus>
        break;
 800802a:	e00a      	b.n	8008042 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8e4 	bl	80081fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008034:	4b04      	ldr	r3, [pc, #16]	; (8008048 <USBD_SetConfig+0x118>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff f9b9 	bl	80073b2 <USBD_ClrClassConfig>
        break;
 8008040:	bf00      	nop
    }
  }
}
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	2000019c 	.word	0x2000019c

0800804c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	88db      	ldrh	r3, [r3, #6]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d004      	beq.n	8008068 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8cb 	bl	80081fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008066:	e021      	b.n	80080ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	2b01      	cmp	r3, #1
 8008070:	db17      	blt.n	80080a2 <USBD_GetConfig+0x56>
 8008072:	2b02      	cmp	r3, #2
 8008074:	dd02      	ble.n	800807c <USBD_GetConfig+0x30>
 8008076:	2b03      	cmp	r3, #3
 8008078:	d00b      	beq.n	8008092 <USBD_GetConfig+0x46>
 800807a:	e012      	b.n	80080a2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3308      	adds	r3, #8
 8008086:	2201      	movs	r2, #1
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f920 	bl	80082d0 <USBD_CtlSendData>
        break;
 8008090:	e00c      	b.n	80080ac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3304      	adds	r3, #4
 8008096:	2201      	movs	r2, #1
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f918 	bl	80082d0 <USBD_CtlSendData>
        break;
 80080a0:	e004      	b.n	80080ac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f8a9 	bl	80081fc <USBD_CtlError>
        break;
 80080aa:	bf00      	nop
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	3b01      	subs	r3, #1
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d81e      	bhi.n	8008108 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	88db      	ldrh	r3, [r3, #6]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d004      	beq.n	80080dc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f891 	bl	80081fc <USBD_CtlError>
        break;
 80080da:	e01a      	b.n	8008112 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f043 0202 	orr.w	r2, r3, #2
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	330c      	adds	r3, #12
 80080fc:	2202      	movs	r2, #2
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8e5 	bl	80082d0 <USBD_CtlSendData>
      break;
 8008106:	e004      	b.n	8008112 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f876 	bl	80081fc <USBD_CtlError>
      break;
 8008110:	bf00      	nop
  }
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	885b      	ldrh	r3, [r3, #2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d106      	bne.n	800813a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f90b 	bl	8008350 <USBD_CtlSendStatus>
  }
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008152:	3b01      	subs	r3, #1
 8008154:	2b02      	cmp	r3, #2
 8008156:	d80b      	bhi.n	8008170 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	885b      	ldrh	r3, [r3, #2]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10c      	bne.n	800817a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8f1 	bl	8008350 <USBD_CtlSendStatus>
      }
      break;
 800816e:	e004      	b.n	800817a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f842 	bl	80081fc <USBD_CtlError>
      break;
 8008178:	e000      	b.n	800817c <USBD_ClrFeature+0x3a>
      break;
 800817a:	bf00      	nop
  }
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	785a      	ldrb	r2, [r3, #1]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	3302      	adds	r3, #2
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	3303      	adds	r3, #3
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	3304      	adds	r3, #4
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	3305      	adds	r3, #5
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	021b      	lsls	r3, r3, #8
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	3306      	adds	r3, #6
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	b29a      	uxth	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	3307      	adds	r3, #7
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4413      	add	r3, r2
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	80da      	strh	r2, [r3, #6]

}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008206:	2180      	movs	r1, #128	; 0x80
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb65 	bl	80088d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800820e:	2100      	movs	r1, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fb61 	bl	80088d8 <USBD_LL_StallEP>
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b086      	sub	sp, #24
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d032      	beq.n	800829a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f834 	bl	80082a2 <USBD_GetLen>
 800823a:	4603      	mov	r3, r0
 800823c:	3301      	adds	r3, #1
 800823e:	b29b      	uxth	r3, r3
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	b29a      	uxth	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	75fa      	strb	r2, [r7, #23]
 800824e:	461a      	mov	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4413      	add	r3, r2
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	75fa      	strb	r2, [r7, #23]
 8008260:	461a      	mov	r2, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	2203      	movs	r2, #3
 8008268:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800826a:	e012      	b.n	8008292 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	60fa      	str	r2, [r7, #12]
 8008272:	7dfa      	ldrb	r2, [r7, #23]
 8008274:	1c51      	adds	r1, r2, #1
 8008276:	75f9      	strb	r1, [r7, #23]
 8008278:	4611      	mov	r1, r2
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	440a      	add	r2, r1
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	75fa      	strb	r2, [r7, #23]
 8008288:	461a      	mov	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4413      	add	r3, r2
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e8      	bne.n	800826c <USBD_GetString+0x4e>
    }
  }
}
 800829a:	bf00      	nop
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082ae:	e005      	b.n	80082bc <USBD_GetLen+0x1a>
  {
    len++;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	3301      	adds	r3, #1
 80082b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3301      	adds	r3, #1
 80082ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1f5      	bne.n	80082b0 <USBD_GetLen+0xe>
  }

  return len;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2202      	movs	r2, #2
 80082e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	2100      	movs	r1, #0
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fb76 	bl	80089ea <USBD_LL_Transmit>

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	2100      	movs	r1, #0
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fb64 	bl	80089ea <USBD_LL_Transmit>

  return USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	2100      	movs	r1, #0
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 fb75 	bl	8008a30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2204      	movs	r2, #4
 800835c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008360:	2300      	movs	r3, #0
 8008362:	2200      	movs	r2, #0
 8008364:	2100      	movs	r1, #0
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fb3f 	bl	80089ea <USBD_LL_Transmit>

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2205      	movs	r2, #5
 8008382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008386:	2300      	movs	r3, #0
 8008388:	2200      	movs	r2, #0
 800838a:	2100      	movs	r1, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fb4f 	bl	8008a30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083a0:	2200      	movs	r2, #0
 80083a2:	490e      	ldr	r1, [pc, #56]	; (80083dc <MX_USB_DEVICE_Init+0x40>)
 80083a4:	480e      	ldr	r0, [pc, #56]	; (80083e0 <MX_USB_DEVICE_Init+0x44>)
 80083a6:	f7fe ff8b 	bl	80072c0 <USBD_Init>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083b0:	f7f8 fddc 	bl	8000f6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80083b4:	490b      	ldr	r1, [pc, #44]	; (80083e4 <MX_USB_DEVICE_Init+0x48>)
 80083b6:	480a      	ldr	r0, [pc, #40]	; (80083e0 <MX_USB_DEVICE_Init+0x44>)
 80083b8:	f7fe ffad 	bl	8007316 <USBD_RegisterClass>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083c2:	f7f8 fdd3 	bl	8000f6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083c6:	4806      	ldr	r0, [pc, #24]	; (80083e0 <MX_USB_DEVICE_Init+0x44>)
 80083c8:	f7fe ffbe 	bl	8007348 <USBD_Start>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80083d2:	f7f8 fdcb 	bl	8000f6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083d6:	bf00      	nop
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000114 	.word	0x20000114
 80083e0:	20000224 	.word	0x20000224
 80083e4:	2000000c 	.word	0x2000000c

080083e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	6039      	str	r1, [r7, #0]
 80083f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2212      	movs	r2, #18
 80083f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083fa:	4b03      	ldr	r3, [pc, #12]	; (8008408 <USBD_FS_DeviceDescriptor+0x20>)
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20000130 	.word	0x20000130

0800840c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2204      	movs	r2, #4
 800841c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800841e:	4b03      	ldr	r3, [pc, #12]	; (800842c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000144 	.word	0x20000144

08008430 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4907      	ldr	r1, [pc, #28]	; (8008464 <USBD_FS_ProductStrDescriptor+0x34>)
 8008446:	4808      	ldr	r0, [pc, #32]	; (8008468 <USBD_FS_ProductStrDescriptor+0x38>)
 8008448:	f7ff fee9 	bl	800821e <USBD_GetString>
 800844c:	e004      	b.n	8008458 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4904      	ldr	r1, [pc, #16]	; (8008464 <USBD_FS_ProductStrDescriptor+0x34>)
 8008452:	4805      	ldr	r0, [pc, #20]	; (8008468 <USBD_FS_ProductStrDescriptor+0x38>)
 8008454:	f7ff fee3 	bl	800821e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200004e8 	.word	0x200004e8
 8008468:	08008b94 	.word	0x08008b94

0800846c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	4904      	ldr	r1, [pc, #16]	; (800848c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800847c:	4804      	ldr	r0, [pc, #16]	; (8008490 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800847e:	f7ff fece 	bl	800821e <USBD_GetString>
  return USBD_StrDesc;
 8008482:	4b02      	ldr	r3, [pc, #8]	; (800848c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	200004e8 	.word	0x200004e8
 8008490:	08008bac 	.word	0x08008bac

08008494 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	221a      	movs	r2, #26
 80084a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084a6:	f000 f843 	bl	8008530 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084aa:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000148 	.word	0x20000148

080084b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	4907      	ldr	r1, [pc, #28]	; (80084ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ce:	4808      	ldr	r0, [pc, #32]	; (80084f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084d0:	f7ff fea5 	bl	800821e <USBD_GetString>
 80084d4:	e004      	b.n	80084e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4904      	ldr	r1, [pc, #16]	; (80084ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80084da:	4805      	ldr	r0, [pc, #20]	; (80084f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084dc:	f7ff fe9f 	bl	800821e <USBD_GetString>
  }
  return USBD_StrDesc;
 80084e0:	4b02      	ldr	r3, [pc, #8]	; (80084ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200004e8 	.word	0x200004e8
 80084f0:	08008bc0 	.word	0x08008bc0

080084f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4907      	ldr	r1, [pc, #28]	; (8008528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800850a:	4808      	ldr	r0, [pc, #32]	; (800852c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800850c:	f7ff fe87 	bl	800821e <USBD_GetString>
 8008510:	e004      	b.n	800851c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4904      	ldr	r1, [pc, #16]	; (8008528 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008516:	4805      	ldr	r0, [pc, #20]	; (800852c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008518:	f7ff fe81 	bl	800821e <USBD_GetString>
  }
  return USBD_StrDesc;
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200004e8 	.word	0x200004e8
 800852c:	08008bcc 	.word	0x08008bcc

08008530 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008536:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <Get_SerialNum+0x44>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800853c:	4b0e      	ldr	r3, [pc, #56]	; (8008578 <Get_SerialNum+0x48>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008542:	4b0e      	ldr	r3, [pc, #56]	; (800857c <Get_SerialNum+0x4c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008556:	2208      	movs	r2, #8
 8008558:	4909      	ldr	r1, [pc, #36]	; (8008580 <Get_SerialNum+0x50>)
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f814 	bl	8008588 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008560:	2204      	movs	r2, #4
 8008562:	4908      	ldr	r1, [pc, #32]	; (8008584 <Get_SerialNum+0x54>)
 8008564:	68b8      	ldr	r0, [r7, #8]
 8008566:	f000 f80f 	bl	8008588 <IntToUnicode>
  }
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	1ffff7e8 	.word	0x1ffff7e8
 8008578:	1ffff7ec 	.word	0x1ffff7ec
 800857c:	1ffff7f0 	.word	0x1ffff7f0
 8008580:	2000014a 	.word	0x2000014a
 8008584:	2000015a 	.word	0x2000015a

08008588 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]
 800859e:	e027      	b.n	80085f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	0f1b      	lsrs	r3, r3, #28
 80085a4:	2b09      	cmp	r3, #9
 80085a6:	d80b      	bhi.n	80085c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	0f1b      	lsrs	r3, r3, #28
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	4619      	mov	r1, r3
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	440b      	add	r3, r1
 80085b8:	3230      	adds	r2, #48	; 0x30
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	e00a      	b.n	80085d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	0f1b      	lsrs	r3, r3, #28
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	4619      	mov	r1, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	440b      	add	r3, r1
 80085d0:	3237      	adds	r2, #55	; 0x37
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	3301      	adds	r3, #1
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	4413      	add	r3, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	3301      	adds	r3, #1
 80085ee:	75fb      	strb	r3, [r7, #23]
 80085f0:	7dfa      	ldrb	r2, [r7, #23]
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d3d3      	bcc.n	80085a0 <IntToUnicode+0x18>
  }
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr
	...

08008604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a0d      	ldr	r2, [pc, #52]	; (8008648 <HAL_PCD_MspInit+0x44>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d113      	bne.n	800863e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008616:	4b0d      	ldr	r3, [pc, #52]	; (800864c <HAL_PCD_MspInit+0x48>)
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	4a0c      	ldr	r2, [pc, #48]	; (800864c <HAL_PCD_MspInit+0x48>)
 800861c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008620:	61d3      	str	r3, [r2, #28]
 8008622:	4b0a      	ldr	r3, [pc, #40]	; (800864c <HAL_PCD_MspInit+0x48>)
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	2014      	movs	r0, #20
 8008634:	f7f8 fecf 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008638:	2014      	movs	r0, #20
 800863a:	f7f8 fee8 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40005c00 	.word	0x40005c00
 800864c:	40021000 	.word	0x40021000

08008650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f7fe feb6 	bl	80073d8 <USBD_LL_SetupStage>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	440b      	add	r3, r1
 8008694:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	4619      	mov	r1, r3
 800869e:	f7fe fee6 	bl	800746e <USBD_LL_DataOutStage>
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	440b      	add	r3, r1
 80086ca:	333c      	adds	r3, #60	; 0x3c
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	4619      	mov	r1, r3
 80086d2:	f7fe ff3d 	bl	8007550 <USBD_LL_DataInStage>
}
 80086d6:	bf00      	nop
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7ff f84d 	bl	800778c <USBD_LL_SOF>
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d001      	beq.n	8008712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800870e:	f7f8 fc2d 	bl	8000f6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008718:	7bfa      	ldrb	r2, [r7, #15]
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fffd 	bl	800771c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe ffb6 	bl	800769a <USBD_LL_Reset>
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fff7 	bl	800773a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <HAL_PCD_SuspendCallback+0x30>)
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	4a03      	ldr	r2, [pc, #12]	; (8008768 <HAL_PCD_SuspendCallback+0x30>)
 800875a:	f043 0306 	orr.w	r3, r3, #6
 800875e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	e000ed00 	.word	0xe000ed00

0800876c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fff1 	bl	8007762 <USBD_LL_Resume>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <USBD_LL_Init+0x88>)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a1d      	ldr	r2, [pc, #116]	; (8008810 <USBD_LL_Init+0x88>)
 800879c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087a0:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <USBD_LL_Init+0x88>)
 80087a2:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <USBD_LL_Init+0x8c>)
 80087a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087a6:	4b1a      	ldr	r3, [pc, #104]	; (8008810 <USBD_LL_Init+0x88>)
 80087a8:	2208      	movs	r2, #8
 80087aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087ac:	4b18      	ldr	r3, [pc, #96]	; (8008810 <USBD_LL_Init+0x88>)
 80087ae:	2202      	movs	r2, #2
 80087b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087b2:	4b17      	ldr	r3, [pc, #92]	; (8008810 <USBD_LL_Init+0x88>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <USBD_LL_Init+0x88>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087be:	4b14      	ldr	r3, [pc, #80]	; (8008810 <USBD_LL_Init+0x88>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087c4:	4812      	ldr	r0, [pc, #72]	; (8008810 <USBD_LL_Init+0x88>)
 80087c6:	f7f9 ffcd 	bl	8002764 <HAL_PCD_Init>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087d0:	f7f8 fbcc 	bl	8000f6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087da:	2318      	movs	r3, #24
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	f7fb fc29 	bl	8004036 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087ea:	2358      	movs	r3, #88	; 0x58
 80087ec:	2200      	movs	r2, #0
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	f7fb fc21 	bl	8004036 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087fe:	2200      	movs	r2, #0
 8008800:	2181      	movs	r1, #129	; 0x81
 8008802:	f7fb fc18 	bl	8004036 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200006e8 	.word	0x200006e8
 8008814:	40005c00 	.word	0x40005c00

08008818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800882e:	4618      	mov	r0, r3
 8008830:	f7fa f8a3 	bl	800297a <HAL_PCD_Start>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 f93c 	bl	8008ab8 <USBD_Get_USB_Status>
 8008840:	4603      	mov	r3, r0
 8008842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008844:	7bbb      	ldrb	r3, [r7, #14]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	4608      	mov	r0, r1
 8008858:	4611      	mov	r1, r2
 800885a:	461a      	mov	r2, r3
 800885c:	4603      	mov	r3, r0
 800885e:	70fb      	strb	r3, [r7, #3]
 8008860:	460b      	mov	r3, r1
 8008862:	70bb      	strb	r3, [r7, #2]
 8008864:	4613      	mov	r3, r2
 8008866:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008876:	78bb      	ldrb	r3, [r7, #2]
 8008878:	883a      	ldrh	r2, [r7, #0]
 800887a:	78f9      	ldrb	r1, [r7, #3]
 800887c:	f7fa fa1d 	bl	8002cba <HAL_PCD_EP_Open>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f916 	bl	8008ab8 <USBD_Get_USB_Status>
 800888c:	4603      	mov	r3, r0
 800888e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008890:	7bbb      	ldrb	r3, [r7, #14]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fa fa64 	bl	8002d86 <HAL_PCD_EP_Close>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f8f7 	bl	8008ab8 <USBD_Get_USB_Status>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fa fb0d 	bl	8002f16 <HAL_PCD_EP_SetStall>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f8d8 	bl	8008ab8 <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f7fa fb4e 	bl	8002fd6 <HAL_PCD_EP_ClrStall>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	4618      	mov	r0, r3
 8008942:	f000 f8b9 	bl	8008ab8 <USBD_Get_USB_Status>
 8008946:	4603      	mov	r3, r0
 8008948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800894a:	7bbb      	ldrb	r3, [r7, #14]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008966:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800896c:	2b00      	cmp	r3, #0
 800896e:	da0c      	bge.n	800898a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	440b      	add	r3, r1
 8008984:	3302      	adds	r3, #2
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	e00b      	b.n	80089a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	440b      	add	r3, r1
 800899c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fa f950 	bl	8002c70 <HAL_PCD_SetAddress>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f86e 	bl	8008ab8 <USBD_Get_USB_Status>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	461a      	mov	r2, r3
 80089f6:	460b      	mov	r3, r1
 80089f8:	72fb      	strb	r3, [r7, #11]
 80089fa:	4613      	mov	r3, r2
 80089fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a0c:	893b      	ldrh	r3, [r7, #8]
 8008a0e:	7af9      	ldrb	r1, [r7, #11]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	f7fa fa3d 	bl	8002e90 <HAL_PCD_EP_Transmit>
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f84b 	bl	8008ab8 <USBD_Get_USB_Status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	72fb      	strb	r3, [r7, #11]
 8008a40:	4613      	mov	r3, r2
 8008a42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a52:	893b      	ldrh	r3, [r7, #8]
 8008a54:	7af9      	ldrb	r1, [r7, #11]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	f7fa f9dd 	bl	8002e16 <HAL_PCD_EP_Receive>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f828 	bl	8008ab8 <USBD_Get_USB_Status>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <USBD_static_malloc+0x14>)
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	200001a0 	.word	0x200001a0

08008a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc80      	pop	{r7}
 8008aa0:	4770      	bx	lr

08008aa2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b083      	sub	sp, #12
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d817      	bhi.n	8008afc <USBD_Get_USB_Status+0x44>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <USBD_Get_USB_Status+0x1c>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008ae5 	.word	0x08008ae5
 8008ad8:	08008aeb 	.word	0x08008aeb
 8008adc:	08008af1 	.word	0x08008af1
 8008ae0:	08008af7 	.word	0x08008af7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	e00b      	b.n	8008b02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008aea:	2302      	movs	r3, #2
 8008aec:	73fb      	strb	r3, [r7, #15]
    break;
 8008aee:	e008      	b.n	8008b02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
    break;
 8008af4:	e005      	b.n	8008b02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008af6:	2302      	movs	r3, #2
 8008af8:	73fb      	strb	r3, [r7, #15]
    break;
 8008afa:	e002      	b.n	8008b02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008afc:	2302      	movs	r3, #2
 8008afe:	73fb      	strb	r3, [r7, #15]
    break;
 8008b00:	bf00      	nop
  }
  return usb_status;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	2500      	movs	r5, #0
 8008b14:	4e0c      	ldr	r6, [pc, #48]	; (8008b48 <__libc_init_array+0x38>)
 8008b16:	4c0d      	ldr	r4, [pc, #52]	; (8008b4c <__libc_init_array+0x3c>)
 8008b18:	1ba4      	subs	r4, r4, r6
 8008b1a:	10a4      	asrs	r4, r4, #2
 8008b1c:	42a5      	cmp	r5, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	f000 f822 	bl	8008b68 <_init>
 8008b24:	2500      	movs	r5, #0
 8008b26:	4e0a      	ldr	r6, [pc, #40]	; (8008b50 <__libc_init_array+0x40>)
 8008b28:	4c0a      	ldr	r4, [pc, #40]	; (8008b54 <__libc_init_array+0x44>)
 8008b2a:	1ba4      	subs	r4, r4, r6
 8008b2c:	10a4      	asrs	r4, r4, #2
 8008b2e:	42a5      	cmp	r5, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b38:	4798      	blx	r3
 8008b3a:	3501      	adds	r5, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b42:	4798      	blx	r3
 8008b44:	3501      	adds	r5, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	08008bf4 	.word	0x08008bf4
 8008b4c:	08008bf4 	.word	0x08008bf4
 8008b50:	08008bf4 	.word	0x08008bf4
 8008b54:	08008bf8 	.word	0x08008bf8

08008b58 <memset>:
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4402      	add	r2, r0
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d100      	bne.n	8008b62 <memset+0xa>
 8008b60:	4770      	bx	lr
 8008b62:	f803 1b01 	strb.w	r1, [r3], #1
 8008b66:	e7f9      	b.n	8008b5c <memset+0x4>

08008b68 <_init>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr

08008b74 <_fini>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr
