
mpu6050 accelometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008d1c  08008d1c  00018d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d8c  08008d8c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08008d8c  08008d8c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d8c  08008d8c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000164  08008ef8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  08008ef8  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137f4  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d55  00000000  00000000  00033981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d6  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011071  00000000  00000000  0005173e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087390  00000000  00000000  000627af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9b3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  000e9b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000164 	.word	0x20000164
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d04 	.word	0x08008d04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000168 	.word	0x20000168
 800014c:	08008d04 	.word	0x08008d04

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_f2iz>:
 8000af4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000af8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000afc:	d30f      	bcc.n	8000b1e <__aeabi_f2iz+0x2a>
 8000afe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_f2iz+0x30>
 8000b08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b14:	fa23 f002 	lsr.w	r0, r3, r2
 8000b18:	bf18      	it	ne
 8000b1a:	4240      	negne	r0, r0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2iz+0x3a>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d105      	bne.n	8000b3a <__aeabi_f2iz+0x46>
 8000b2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b32:	bf08      	it	eq
 8000b34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2301      	movs	r3, #1
 8000b56:	2275      	movs	r2, #117	; 0x75
 8000b58:	21d0      	movs	r1, #208	; 0xd0
 8000b5a:	4823      	ldr	r0, [pc, #140]	; (8000be8 <MPU6050_Init+0xa8>)
 8000b5c:	f001 f8fe 	bl	8001d5c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b68      	cmp	r3, #104	; 0x68
 8000b64:	d13b      	bne.n	8000bde <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	226b      	movs	r2, #107	; 0x6b
 8000b7c:	21d0      	movs	r1, #208	; 0xd0
 8000b7e:	481a      	ldr	r0, [pc, #104]	; (8000be8 <MPU6050_Init+0xa8>)
 8000b80:	f000 fff2 	bl	8001b68 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000b84:	2307      	movs	r3, #7
 8000b86:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	2219      	movs	r2, #25
 8000b9a:	21d0      	movs	r1, #208	; 0xd0
 8000b9c:	4812      	ldr	r0, [pc, #72]	; (8000be8 <MPU6050_Init+0xa8>)
 8000b9e:	f000 ffe3 	bl	8001b68 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	1dbb      	adds	r3, r7, #6
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	221c      	movs	r2, #28
 8000bb8:	21d0      	movs	r1, #208	; 0xd0
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MPU6050_Init+0xa8>)
 8000bbc:	f000 ffd4 	bl	8001b68 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	9302      	str	r3, [sp, #8]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	221b      	movs	r2, #27
 8000bd6:	21d0      	movs	r1, #208	; 0xd0
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MPU6050_Init+0xa8>)
 8000bda:	f000 ffc5 	bl	8001b68 <HAL_I2C_Mem_Write>
	}

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001b0 	.word	0x200001b0

08000bec <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	223b      	movs	r2, #59	; 0x3b
 8000c04:	21d0      	movs	r1, #208	; 0xd0
 8000c06:	482f      	ldr	r0, [pc, #188]	; (8000cc4 <MPU6050_Read_Accel+0xd8>)
 8000c08:	f001 f8a8 	bl	8001d5c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000c0c:	783b      	ldrb	r3, [r7, #0]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	787b      	ldrb	r3, [r7, #1]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MPU6050_Read_Accel+0xdc>)
 8000c1c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000c1e:	78bb      	ldrb	r3, [r7, #2]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <MPU6050_Read_Accel+0xe0>)
 8000c2e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000c30:	793b      	ldrb	r3, [r7, #4]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	797b      	ldrb	r3, [r7, #5]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MPU6050_Read_Accel+0xe4>)
 8000c40:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MPU6050_Read_Accel+0xdc>)
 8000c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fc87 	bl	800055c <__aeabi_i2d>
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MPU6050_Read_Accel+0xe8>)
 8000c54:	f7ff fe16 	bl	8000884 <__aeabi_ddiv>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f7ff fef8 	bl	8000a54 <__aeabi_d2f>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <MPU6050_Read_Accel+0xec>)
 8000c68:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MPU6050_Read_Accel+0xe0>)
 8000c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc73 	bl	800055c <__aeabi_i2d>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MPU6050_Read_Accel+0xe8>)
 8000c7c:	f7ff fe02 	bl	8000884 <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	f7ff fee4 	bl	8000a54 <__aeabi_d2f>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MPU6050_Read_Accel+0xf0>)
 8000c90:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MPU6050_Read_Accel+0xe4>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc5f 	bl	800055c <__aeabi_i2d>
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MPU6050_Read_Accel+0xe8>)
 8000ca4:	f7ff fdee 	bl	8000884 <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fed0 	bl	8000a54 <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <MPU6050_Read_Accel+0xf4>)
 8000cb8:	6013      	str	r3, [r2, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200001b0 	.word	0x200001b0
 8000cc8:	20000188 	.word	0x20000188
 8000ccc:	2000018a 	.word	0x2000018a
 8000cd0:	2000018c 	.word	0x2000018c
 8000cd4:	40d00000 	.word	0x40d00000
 8000cd8:	2000020c 	.word	0x2000020c
 8000cdc:	20000204 	.word	0x20000204
 8000ce0:	20000210 	.word	0x20000210
 8000ce4:	00000000 	.word	0x00000000

08000ce8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	2243      	movs	r2, #67	; 0x43
 8000d00:	21d0      	movs	r1, #208	; 0xd0
 8000d02:	4831      	ldr	r0, [pc, #196]	; (8000dc8 <MPU6050_Read_Gyro+0xe0>)
 8000d04:	f001 f82a 	bl	8001d5c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000d08:	783b      	ldrb	r3, [r7, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	787b      	ldrb	r3, [r7, #1]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MPU6050_Read_Gyro+0xe4>)
 8000d18:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000d1a:	78bb      	ldrb	r3, [r7, #2]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MPU6050_Read_Gyro+0xe8>)
 8000d2a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	797b      	ldrb	r3, [r7, #5]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MPU6050_Read_Gyro+0xec>)
 8000d3c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <MPU6050_Read_Gyro+0xe4>)
 8000d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fc09 	bl	800055c <__aeabi_i2d>
 8000d4a:	a31d      	add	r3, pc, #116	; (adr r3, 8000dc0 <MPU6050_Read_Gyro+0xd8>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fd98 	bl	8000884 <__aeabi_ddiv>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fe7a 	bl	8000a54 <__aeabi_d2f>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <MPU6050_Read_Gyro+0xf0>)
 8000d64:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MPU6050_Read_Gyro+0xe8>)
 8000d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fbf5 	bl	800055c <__aeabi_i2d>
 8000d72:	a313      	add	r3, pc, #76	; (adr r3, 8000dc0 <MPU6050_Read_Gyro+0xd8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f7ff fd84 	bl	8000884 <__aeabi_ddiv>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f7ff fe66 	bl	8000a54 <__aeabi_d2f>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <MPU6050_Read_Gyro+0xf4>)
 8000d8c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MPU6050_Read_Gyro+0xec>)
 8000d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fbe1 	bl	800055c <__aeabi_i2d>
 8000d9a:	a309      	add	r3, pc, #36	; (adr r3, 8000dc0 <MPU6050_Read_Gyro+0xd8>)
 8000d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da0:	f7ff fd70 	bl	8000884 <__aeabi_ddiv>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f7ff fe52 	bl	8000a54 <__aeabi_d2f>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <MPU6050_Read_Gyro+0xf8>)
 8000db4:	6013      	str	r3, [r2, #0]
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	00000000 	.word	0x00000000
 8000dc4:	40606000 	.word	0x40606000
 8000dc8:	200001b0 	.word	0x200001b0
 8000dcc:	2000018e 	.word	0x2000018e
 8000dd0:	20000190 	.word	0x20000190
 8000dd4:	20000192 	.word	0x20000192
 8000dd8:	200001ac 	.word	0x200001ac
 8000ddc:	20000208 	.word	0x20000208
 8000de0:	20000214 	.word	0x20000214

08000de4 <HAL_GPIO_EXTI_Callback>:


/********************* EXTI RELATED ************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7)
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	2b80      	cmp	r3, #128	; 0x80
 8000df2:	d102      	bne.n	8000dfa <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GPIO_EXTI_Callback+0x20>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	20000180 	.word	0x20000180

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0c:	f000 fa20 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f858 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 f8de 	bl	8000fd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e18:	f000 f8ae 	bl	8000f78 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000e1c:	f007 fb8c 	bl	8008538 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000e20:	f7ff fe8e 	bl	8000b40 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel();
 8000e24:	f7ff fee2 	bl	8000bec <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000e28:	f7ff ff5e 	bl	8000ce8 <MPU6050_Read_Gyro>

	mousehid.mouse_y = Ay*10;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <main+0xa4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	491f      	ldr	r1, [pc, #124]	; (8000eb0 <main+0xa8>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff f98c 	bl	8000150 <__aeabi_fmul>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe5a 	bl	8000af4 <__aeabi_f2iz>
 8000e40:	4603      	mov	r3, r0
 8000e42:	b25a      	sxtb	r2, r3
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <main+0xac>)
 8000e46:	709a      	strb	r2, [r3, #2]

	mousehid.mouse_x = Ax*10;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <main+0xb0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4918      	ldr	r1, [pc, #96]	; (8000eb0 <main+0xa8>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff f97e 	bl	8000150 <__aeabi_fmul>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe4c 	bl	8000af4 <__aeabi_f2iz>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <main+0xac>)
 8000e62:	705a      	strb	r2, [r3, #1]

	//USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
	if (button_flag == 1)
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <main+0xb4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d115      	bne.n	8000e98 <main+0x90>
	{
	  mousehid.button = 1;  // left click =1, right click =2
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <main+0xac>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000e72:	2204      	movs	r2, #4
 8000e74:	490f      	ldr	r1, [pc, #60]	; (8000eb4 <main+0xac>)
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <main+0xb8>)
 8000e78:	f006 fa6e 	bl	8007358 <USBD_HID_SendReport>
	  HAL_Delay(15);
 8000e7c:	200f      	movs	r0, #15
 8000e7e:	f000 fa49 	bl	8001314 <HAL_Delay>
	  mousehid.button = 0;  // left click =1, right click =2
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <main+0xac>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000e88:	2204      	movs	r2, #4
 8000e8a:	490a      	ldr	r1, [pc, #40]	; (8000eb4 <main+0xac>)
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <main+0xb8>)
 8000e8e:	f006 fa63 	bl	8007358 <USBD_HID_SendReport>
	  button_flag = 0;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <main+0xb4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	}

	USBD_HID_SendReport
 8000e98:	2204      	movs	r2, #4
 8000e9a:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <main+0xac>)
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <main+0xb8>)
 8000e9e:	f006 fa5b 	bl	8007358 <USBD_HID_SendReport>
	(&hUsbDeviceFS, &mousehid, sizeof (mousehid));


	HAL_Delay (15);  // wait for a while
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 fa36 	bl	8001314 <HAL_Delay>
	MPU6050_Read_Accel();
 8000ea8:	e7bc      	b.n	8000e24 <main+0x1c>
 8000eaa:	bf00      	nop
 8000eac:	20000204 	.word	0x20000204
 8000eb0:	41200000 	.word	0x41200000
 8000eb4:	20000184 	.word	0x20000184
 8000eb8:	2000020c 	.word	0x2000020c
 8000ebc:	20000180 	.word	0x20000180
 8000ec0:	2000021c 	.word	0x2000021c

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	2228      	movs	r2, #40	; 0x28
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f007 ff0e 	bl	8008cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 f98e 	bl	800423c <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f26:	f000 f8b7 	bl	8001098 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fbf8 	bl	800473c <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f52:	f000 f8a1 	bl	8001098 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f56:	2310      	movs	r3, #16
 8000f58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fd71 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f6c:	f000 f894 	bl	8001098 <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <MX_I2C1_Init+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x58>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb6:	f000 fc93 	bl	80018e0 <HAL_I2C_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc0:	f000 f86a 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001b0 	.word	0x200001b0
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	000186a0 	.word	0x000186a0

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <MX_GPIO_Init+0xb4>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a26      	ldr	r2, [pc, #152]	; (8001088 <MX_GPIO_Init+0xb4>)
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <MX_GPIO_Init+0xb4>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <MX_GPIO_Init+0xb4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a20      	ldr	r2, [pc, #128]	; (8001088 <MX_GPIO_Init+0xb4>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_GPIO_Init+0xb4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_GPIO_Init+0xb4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <MX_GPIO_Init+0xb4>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_GPIO_Init+0xb4>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2110      	movs	r1, #16
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <MX_GPIO_Init+0xb8>)
 8001036:	f000 fc23 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_GPIO_Init+0xbc>)
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_GPIO_Init+0xc0>)
 800104e:	f000 fa93 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001052:	2310      	movs	r3, #16
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2302      	movs	r3, #2
 8001060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	4619      	mov	r1, r3
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_GPIO_Init+0xb8>)
 800106a:	f000 fa85 	bl	8001578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2017      	movs	r0, #23
 8001074:	f000 fa49 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001078:	2017      	movs	r0, #23
 800107a:	f000 fa62 	bl	8001542 <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010c00 	.word	0x40010c00
 8001090:	10210000 	.word	0x10210000
 8001094:	40010800 	.word	0x40010800

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_MspInit+0x5c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x5c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_MspInit+0x60>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_MspInit+0x60>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_I2C_MspInit+0x70>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d123      	bne.n	8001170 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_I2C_MspInit+0x74>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_I2C_MspInit+0x74>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_I2C_MspInit+0x74>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <HAL_I2C_MspInit+0x78>)
 8001154:	f000 fa10 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_I2C_MspInit+0x74>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_I2C_MspInit+0x74>)
 800115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001162:	61d3      	str	r3, [r2, #28]
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_I2C_MspInit+0x74>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40005400 	.word	0x40005400
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f887 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011da:	f001 fcb2 	bl	8002b42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200006e0 	.word	0x200006e0

080011e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011ec:	2080      	movs	r0, #128	; 0x80
 80011ee:	f000 fb5f 	bl	80018b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
	...

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff ffe4 	bl	80011f6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f007 fd3d 	bl	8008cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fde9 	bl	8000e08 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001240:	08008d94 	.word	0x08008d94
  ldr r2, =_sbss
 8001244:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001248:	200009cc 	.word	0x200009cc

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f947 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff ff1a 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f95f 	bl	800155e <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f927 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000218 	.word	0x20000218

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000218 	.word	0x20000218

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4906      	ldr	r1, [pc, #24]	; (80013f4 <__NVIC_EnableIRQ+0x34>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff90 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff2d 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff42 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff90 	bl	800144c <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5f 	bl	80013f8 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff35 	bl	80013c0 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e169      	b.n	8001860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800158c:	2201      	movs	r2, #1
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 8158 	bne.w	800185a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4a9a      	ldr	r2, [pc, #616]	; (8001818 <HAL_GPIO_Init+0x2a0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d05e      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015b4:	4a98      	ldr	r2, [pc, #608]	; (8001818 <HAL_GPIO_Init+0x2a0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d875      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ba:	4a98      	ldr	r2, [pc, #608]	; (800181c <HAL_GPIO_Init+0x2a4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d058      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015c0:	4a96      	ldr	r2, [pc, #600]	; (800181c <HAL_GPIO_Init+0x2a4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d86f      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015c6:	4a96      	ldr	r2, [pc, #600]	; (8001820 <HAL_GPIO_Init+0x2a8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d052      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015cc:	4a94      	ldr	r2, [pc, #592]	; (8001820 <HAL_GPIO_Init+0x2a8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d869      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015d2:	4a94      	ldr	r2, [pc, #592]	; (8001824 <HAL_GPIO_Init+0x2ac>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d04c      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015d8:	4a92      	ldr	r2, [pc, #584]	; (8001824 <HAL_GPIO_Init+0x2ac>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d863      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015de:	4a92      	ldr	r2, [pc, #584]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d046      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015e4:	4a90      	ldr	r2, [pc, #576]	; (8001828 <HAL_GPIO_Init+0x2b0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d85d      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d82a      	bhi.n	8001644 <HAL_GPIO_Init+0xcc>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d859      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_GPIO_Init+0x80>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001673 	.word	0x08001673
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	0800165f 	.word	0x0800165f
 8001604:	080016a1 	.word	0x080016a1
 8001608:	080016a7 	.word	0x080016a7
 800160c:	080016a7 	.word	0x080016a7
 8001610:	080016a7 	.word	0x080016a7
 8001614:	080016a7 	.word	0x080016a7
 8001618:	080016a7 	.word	0x080016a7
 800161c:	080016a7 	.word	0x080016a7
 8001620:	080016a7 	.word	0x080016a7
 8001624:	080016a7 	.word	0x080016a7
 8001628:	080016a7 	.word	0x080016a7
 800162c:	080016a7 	.word	0x080016a7
 8001630:	080016a7 	.word	0x080016a7
 8001634:	080016a7 	.word	0x080016a7
 8001638:	080016a7 	.word	0x080016a7
 800163c:	08001655 	.word	0x08001655
 8001640:	08001669 	.word	0x08001669
 8001644:	4a79      	ldr	r2, [pc, #484]	; (800182c <HAL_GPIO_Init+0x2b4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164a:	e02c      	b.n	80016a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e029      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e024      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	3308      	adds	r3, #8
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e01f      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	330c      	adds	r3, #12
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e01a      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167a:	2304      	movs	r3, #4
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e013      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	611a      	str	r2, [r3, #16]
          break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	615a      	str	r2, [r3, #20]
          break;
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          break;
 80016a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d801      	bhi.n	80016b2 <HAL_GPIO_Init+0x13a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_Init+0x13e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d802      	bhi.n	80016c4 <HAL_GPIO_Init+0x14c>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x152>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	3b08      	subs	r3, #8
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	210f      	movs	r1, #15
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80b1 	beq.w	800185a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f8:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_GPIO_Init+0x2b8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	; (8001830 <HAL_GPIO_Init+0x2b8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <HAL_GPIO_Init+0x2b8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001710:	4a48      	ldr	r2, [pc, #288]	; (8001834 <HAL_GPIO_Init+0x2bc>)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a40      	ldr	r2, [pc, #256]	; (8001838 <HAL_GPIO_Init+0x2c0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_GPIO_Init+0x1ec>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a3f      	ldr	r2, [pc, #252]	; (800183c <HAL_GPIO_Init+0x2c4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00d      	beq.n	8001760 <HAL_GPIO_Init+0x1e8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a3e      	ldr	r2, [pc, #248]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x1e4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_GPIO_Init+0x1e0>
 8001754:	2303      	movs	r3, #3
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001758:	2304      	movs	r3, #4
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x1ee>
 8001764:	2300      	movs	r3, #0
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001776:	492f      	ldr	r1, [pc, #188]	; (8001834 <HAL_GPIO_Init+0x2bc>)
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	492c      	ldr	r1, [pc, #176]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4928      	ldr	r1, [pc, #160]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4922      	ldr	r1, [pc, #136]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	491e      	ldr	r1, [pc, #120]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4918      	ldr	r1, [pc, #96]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4914      	ldr	r1, [pc, #80]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d021      	beq.n	800184c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	490e      	ldr	r1, [pc, #56]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
 8001814:	e021      	b.n	800185a <HAL_GPIO_Init+0x2e2>
 8001816:	bf00      	nop
 8001818:	10320000 	.word	0x10320000
 800181c:	10310000 	.word	0x10310000
 8001820:	10220000 	.word	0x10220000
 8001824:	10210000 	.word	0x10210000
 8001828:	10120000 	.word	0x10120000
 800182c:	10110000 	.word	0x10110000
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	40010800 	.word	0x40010800
 800183c:	40010c00 	.word	0x40010c00
 8001840:	40011000 	.word	0x40011000
 8001844:	40011400 	.word	0x40011400
 8001848:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_GPIO_Init+0x304>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	43db      	mvns	r3, r3
 8001854:	4909      	ldr	r1, [pc, #36]	; (800187c <HAL_GPIO_Init+0x304>)
 8001856:	4013      	ands	r3, r2
 8001858:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	3301      	adds	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	f47f ae8e 	bne.w	800158c <HAL_GPIO_Init+0x14>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	372c      	adds	r7, #44	; 0x2c
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800189c:	e003      	b.n	80018a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	041a      	lsls	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	611a      	str	r2, [r3, #16]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa88 	bl	8000de4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e12b      	b.n	8001b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fbfe 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001944:	f003 f84e 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8001948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4a81      	ldr	r2, [pc, #516]	; (8001b54 <HAL_I2C_Init+0x274>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d807      	bhi.n	8001964 <HAL_I2C_Init+0x84>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a80      	ldr	r2, [pc, #512]	; (8001b58 <HAL_I2C_Init+0x278>)
 8001958:	4293      	cmp	r3, r2
 800195a:	bf94      	ite	ls
 800195c:	2301      	movls	r3, #1
 800195e:	2300      	movhi	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e006      	b.n	8001972 <HAL_I2C_Init+0x92>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a7d      	ldr	r2, [pc, #500]	; (8001b5c <HAL_I2C_Init+0x27c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0e7      	b.n	8001b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4a78      	ldr	r2, [pc, #480]	; (8001b60 <HAL_I2C_Init+0x280>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a6a      	ldr	r2, [pc, #424]	; (8001b54 <HAL_I2C_Init+0x274>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d802      	bhi.n	80019b4 <HAL_I2C_Init+0xd4>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	e009      	b.n	80019c8 <HAL_I2C_Init+0xe8>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_I2C_Init+0x284>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	3301      	adds	r3, #1
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	495c      	ldr	r1, [pc, #368]	; (8001b54 <HAL_I2C_Init+0x274>)
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d819      	bhi.n	8001a1c <HAL_I2C_Init+0x13c>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e59      	subs	r1, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f6:	1c59      	adds	r1, r3, #1
 80019f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019fc:	400b      	ands	r3, r1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <HAL_I2C_Init+0x138>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1e59      	subs	r1, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a16:	e051      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e04f      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d111      	bne.n	8001a48 <HAL_I2C_Init+0x168>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e012      	b.n	8001a6e <HAL_I2C_Init+0x18e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e58      	subs	r0, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	0099      	lsls	r1, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Init+0x196>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e022      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10e      	bne.n	8001a9c <HAL_I2C_Init+0x1bc>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1e58      	subs	r0, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	440b      	add	r3, r1
 8001a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a9a:	e00f      	b.n	8001abc <HAL_I2C_Init+0x1dc>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1e58      	subs	r0, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	0099      	lsls	r1, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6911      	ldr	r1, [r2, #16]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68d2      	ldr	r2, [r2, #12]
 8001af6:	4311      	orrs	r1, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	000186a0 	.word	0x000186a0
 8001b58:	001e847f 	.word	0x001e847f
 8001b5c:	003d08ff 	.word	0x003d08ff
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	10624dd3 	.word	0x10624dd3

08001b68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	817b      	strh	r3, [r7, #10]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	813b      	strh	r3, [r7, #8]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b82:	f7ff fbbd 	bl	8001300 <HAL_GetTick>
 8001b86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	f040 80d9 	bne.w	8001d48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2319      	movs	r3, #25
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	496d      	ldr	r1, [pc, #436]	; (8001d54 <HAL_I2C_Mem_Write+0x1ec>)
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 fcc1 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0cc      	b.n	8001d4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Mem_Write+0x56>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e0c5      	b.n	8001d4a <HAL_I2C_Mem_Write+0x1e2>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d007      	beq.n	8001be4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2221      	movs	r2, #33	; 0x21
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a3a      	ldr	r2, [r7, #32]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4a4d      	ldr	r2, [pc, #308]	; (8001d58 <HAL_I2C_Mem_Write+0x1f0>)
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c26:	88f8      	ldrh	r0, [r7, #6]
 8001c28:	893a      	ldrh	r2, [r7, #8]
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4603      	mov	r3, r0
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 faf8 	bl	800222c <I2C_RequestMemoryWrite>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d052      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e081      	b.n	8001d4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fd42 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d107      	bne.n	8001c6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06b      	b.n	8001d4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11b      	bne.n	8001ce8 <HAL_I2C_Mem_Write+0x180>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d017      	beq.n	8001ce8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1aa      	bne.n	8001c46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fd2e 	bl	8002756 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d107      	bne.n	8001d18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e016      	b.n	8001d4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
  }
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	00100002 	.word	0x00100002
 8001d58:	ffff0000 	.word	0xffff0000

08001d5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	817b      	strh	r3, [r7, #10]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	813b      	strh	r3, [r7, #8]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d7a:	f7ff fac1 	bl	8001300 <HAL_GetTick>
 8001d7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	f040 8244 	bne.w	8002216 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2319      	movs	r3, #25
 8001d94:	2201      	movs	r2, #1
 8001d96:	4982      	ldr	r1, [pc, #520]	; (8001fa0 <HAL_I2C_Mem_Read+0x244>)
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fbc5 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	e237      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Mem_Read+0x5a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e230      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d007      	beq.n	8001ddc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2222      	movs	r2, #34	; 0x22
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a62      	ldr	r2, [pc, #392]	; (8001fa4 <HAL_I2C_Mem_Read+0x248>)
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e1e:	88f8      	ldrh	r0, [r7, #6]
 8001e20:	893a      	ldrh	r2, [r7, #8]
 8001e22:	8979      	ldrh	r1, [r7, #10]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa92 	bl	8002358 <I2C_RequestMemoryRead>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1ec      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d113      	bne.n	8001e6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e1c0      	b.n	80021f0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d11e      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e86:	b672      	cpsid	i
}
 8001e88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001eb0:	b662      	cpsie	i
}
 8001eb2:	e035      	b.n	8001f20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d11e      	bne.n	8001efa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ef6:	b662      	cpsie	i
}
 8001ef8:	e012      	b.n	8001f20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f20:	e166      	b.n	80021f0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	f200 811f 	bhi.w	800216a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d123      	bne.n	8001f7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fc4d 	bl	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e167      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f7a:	e139      	b.n	80021f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d152      	bne.n	800202a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <HAL_I2C_Mem_Read+0x24c>)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 faca 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e13c      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
 8001f9e:	bf00      	nop
 8001fa0:	00100002 	.word	0x00100002
 8001fa4:	ffff0000 	.word	0xffff0000
 8001fa8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff2:	b662      	cpsie	i
}
 8001ff4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002028:	e0e2      	b.n	80021f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	2200      	movs	r2, #0
 8002032:	497b      	ldr	r1, [pc, #492]	; (8002220 <HAL_I2C_Mem_Read+0x4c4>)
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fa77 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0e9      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002052:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002054:	b672      	cpsid	i
}
 8002056:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <HAL_I2C_Mem_Read+0x4c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	4a65      	ldr	r2, [pc, #404]	; (8002228 <HAL_I2C_Mem_Read+0x4cc>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0a1a      	lsrs	r2, r3, #8
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00da      	lsls	r2, r3, #3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0220 	orr.w	r2, r3, #32
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020d2:	b662      	cpsie	i
}
 80020d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e09a      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d1d9      	bne.n	80020a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002132:	b662      	cpsie	i
}
 8002134:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002168:	e042      	b.n	80021f0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fb32 	bl	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e04c      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d118      	bne.n	80021f0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f ae94 	bne.w	8001f22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	00010004 	.word	0x00010004
 8002224:	20000000 	.word	0x20000000
 8002228:	14f8b589 	.word	0x14f8b589

0800222c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	2200      	movs	r2, #0
 800225e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f960 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227c:	d103      	bne.n	8002286 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e05f      	b.n	800234a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228a:	897b      	ldrh	r3, [r7, #10]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	492d      	ldr	r1, [pc, #180]	; (8002354 <I2C_RequestMemoryWrite+0x128>)
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f998 	bl	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e04c      	b.n	800234a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa02 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e02b      	b.n	800234a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	e021      	b.n	8002348 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002304:	893b      	ldrh	r3, [r7, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	6a39      	ldr	r1, [r7, #32]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f9dc 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b04      	cmp	r3, #4
 8002328:	d107      	bne.n	800233a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e005      	b.n	800234a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800233e:	893b      	ldrh	r3, [r7, #8]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	00010002 	.word	0x00010002

08002358 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	817b      	strh	r3, [r7, #10]
 800236a:	460b      	mov	r3, r1
 800236c:	813b      	strh	r3, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002380:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002390:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2200      	movs	r2, #0
 800239a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8c2 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b8:	d103      	bne.n	80023c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0aa      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023c6:	897b      	ldrh	r3, [r7, #10]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	4952      	ldr	r1, [pc, #328]	; (8002524 <I2C_RequestMemoryRead+0x1cc>)
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f8fa 	bl	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e097      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f964 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b04      	cmp	r3, #4
 8002418:	d107      	bne.n	800242a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002428:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e076      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002434:	893b      	ldrh	r3, [r7, #8]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]
 800243e:	e021      	b.n	8002484 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002440:	893b      	ldrh	r3, [r7, #8]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	b29b      	uxth	r3, r3
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f93e 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b04      	cmp	r3, #4
 8002464:	d107      	bne.n	8002476 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002474:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e050      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800247a:	893b      	ldrh	r3, [r7, #8]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	6a39      	ldr	r1, [r7, #32]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f923 	bl	80026d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b04      	cmp	r3, #4
 800249a:	d107      	bne.n	80024ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e035      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f82b 	bl	8002528 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e6:	d103      	bne.n	80024f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e013      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	6a3a      	ldr	r2, [r7, #32]
 8002508:	4906      	ldr	r1, [pc, #24]	; (8002524 <I2C_RequestMemoryRead+0x1cc>)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f863 	bl	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00010002 	.word	0x00010002

08002528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002538:	e025      	b.n	8002586 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d021      	beq.n	8002586 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002542:	f7fe fedd 	bl	8001300 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d116      	bne.n	8002586 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e023      	b.n	80025ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d10d      	bne.n	80025ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	e00c      	b.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d0b6      	beq.n	800253a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e4:	e051      	b.n	800268a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d123      	bne.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002604:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800260e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e046      	b.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d021      	beq.n	800268a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7fe fe5b 	bl	8001300 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d116      	bne.n	800268a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e020      	b.n	80026cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10c      	bne.n	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4013      	ands	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e00b      	b.n	80026c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	43da      	mvns	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d18d      	bne.n	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e0:	e02d      	b.n	800273e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f8ce 	bl	8002884 <I2C_IsAcknowledgeFailed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e02d      	b.n	800274e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d021      	beq.n	800273e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fa:	f7fe fe01 	bl	8001300 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	d302      	bcc.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d116      	bne.n	800273e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 0220 	orr.w	r2, r3, #32
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d1ca      	bne.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002762:	e02d      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f88d 	bl	8002884 <I2C_IsAcknowledgeFailed>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e02d      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d021      	beq.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7fe fdc0 	bl	8001300 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e007      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d1ca      	bne.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027e4:	e042      	b.n	800286c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d119      	bne.n	8002828 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0210 	mvn.w	r2, #16
 80027fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e029      	b.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002828:	f7fe fd6a 	bl	8001300 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d302      	bcc.n	800283e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e007      	b.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d1b5      	bne.n	80027e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d11b      	bne.n	80028d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	b08b      	sub	sp, #44	; 0x2c
 80028e4:	af06      	add	r7, sp, #24
 80028e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0fd      	b.n	8002aee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f005 ff4a 	bl	80087a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2203      	movs	r2, #3
 8002910:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f002 f971 	bl	8004c00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	687e      	ldr	r6, [r7, #4]
 8002926:	466d      	mov	r5, sp
 8002928:	f106 0410 	add.w	r4, r6, #16
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	1d33      	adds	r3, r6, #4
 8002936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002938:	6838      	ldr	r0, [r7, #0]
 800293a:	f002 f93b 	bl	8004bb4 <USB_CoreInit>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0ce      	b.n	8002aee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f002 f96c 	bl	8004c34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e04c      	b.n	80029fc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	3301      	adds	r3, #1
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	b298      	uxth	r0, r3
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	3336      	adds	r3, #54	; 0x36
 80029a0:	4602      	mov	r2, r0
 80029a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	3303      	adds	r3, #3
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3338      	adds	r3, #56	; 0x38
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	333c      	adds	r3, #60	; 0x3c
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	3340      	adds	r3, #64	; 0x40
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	3301      	adds	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d3ad      	bcc.n	8002962 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	e044      	b.n	8002a96 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a7a:	7bfa      	ldrb	r2, [r7, #15]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	3301      	adds	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d3b5      	bcc.n	8002a0c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	687e      	ldr	r6, [r7, #4]
 8002aa8:	466d      	mov	r5, sp
 8002aaa:	f106 0410 	add.w	r4, r6, #16
 8002aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	602b      	str	r3, [r5, #0]
 8002ab6:	1d33      	adds	r3, r6, #4
 8002ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aba:	6838      	ldr	r0, [r7, #0]
 8002abc:	f002 f8c6 	bl	8004c4c <USB_DevInit>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00d      	b.n	8002aee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fa37 	bl	8006f5a <USB_DevDisconnect>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_PCD_Start+0x16>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e016      	b.n	8002b3a <HAL_PCD_Start+0x44>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 f85b 	bl	8004bd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b1e:	2101      	movs	r1, #1
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f006 f88c 	bl	8008c3e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 fa0b 	bl	8006f46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b088      	sub	sp, #32
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fa0d 	bl	8006f6e <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fb4a 	bl	80031fa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 f9ff 	bl	8006f6e <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d112      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f005 fe7e 	bl	8008896 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f925 	bl	8002dec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f9e1 	bl	8006f6e <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f9ca 	bl	8006f6e <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be4:	d10b      	bne.n	8002bfe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf8:	b292      	uxth	r2, r2
 8002bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 f9b3 	bl	8006f6e <USB_ReadInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d126      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	b292      	uxth	r2, r2
 8002c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0208 	bic.w	r2, r2, #8
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f005 fe5f 	bl	8008908 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 f981 	bl	8006f6e <USB_ReadInterrupts>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c76:	f040 8084 	bne.w	8002d82 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	77fb      	strb	r3, [r7, #31]
 8002c7e:	e011      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	7ffb      	ldrb	r3, [r7, #31]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	7ffb      	ldrb	r3, [r7, #31]
 8002c8e:	8812      	ldrh	r2, [r2, #0]
 8002c90:	b292      	uxth	r2, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	f107 0120 	add.w	r1, r7, #32
 8002c98:	440b      	add	r3, r1
 8002c9a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	7ffb      	ldrb	r3, [r7, #31]
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d9ea      	bls.n	8002c80 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002cda:	bf00      	nop
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f6      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	b292      	uxth	r2, r2
 8002d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e010      	b.n	8002d2e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	4611      	mov	r1, r2
 8002d14:	7ffa      	ldrb	r2, [r7, #31]
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	440a      	add	r2, r1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	f107 0120 	add.w	r1, r7, #32
 8002d20:	440b      	add	r3, r1
 8002d22:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002d26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	7ffb      	ldrb	r3, [r7, #31]
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d9eb      	bls.n	8002d0c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0208 	orr.w	r2, r2, #8
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0204 	orr.w	r2, r2, #4
 8002d76:	b292      	uxth	r2, r2
 8002d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f005 fda9 	bl	80088d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 f8f1 	bl	8006f6e <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d10e      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002daa:	b292      	uxth	r2, r2
 8002dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f005 fd62 	bl	800887a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 f8d7 	bl	8006f6e <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dca:	d10b      	bne.n	8002de4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dde:	b292      	uxth	r2, r2
 8002de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_SetAddress+0x1a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e013      	b.n	8002e2e <HAL_PCD_SetAddress+0x42>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f004 f87e 	bl	8006f20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	4608      	mov	r0, r1
 8002e40:	4611      	mov	r1, r2
 8002e42:	461a      	mov	r2, r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	70fb      	strb	r3, [r7, #3]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	803b      	strh	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da0e      	bge.n	8002e7a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
 8002e78:	e00e      	b.n	8002e98 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 0207 	and.w	r2, r3, #7
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea4:	883a      	ldrh	r2, [r7, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	78ba      	ldrb	r2, [r7, #2]
 8002eae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec2:	78bb      	ldrb	r3, [r7, #2]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Open+0xa6>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Open+0xc4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fece 	bl	8004c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0e      	bge.n	8002f34 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00e      	b.n	8002f52 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 0207 	and.w	r2, r3, #7
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_PCD_EP_Close+0x6a>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e00e      	b.n	8002f8a <HAL_PCD_EP_Close+0x88>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68f9      	ldr	r1, [r7, #12]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 f9f0 	bl	8005360 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6979      	ldr	r1, [r7, #20]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 fba2 	bl	8005738 <USB_EPStartXfer>
 8002ff4:	e005      	b.n	8003002 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f002 fb9b 	bl	8005738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	460b      	mov	r3, r1
 800301a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2201      	movs	r2, #1
 8003056:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	b2da      	uxtb	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6979      	ldr	r1, [r7, #20]
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fb5f 	bl	8005738 <USB_EPStartXfer>
 800307a:	e005      	b.n	8003088 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6979      	ldr	r1, [r7, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fb58 	bl	8005738 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 0207 	and.w	r2, r3, #7
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d901      	bls.n	80030b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04c      	b.n	800314a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da0e      	bge.n	80030d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	705a      	strb	r2, [r3, #1]
 80030d4:	e00c      	b.n	80030f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_SetStall+0x7e>
 800310c:	2302      	movs	r3, #2
 800310e:	e01c      	b.n	800314a <HAL_PCD_EP_SetStall+0xb8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fe01 	bl	8006d26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f003 ff26 	bl	8006f8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d901      	bls.n	8003170 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e040      	b.n	80031f2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	da0e      	bge.n	8003196 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	705a      	strb	r2, [r3, #1]
 8003194:	e00e      	b.n	80031b4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 0207 	and.w	r2, r3, #7
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_PCD_EP_ClrStall+0x82>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e00e      	b.n	80031f2 <HAL_PCD_EP_ClrStall+0xa0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68f9      	ldr	r1, [r7, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 fdef 	bl	8006dc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08e      	sub	sp, #56	; 0x38
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003202:	e2ec      	b.n	80037de <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800320c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800320e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800321a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 8161 	bne.w	80034e6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d152      	bne.n	80032d4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	81fb      	strh	r3, [r7, #14]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	89fb      	ldrh	r3, [r7, #14]
 8003246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3328      	adds	r3, #40	; 0x28
 8003256:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003260:	b29b      	uxth	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	3302      	adds	r3, #2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	441a      	add	r2, r3
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003292:	2100      	movs	r1, #0
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f005 fad6 	bl	8008846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 829b 	beq.w	80037de <PCD_EP_ISR_Handler+0x5e4>
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f040 8296 	bne.w	80037de <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b292      	uxth	r2, r2
 80032c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032d2:	e284      	b.n	80037de <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d034      	beq.n	8003358 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	3306      	adds	r3, #6
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800332c:	b29b      	uxth	r3, r3
 800332e:	f003 fe7d 	bl	800702c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	b29a      	uxth	r2, r3
 800333a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800333e:	4013      	ands	r3, r2
 8003340:	823b      	strh	r3, [r7, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	8a3a      	ldrh	r2, [r7, #16]
 8003348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800334c:	b292      	uxth	r2, r2
 800334e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f005 fa4b 	bl	80087ec <HAL_PCD_SetupStageCallback>
 8003356:	e242      	b.n	80037de <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003358:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800335c:	2b00      	cmp	r3, #0
 800335e:	f280 823e 	bge.w	80037de <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29a      	uxth	r2, r3
 800336a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800336e:	4013      	ands	r3, r2
 8003370:	83bb      	strh	r3, [r7, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	8bba      	ldrh	r2, [r7, #28]
 8003378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800337c:	b292      	uxth	r2, r2
 800337e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	3306      	adds	r3, #6
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d019      	beq.n	80033e8 <PCD_EP_ISR_Handler+0x1ee>
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	6959      	ldr	r1, [r3, #20]
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f003 fe2d 	bl	800702c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	441a      	add	r2, r3
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80033e0:	2100      	movs	r1, #0
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f005 fa14 	bl	8008810 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 81f2 	bne.w	80037de <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d112      	bne.n	8003448 <PCD_EP_ISR_Handler+0x24e>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800342c:	b29a      	uxth	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800343c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003440:	b29a      	uxth	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	e02f      	b.n	80034a8 <PCD_EP_ISR_Handler+0x2ae>
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b3e      	cmp	r3, #62	; 0x3e
 800344e:	d813      	bhi.n	8003478 <PCD_EP_ISR_Handler+0x27e>
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <PCD_EP_ISR_Handler+0x270>
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	3301      	adds	r3, #1
 8003468:	633b      	str	r3, [r7, #48]	; 0x30
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	b29b      	uxth	r3, r3
 800346e:	029b      	lsls	r3, r3, #10
 8003470:	b29a      	uxth	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	801a      	strh	r2, [r3, #0]
 8003476:	e017      	b.n	80034a8 <PCD_EP_ISR_Handler+0x2ae>
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <PCD_EP_ISR_Handler+0x298>
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	3b01      	subs	r3, #1
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	b29b      	uxth	r3, r3
 8003496:	029b      	lsls	r3, r3, #10
 8003498:	b29b      	uxth	r3, r3
 800349a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800349e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	827b      	strh	r3, [r7, #18]
 80034ba:	8a7b      	ldrh	r3, [r7, #18]
 80034bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034c0:	827b      	strh	r3, [r7, #18]
 80034c2:	8a7b      	ldrh	r3, [r7, #18]
 80034c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034c8:	827b      	strh	r3, [r7, #18]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	8a7b      	ldrh	r3, [r7, #18]
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e17b      	b.n	80037de <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f280 80ea 	bge.w	80036d6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29a      	uxth	r2, r3
 8003514:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003518:	4013      	ands	r3, r2
 800351a:	853b      	strh	r3, [r7, #40]	; 0x28
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800352c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003530:	b292      	uxth	r2, r2
 8003532:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003534:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	7b1b      	ldrb	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d122      	bne.n	8003598 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	3306      	adds	r3, #6
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800357c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8087 	beq.w	8003692 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	6959      	ldr	r1, [r3, #20]
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	88da      	ldrh	r2, [r3, #6]
 8003590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003592:	f003 fd4b 	bl	800702c <USB_ReadPMA>
 8003596:	e07c      	b.n	8003692 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d108      	bne.n	80035b2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035a2:	461a      	mov	r2, r3
 80035a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f927 	bl	80037fa <HAL_PCD_EP_DB_Receive>
 80035ac:	4603      	mov	r3, r0
 80035ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035b0:	e06f      	b.n	8003692 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d021      	beq.n	8003650 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003614:	b29b      	uxth	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	3302      	adds	r3, #2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003638:	2b00      	cmp	r3, #0
 800363a:	d02a      	beq.n	8003692 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6959      	ldr	r1, [r3, #20]
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	891a      	ldrh	r2, [r3, #8]
 8003648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800364a:	f003 fcef 	bl	800702c <USB_ReadPMA>
 800364e:	e020      	b.n	8003692 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	3306      	adds	r3, #6
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003678:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800367a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	6959      	ldr	r1, [r3, #20]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	895a      	ldrh	r2, [r3, #10]
 800368c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800368e:	f003 fccd 	bl	800702c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003698:	441a      	add	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036a4:	441a      	add	r2, r3
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <PCD_EP_ISR_Handler+0x4c2>
 80036b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d206      	bcs.n	80036ca <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 f8a4 	bl	8008810 <HAL_PCD_DataOutStageCallback>
 80036c8:	e005      	b.n	80036d6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 f831 	bl	8005738 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80036d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07e      	beq.n	80037de <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80036e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	843b      	strh	r3, [r7, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	8c3b      	ldrh	r3, [r7, #32]
 8003720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003728:	b29b      	uxth	r3, r3
 800372a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	78db      	ldrb	r3, [r3, #3]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d00c      	beq.n	800374e <PCD_EP_ISR_Handler+0x554>
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	78db      	ldrb	r3, [r3, #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003740:	2b02      	cmp	r3, #2
 8003742:	d146      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003744:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d141      	bne.n	80037d2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	3302      	adds	r3, #2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003776:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	8bfb      	ldrh	r3, [r7, #30]
 800377e:	429a      	cmp	r2, r3
 8003780:	d906      	bls.n	8003790 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	8bfb      	ldrh	r3, [r7, #30]
 8003788:	1ad2      	subs	r2, r2, r3
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	619a      	str	r2, [r3, #24]
 800378e:	e002      	b.n	8003796 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	2200      	movs	r2, #0
 8003794:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f005 f84e 	bl	8008846 <HAL_PCD_DataInStageCallback>
 80037aa:	e018      	b.n	80037de <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	8bfb      	ldrh	r3, [r7, #30]
 80037b2:	441a      	add	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	8bfb      	ldrh	r3, [r7, #30]
 80037be:	441a      	add	r2, r3
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 ffb4 	bl	8005738 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80037d0:	e005      	b.n	80037de <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037d4:	461a      	mov	r2, r3
 80037d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f91b 	bl	8003a14 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	b21b      	sxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f6ff ad0a 	blt.w	8003204 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3738      	adds	r7, #56	; 0x38
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07e      	beq.n	8003910 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	3302      	adds	r3, #2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	8b7b      	ldrh	r3, [r7, #26]
 8003842:	429a      	cmp	r2, r3
 8003844:	d306      	bcc.n	8003854 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	8b7b      	ldrh	r3, [r7, #26]
 800384c:	1ad2      	subs	r2, r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	e002      	b.n	800385a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2200      	movs	r2, #0
 8003858:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d123      	bne.n	80038aa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387c:	833b      	strh	r3, [r7, #24]
 800387e:	8b3b      	ldrh	r3, [r7, #24]
 8003880:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003884:	833b      	strh	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	441a      	add	r2, r3
 8003894:	8b3b      	ldrh	r3, [r7, #24]
 8003896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01f      	beq.n	80038f4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	82fb      	strh	r3, [r7, #22]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	8afb      	ldrh	r3, [r7, #22]
 80038e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038f4:	8b7b      	ldrh	r3, [r7, #26]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8087 	beq.w	8003a0a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6959      	ldr	r1, [r3, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	891a      	ldrh	r2, [r3, #8]
 8003908:	8b7b      	ldrh	r3, [r7, #26]
 800390a:	f003 fb8f 	bl	800702c <USB_ReadPMA>
 800390e:	e07c      	b.n	8003a0a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003918:	b29b      	uxth	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	3306      	adds	r3, #6
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003938:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	8b7b      	ldrh	r3, [r7, #26]
 8003940:	429a      	cmp	r2, r3
 8003942:	d306      	bcc.n	8003952 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	8b7b      	ldrh	r3, [r7, #26]
 800394a:	1ad2      	subs	r2, r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	619a      	str	r2, [r3, #24]
 8003950:	e002      	b.n	8003958 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2200      	movs	r2, #0
 8003956:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d123      	bne.n	80039a8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	83fb      	strh	r3, [r7, #30]
 800397c:	8bfb      	ldrh	r3, [r7, #30]
 800397e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003982:	83fb      	strh	r3, [r7, #30]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	8bfb      	ldrh	r3, [r7, #30]
 8003994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11f      	bne.n	80039f2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	83bb      	strh	r3, [r7, #28]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	8bbb      	ldrh	r3, [r7, #28]
 80039de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039f2:	8b7b      	ldrh	r3, [r7, #26]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6959      	ldr	r1, [r3, #20]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	895a      	ldrh	r2, [r3, #10]
 8003a04:	8b7b      	ldrh	r3, [r7, #26]
 8003a06:	f003 fb11 	bl	800702c <USB_ReadPMA>
    }
  }

  return count;
 8003a0a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0a2      	sub	sp, #136	; 0x88
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 81c7 	beq.w	8003dbc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	3302      	adds	r3, #2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d907      	bls.n	8003a76 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	619a      	str	r2, [r3, #24]
 8003a74:	e002      	b.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 80b9 	bne.w	8003bf8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d126      	bne.n	8003adc <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	4413      	add	r3, r2
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	011a      	lsls	r2, r3, #4
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	4413      	add	r3, r2
 8003ab0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	e01a      	b.n	8003b12 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d116      	bne.n	8003b12 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	4413      	add	r3, r2
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	011a      	lsls	r2, r3, #4
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	4413      	add	r3, r2
 8003b06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2200      	movs	r2, #0
 8003b10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d126      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4413      	add	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	011a      	lsls	r2, r3, #4
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e017      	b.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d113      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	4413      	add	r3, r2
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f004 fe4e 	bl	8008846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 82d4 	beq.w	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd0:	827b      	strh	r3, [r7, #18]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	441a      	add	r2, r3
 8003be0:	8a7b      	ldrh	r3, [r7, #18]
 8003be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	8013      	strh	r3, [r2, #0]
 8003bf6:	e2b2      	b.n	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d021      	beq.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 8286 	bne.w	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c5a:	441a      	add	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c68:	441a      	add	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d309      	bcc.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6a1a      	ldr	r2, [r3, #32]
 8003c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	621a      	str	r2, [r3, #32]
 8003c8c:	e015      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003c96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ca4:	e009      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d155      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x35a>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	4413      	add	r3, r2
 8003cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	011a      	lsls	r2, r3, #4
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d112      	bne.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x302>
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e047      	b.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d18:	2b3e      	cmp	r3, #62	; 0x3e
 8003d1a:	d811      	bhi.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	3301      	adds	r3, #1
 8003d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	029b      	lsls	r3, r3, #10
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	e032      	b.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x342>
 8003d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d52:	3b01      	subs	r3, #1
 8003d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	029b      	lsls	r3, r3, #10
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	e01b      	b.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d117      	bne.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8a:	4413      	add	r3, r2
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	011a      	lsls	r2, r3, #4
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	4413      	add	r3, r2
 8003d98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6959      	ldr	r1, [r3, #20]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	891a      	ldrh	r2, [r3, #8]
 8003db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f003 f8f4 	bl	8006fa2 <USB_WritePMA>
 8003dba:	e1d0      	b.n	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3306      	adds	r3, #6
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d307      	bcc.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dfc:	1ad2      	subs	r2, r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	e002      	b.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80c4 	bne.w	8003f9c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d126      	bne.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x456>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e30:	4413      	add	r3, r2
 8003e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	011a      	lsls	r2, r3, #4
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	e01a      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	785b      	ldrb	r3, [r3, #1]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d116      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	677b      	str	r3, [r7, #116]	; 0x74
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e86:	4413      	add	r3, r2
 8003e88:	677b      	str	r3, [r7, #116]	; 0x74
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	011a      	lsls	r2, r3, #4
 8003e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e92:	4413      	add	r3, r2
 8003e94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e98:	673b      	str	r3, [r7, #112]	; 0x70
 8003e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d12f      	bne.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	e017      	b.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	785b      	ldrb	r3, [r3, #1]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d113      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f24:	4413      	add	r3, r2
 8003f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f30:	4413      	add	r3, r2
 8003f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f004 fc7e 	bl	8008846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 8104 	bne.w	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8013      	strh	r3, [r2, #0]
 8003f9a:	e0e0      	b.n	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d121      	bne.n	8003fea <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f040 80b4 	bne.w	800415e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ffe:	441a      	add	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800400c:	441a      	add	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d309      	bcc.n	8004032 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	621a      	str	r2, [r3, #32]
 8004030:	e015      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800403a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800403e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004048:	e009      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	667b      	str	r3, [r7, #100]	; 0x64
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d155      	bne.n	8004118 <HAL_PCD_EP_DB_Transmit+0x704>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004080:	4413      	add	r3, r2
 8004082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	011a      	lsls	r2, r3, #4
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	4413      	add	r3, r2
 800408e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004092:	65bb      	str	r3, [r7, #88]	; 0x58
 8004094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004096:	2b00      	cmp	r3, #0
 8004098:	d112      	bne.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800409a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	e044      	b.n	800414a <HAL_PCD_EP_DB_Transmit+0x736>
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	2b3e      	cmp	r3, #62	; 0x3e
 80040c4:	d811      	bhi.n	80040ea <HAL_PCD_EP_DB_Transmit+0x6d6>
 80040c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	657b      	str	r3, [r7, #84]	; 0x54
 80040cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_PCD_EP_DB_Transmit+0x6c8>
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	3301      	adds	r3, #1
 80040da:	657b      	str	r3, [r7, #84]	; 0x54
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	b29b      	uxth	r3, r3
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	e02f      	b.n	800414a <HAL_PCD_EP_DB_Transmit+0x736>
 80040ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	657b      	str	r3, [r7, #84]	; 0x54
 80040f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	3b01      	subs	r3, #1
 80040fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	b29b      	uxth	r3, r3
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	b29b      	uxth	r3, r3
 8004108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004110:	b29a      	uxth	r2, r3
 8004112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	e018      	b.n	800414a <HAL_PCD_EP_DB_Transmit+0x736>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	785b      	ldrb	r3, [r3, #1]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d114      	bne.n	800414a <HAL_PCD_EP_DB_Transmit+0x736>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412e:	4413      	add	r3, r2
 8004130:	667b      	str	r3, [r7, #100]	; 0x64
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	011a      	lsls	r2, r3, #4
 8004138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413a:	4413      	add	r3, r2
 800413c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
 8004142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004144:	b29a      	uxth	r2, r3
 8004146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004148:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6959      	ldr	r1, [r3, #20]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	895a      	ldrh	r2, [r3, #10]
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	b29b      	uxth	r3, r3
 800415a:	f002 ff22 	bl	8006fa2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004178:	823b      	strh	r3, [r7, #16]
 800417a:	8a3b      	ldrh	r3, [r7, #16]
 800417c:	f083 0310 	eor.w	r3, r3, #16
 8004180:	823b      	strh	r3, [r7, #16]
 8004182:	8a3b      	ldrh	r3, [r7, #16]
 8004184:	f083 0320 	eor.w	r3, r3, #32
 8004188:	823b      	strh	r3, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	8a3b      	ldrh	r3, [r7, #16]
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3788      	adds	r7, #136	; 0x88
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	817b      	strh	r3, [r7, #10]
 80041c6:	4613      	mov	r3, r2
 80041c8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e009      	b.n	8004202 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041ee:	897a      	ldrh	r2, [r7, #10]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004202:	893b      	ldrh	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	b29a      	uxth	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	80da      	strh	r2, [r3, #6]
 8004216:	e00b      	b.n	8004230 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2201      	movs	r2, #1
 800421c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	b29a      	uxth	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	b29a      	uxth	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e26c      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8087 	beq.w	800436a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800425c:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b04      	cmp	r3, #4
 8004266:	d00c      	beq.n	8004282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004268:	4b8f      	ldr	r3, [pc, #572]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d112      	bne.n	800429a <HAL_RCC_OscConfig+0x5e>
 8004274:	4b8c      	ldr	r3, [pc, #560]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d10b      	bne.n	800429a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d06c      	beq.n	8004368 <HAL_RCC_OscConfig+0x12c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d168      	bne.n	8004368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e246      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x76>
 80042a4:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7f      	ldr	r2, [pc, #508]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e02e      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0x98>
 80042ba:	4b7b      	ldr	r3, [pc, #492]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7a      	ldr	r2, [pc, #488]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a77      	ldr	r2, [pc, #476]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e01d      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0xbc>
 80042de:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a71      	ldr	r2, [pc, #452]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0xd4>
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a67      	ldr	r2, [pc, #412]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fc fff2 	bl	8001300 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fc ffee 	bl	8001300 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1fa      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	4b5d      	ldr	r3, [pc, #372]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0xe4>
 800433e:	e014      	b.n	800436a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fc ffde 	bl	8001300 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fc ffda 	bl	8001300 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1e6      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x10c>
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d063      	beq.n	800443e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004376:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004382:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b08      	cmp	r3, #8
 800438c:	d11c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x18c>
 800438e:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1ba      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b3d      	ldr	r3, [pc, #244]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4939      	ldr	r1, [pc, #228]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e03a      	b.n	800443e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d6:	f7fc ff93 	bl	8001300 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fc ff8f 	bl	8001300 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e19b      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	4b2d      	ldr	r3, [pc, #180]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4927      	ldr	r1, [pc, #156]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e015      	b.n	800443e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fc ff72 	bl	8001300 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004420:	f7fc ff6e 	bl	8001300 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e17a      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03a      	beq.n	80044c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d019      	beq.n	8004486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fc ff52 	bl	8001300 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004460:	f7fc ff4e 	bl	8001300 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e15a      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCC_OscConfig+0x26c>)
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800447e:	2001      	movs	r0, #1
 8004480:	f000 fac4 	bl	8004a0c <RCC_Delay>
 8004484:	e01c      	b.n	80044c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fc ff38 	bl	8001300 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004492:	e00f      	b.n	80044b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fc ff34 	bl	8001300 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d908      	bls.n	80044b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e140      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	42420000 	.word	0x42420000
 80044b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b9e      	ldr	r3, [pc, #632]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e9      	bne.n	8004494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a6 	beq.w	800461a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b97      	ldr	r3, [pc, #604]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b94      	ldr	r3, [pc, #592]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a93      	ldr	r2, [pc, #588]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	61d3      	str	r3, [r2, #28]
 80044ea:	4b91      	ldr	r3, [pc, #580]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b8e      	ldr	r3, [pc, #568]	; (8004734 <HAL_RCC_OscConfig+0x4f8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b8b      	ldr	r3, [pc, #556]	; (8004734 <HAL_RCC_OscConfig+0x4f8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a8a      	ldr	r2, [pc, #552]	; (8004734 <HAL_RCC_OscConfig+0x4f8>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fc fef5 	bl	8001300 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fc fef1 	bl	8001300 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	; 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0fd      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x312>
 8004540:	4b7b      	ldr	r3, [pc, #492]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4a7a      	ldr	r2, [pc, #488]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6213      	str	r3, [r2, #32]
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x334>
 8004556:	4b76      	ldr	r3, [pc, #472]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	4a75      	ldr	r2, [pc, #468]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6213      	str	r3, [r2, #32]
 8004562:	4b73      	ldr	r3, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4a72      	ldr	r2, [pc, #456]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6213      	str	r3, [r2, #32]
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x356>
 8004578:	4b6d      	ldr	r3, [pc, #436]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a6c      	ldr	r2, [pc, #432]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a69      	ldr	r2, [pc, #420]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6213      	str	r3, [r2, #32]
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x36e>
 8004592:	4b67      	ldr	r3, [pc, #412]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a66      	ldr	r2, [pc, #408]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	4b64      	ldr	r3, [pc, #400]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b2:	f7fc fea5 	bl	8001300 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fc fea1 	bl	8001300 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ab      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b57      	ldr	r3, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x37e>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fc fe8f 	bl	8001300 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fc fe8b 	bl	8001300 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e095      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b48      	ldr	r3, [pc, #288]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	4a47      	ldr	r2, [pc, #284]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8081 	beq.w	8004726 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b42      	ldr	r3, [pc, #264]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d061      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d146      	bne.n	80046c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_RCC_OscConfig+0x4fc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fc fe5f 	bl	8001300 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004646:	f7fc fe5b 	bl	8001300 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e067      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d108      	bne.n	8004680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800466e:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	492d      	ldr	r1, [pc, #180]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004680:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a19      	ldr	r1, [r3, #32]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	430b      	orrs	r3, r1
 8004692:	4927      	ldr	r1, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_RCC_OscConfig+0x4fc>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fc fe2f 	bl	8001300 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fc fe2b 	bl	8001300 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e037      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x46a>
 80046c4:	e02f      	b.n	8004726 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <HAL_RCC_OscConfig+0x4fc>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fc fe18 	bl	8001300 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fc fe14 	bl	8001300 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e020      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x498>
 80046f2:	e018      	b.n	8004726 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e013      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_RCC_OscConfig+0x4f4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	429a      	cmp	r2, r3
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
 8004738:	42420060 	.word	0x42420060

0800473c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0d0      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4b6a      	ldr	r3, [pc, #424]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d910      	bls.n	8004780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475e:	4b67      	ldr	r3, [pc, #412]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 0207 	bic.w	r2, r3, #7
 8004766:	4965      	ldr	r1, [pc, #404]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4313      	orrs	r3, r2
 800476c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b63      	ldr	r3, [pc, #396]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0b8      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004798:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b0:	4b53      	ldr	r3, [pc, #332]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a52      	ldr	r2, [pc, #328]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047bc:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	494d      	ldr	r1, [pc, #308]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d040      	beq.n	800485c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d115      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e07f      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e073      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480a:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e06b      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4936      	ldr	r1, [pc, #216]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800482c:	f7fc fd68 	bl	8001300 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	e00a      	b.n	800484a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fc fd64 	bl	8001300 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e053      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d1eb      	bne.n	8004834 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800485c:	4b27      	ldr	r3, [pc, #156]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d210      	bcs.n	800488c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 0207 	bic.w	r2, r3, #7
 8004872:	4922      	ldr	r1, [pc, #136]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	4313      	orrs	r3, r2
 8004878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d001      	beq.n	800488c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e032      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4916      	ldr	r1, [pc, #88]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	490e      	ldr	r1, [pc, #56]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ca:	f000 f821 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	490a      	ldr	r1, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x1c8>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1cc>)
 80048e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1d0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fcc6 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40022000 	.word	0x40022000
 8004900:	40021000 	.word	0x40021000
 8004904:	08008d74 	.word	0x08008d74
 8004908:	20000000 	.word	0x20000000
 800490c:	20000004 	.word	0x20000004

08004910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b490      	push	{r4, r7}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004918:	1d3c      	adds	r4, r7, #4
 800491a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800491c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004920:	f240 2301 	movw	r3, #513	; 0x201
 8004924:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800493a:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b04      	cmp	r3, #4
 8004948:	d002      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x40>
 800494a:	2b08      	cmp	r3, #8
 800494c:	d003      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x46>
 800494e:	e02d      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004950:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	623b      	str	r3, [r7, #32]
      break;
 8004954:	e02d      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	0c9b      	lsrs	r3, r3, #18
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004962:	4413      	add	r3, r2
 8004964:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004968:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	0c5b      	lsrs	r3, r3, #17
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004982:	4413      	add	r3, r2
 8004984:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004988:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800498e:	fb02 f203 	mul.w	r2, r2, r3
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e004      	b.n	80049a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ae:	623b      	str	r3, [r7, #32]
      break;
 80049b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b2:	6a3b      	ldr	r3, [r7, #32]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc90      	pop	{r4, r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	08008d1c 	.word	0x08008d1c
 80049c4:	40021000 	.word	0x40021000
 80049c8:	007a1200 	.word	0x007a1200
 80049cc:	003d0900 	.word	0x003d0900

080049d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d4:	4b02      	ldr	r3, [pc, #8]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr
 80049e0:	20000000 	.word	0x20000000

080049e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e8:	f7ff fff2 	bl	80049d0 <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4903      	ldr	r1, [pc, #12]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	08008d84 	.word	0x08008d84

08004a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <RCC_Delay+0x34>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <RCC_Delay+0x38>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0a5b      	lsrs	r3, r3, #9
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a28:	bf00      	nop
  }
  while (Delay --);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	60fa      	str	r2, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f9      	bne.n	8004a28 <RCC_Delay+0x1c>
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	20000000 	.word	0x20000000
 8004a44:	10624dd3 	.word	0x10624dd3

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d07d      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a68:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b4c      	ldr	r3, [pc, #304]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	4a4b      	ldr	r2, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	61d3      	str	r3, [r2, #28]
 8004a80:	4b49      	ldr	r3, [pc, #292]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4b46      	ldr	r3, [pc, #280]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d118      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a42      	ldr	r2, [pc, #264]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fc2a 	bl	8001300 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aae:	e008      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fc fc26 	bl	8001300 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e06d      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d027      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aec:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b02:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d014      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fc fbf5 	bl	8001300 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	e00a      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1a:	f7fc fbf1 	bl	8001300 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e036      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ee      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4917      	ldr	r1, [pc, #92]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	490b      	ldr	r1, [pc, #44]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4904      	ldr	r1, [pc, #16]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	42420440 	.word	0x42420440

08004bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	f107 0014 	add.w	r0, r7, #20
 8004bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	b004      	add	sp, #16
 8004bd2:	4770      	bx	lr

08004bd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004be4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004be8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4013      	ands	r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	f107 0014 	add.w	r0, r7, #20
 8004c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	b004      	add	sp, #16
 8004c8a:	4770      	bx	lr

08004c8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b09b      	sub	sp, #108	; 0x6c
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d81f      	bhi.n	8004cfe <USB_ActivateEndpoint+0x72>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <USB_ActivateEndpoint+0x38>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004d07 	.word	0x08004d07
 8004cd0:	08004ce3 	.word	0x08004ce3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ce0:	e012      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ce2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ce6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004cea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cee:	e00b      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cf8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cfc:	e004      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d04:	e000      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>
      break;
 8004d06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7b1b      	ldrb	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f040 8149 	bne.w	800500c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8084 	beq.w	8004e8c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	011a      	lsls	r2, r3, #4
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	88db      	ldrh	r3, [r3, #6]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	81fb      	strh	r3, [r7, #14]
 8004dc6:	89fb      	ldrh	r3, [r7, #14]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01b      	beq.n	8004e08 <USB_ActivateEndpoint+0x17c>
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	81bb      	strh	r3, [r7, #12]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	89bb      	ldrh	r3, [r7, #12]
 8004df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d020      	beq.n	8004e52 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e26:	813b      	strh	r3, [r7, #8]
 8004e28:	893b      	ldrh	r3, [r7, #8]
 8004e2a:	f083 0320 	eor.w	r3, r3, #32
 8004e2e:	813b      	strh	r3, [r7, #8]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	893b      	ldrh	r3, [r7, #8]
 8004e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]
 8004e50:	e27f      	b.n	8005352 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e68:	817b      	strh	r3, [r7, #10]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]
 8004e8a:	e262      	b.n	8005352 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	4413      	add	r3, r2
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	011a      	lsls	r2, r3, #4
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	88db      	ldrh	r3, [r3, #6]
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	4413      	add	r3, r2
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011a      	lsls	r2, r3, #4
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	4413      	add	r3, r2
 8004ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee2:	623b      	str	r3, [r7, #32]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d112      	bne.n	8004f12 <USB_ActivateEndpoint+0x286>
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	801a      	strh	r2, [r3, #0]
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e02f      	b.n	8004f72 <USB_ActivateEndpoint+0x2e6>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b3e      	cmp	r3, #62	; 0x3e
 8004f18:	d813      	bhi.n	8004f42 <USB_ActivateEndpoint+0x2b6>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	663b      	str	r3, [r7, #96]	; 0x60
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <USB_ActivateEndpoint+0x2a8>
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f30:	3301      	adds	r3, #1
 8004f32:	663b      	str	r3, [r7, #96]	; 0x60
 8004f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	e017      	b.n	8004f72 <USB_ActivateEndpoint+0x2e6>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <USB_ActivateEndpoint+0x2d0>
 8004f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	83fb      	strh	r3, [r7, #30]
 8004f80:	8bfb      	ldrh	r3, [r7, #30]
 8004f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01b      	beq.n	8004fc2 <USB_ActivateEndpoint+0x336>
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	83bb      	strh	r3, [r7, #28]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8bbb      	ldrh	r3, [r7, #28]
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd8:	837b      	strh	r3, [r7, #26]
 8004fda:	8b7b      	ldrh	r3, [r7, #26]
 8004fdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fe0:	837b      	strh	r3, [r7, #26]
 8004fe2:	8b7b      	ldrh	r3, [r7, #26]
 8004fe4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe8:	837b      	strh	r3, [r7, #26]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8b7b      	ldrh	r3, [r7, #26]
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
 800500a:	e1a2      	b.n	8005352 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	65bb      	str	r3, [r7, #88]	; 0x58
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005058:	4413      	add	r3, r2
 800505a:	65bb      	str	r3, [r7, #88]	; 0x58
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005064:	4413      	add	r3, r2
 8005066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506a:	657b      	str	r3, [r7, #84]	; 0x54
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	891b      	ldrh	r3, [r3, #8]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	b29b      	uxth	r3, r3
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	653b      	str	r3, [r7, #80]	; 0x50
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800508c:	4413      	add	r3, r2
 800508e:	653b      	str	r3, [r7, #80]	; 0x50
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	011a      	lsls	r2, r3, #4
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	4413      	add	r3, r2
 800509a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	895b      	ldrh	r3, [r3, #10]
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 8091 	bne.w	80051dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01b      	beq.n	800510a <USB_ActivateEndpoint+0x47e>
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	873b      	strh	r3, [r7, #56]	; 0x38
 8005118:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <USB_ActivateEndpoint+0x4ce>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	86fb      	strh	r3, [r7, #54]	; 0x36
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005156:	b29b      	uxth	r3, r3
 8005158:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005172:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005174:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005178:	86bb      	strh	r3, [r7, #52]	; 0x34
 800517a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800517c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005180:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]
 80051da:	e0ba      	b.n	8005352 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01d      	beq.n	8005234 <USB_ActivateEndpoint+0x5a8>
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800522c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005244:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01d      	beq.n	800528c <USB_ActivateEndpoint+0x600>
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	441a      	add	r2, r3
 8005274:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005288:	b29b      	uxth	r3, r3
 800528a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	78db      	ldrb	r3, [r3, #3]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d024      	beq.n	80052de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052b2:	f083 0320 	eor.w	r3, r3, #32
 80052b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d8:	b29b      	uxth	r3, r3
 80052da:	8013      	strh	r3, [r2, #0]
 80052dc:	e01d      	b.n	800531a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005356:	4618      	mov	r0, r3
 8005358:	376c      	adds	r7, #108	; 0x6c
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005360:	b480      	push	{r7}
 8005362:	b08d      	sub	sp, #52	; 0x34
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	7b1b      	ldrb	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 808e 	bne.w	8005490 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d044      	beq.n	8005406 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	81bb      	strh	r3, [r7, #12]
 800538a:	89bb      	ldrh	r3, [r7, #12]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <USB_DeactivateEndpoint+0x6c>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	817b      	strh	r3, [r7, #10]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	897b      	ldrh	r3, [r7, #10]
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e2:	813b      	strh	r3, [r7, #8]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]
 8005404:	e192      	b.n	800572c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	827b      	strh	r3, [r7, #18]
 8005414:	8a7b      	ldrh	r3, [r7, #18]
 8005416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01b      	beq.n	8005456 <USB_DeactivateEndpoint+0xf6>
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	823b      	strh	r3, [r7, #16]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	8a3b      	ldrh	r3, [r7, #16]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	81fb      	strh	r3, [r7, #14]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]
 800548e:	e14d      	b.n	800572c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 80a5 	bne.w	80055e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	843b      	strh	r3, [r7, #32]
 80054a8:	8c3b      	ldrh	r3, [r7, #32]
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01b      	beq.n	80054ea <USB_DeactivateEndpoint+0x18a>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	83fb      	strh	r3, [r7, #30]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	8bfb      	ldrh	r3, [r7, #30]
 80054d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	83bb      	strh	r3, [r7, #28]
 80054f8:	8bbb      	ldrh	r3, [r7, #28]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01b      	beq.n	800553a <USB_DeactivateEndpoint+0x1da>
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005518:	837b      	strh	r3, [r7, #26]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	441a      	add	r2, r3
 8005524:	8b7b      	ldrh	r3, [r7, #26]
 8005526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005536:	b29b      	uxth	r3, r3
 8005538:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005550:	833b      	strh	r3, [r7, #24]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	441a      	add	r2, r3
 800555c:	8b3b      	ldrh	r3, [r7, #24]
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	82fb      	strh	r3, [r7, #22]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	8afb      	ldrh	r3, [r7, #22]
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c0:	82bb      	strh	r3, [r7, #20]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	8abb      	ldrh	r3, [r7, #20]
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
 80055e2:	e0a3      	b.n	800572c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <USB_DeactivateEndpoint+0x2d4>
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <USB_DeactivateEndpoint+0x324>
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	853b      	strh	r3, [r7, #40]	; 0x28
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005680:	b29b      	uxth	r3, r3
 8005682:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	847b      	strh	r3, [r7, #34]	; 0x22
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005728:	b29b      	uxth	r3, r3
 800572a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3734      	adds	r7, #52	; 0x34
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b0cc      	sub	sp, #304	; 0x130
 800573c:	af00      	add	r7, sp, #0
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	6018      	str	r0, [r3, #0]
 8005742:	463b      	mov	r3, r7
 8005744:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005746:	463b      	mov	r3, r7
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 872e 	bne.w	80065ae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	463b      	mov	r3, r7
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	d905      	bls.n	800576e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800576c:	e004      	b.n	8005778 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800576e:	463b      	mov	r3, r7
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	7b1b      	ldrb	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d134      	bne.n	80057ec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6959      	ldr	r1, [r3, #20]
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	88da      	ldrh	r2, [r3, #6]
 800578e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005792:	b29b      	uxth	r3, r3
 8005794:	1d38      	adds	r0, r7, #4
 8005796:	6800      	ldr	r0, [r0, #0]
 8005798:	f001 fc03 	bl	8006fa2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800579c:	f107 0310 	add.w	r3, r7, #16
 80057a0:	1d3a      	adds	r2, r7, #4
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	f107 0310 	add.w	r3, r7, #16
 80057b6:	f107 0210 	add.w	r2, r7, #16
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	440a      	add	r2, r1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	011a      	lsls	r2, r3, #4
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	f000 beac 	b.w	8006544 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	78db      	ldrb	r3, [r3, #3]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	f040 838c 	bne.w	8005f10 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	463b      	mov	r3, r7
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	429a      	cmp	r2, r3
 8005806:	f240 8330 	bls.w	8005e6a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005824:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	441a      	add	r2, r3
 8005836:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005842:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005858:	1ad2      	subs	r2, r2, r3
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 819e 	beq.w	8005bb8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800587c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005880:	1d3a      	adds	r2, r7, #4
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d17a      	bne.n	8005986 <USB_EPStartXfer+0x24e>
 8005890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005894:	1d3a      	adds	r2, r7, #4
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	440a      	add	r2, r1
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	011a      	lsls	r2, r3, #4
 80058bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11a      	bne.n	800590c <USB_EPStartXfer+0x1d4>
 80058d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005900:	b29a      	uxth	r2, r3
 8005902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	801a      	strh	r2, [r3, #0]
 800590a:	e062      	b.n	80059d2 <USB_EPStartXfer+0x29a>
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	2b3e      	cmp	r3, #62	; 0x3e
 8005912:	d819      	bhi.n	8005948 <USB_EPStartXfer+0x210>
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800591e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <USB_EPStartXfer+0x1fc>
 800592a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800592e:	3301      	adds	r3, #1
 8005930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005938:	b29b      	uxth	r3, r3
 800593a:	029b      	lsls	r3, r3, #10
 800593c:	b29a      	uxth	r2, r3
 800593e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e044      	b.n	80059d2 <USB_EPStartXfer+0x29a>
 8005948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594c:	095b      	lsrs	r3, r3, #5
 800594e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <USB_EPStartXfer+0x230>
 800595e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005962:	3b01      	subs	r3, #1
 8005964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005968:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800596c:	b29b      	uxth	r3, r3
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	b29b      	uxth	r3, r3
 8005972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597a:	b29a      	uxth	r2, r3
 800597c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e025      	b.n	80059d2 <USB_EPStartXfer+0x29a>
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d120      	bne.n	80059d2 <USB_EPStartXfer+0x29a>
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005998:	b29b      	uxth	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	440a      	add	r2, r1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	895b      	ldrh	r3, [r3, #10]
 80059d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059dc:	463b      	mov	r3, r7
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6959      	ldr	r1, [r3, #20]
 80059e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059ec:	1d38      	adds	r0, r7, #4
 80059ee:	6800      	ldr	r0, [r0, #0]
 80059f0:	f001 fad7 	bl	8006fa2 <USB_WritePMA>
            ep->xfer_buff += len;
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fe:	441a      	add	r2, r3
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a1a      	ldr	r2, [r3, #32]
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d909      	bls.n	8005a2a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	621a      	str	r2, [r3, #32]
 8005a28:	e008      	b.n	8005a3c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a34:	463b      	mov	r3, r7
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d17a      	bne.n	8005b3c <USB_EPStartXfer+0x404>
 8005a46:	f107 0318 	add.w	r3, r7, #24
 8005a4a:	1d3a      	adds	r2, r7, #4
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	1d3b      	adds	r3, r7, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f107 0318 	add.w	r3, r7, #24
 8005a60:	f107 0218 	add.w	r2, r7, #24
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	440a      	add	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	f107 0318 	add.w	r3, r7, #24
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d11a      	bne.n	8005ac2 <USB_EPStartXfer+0x38a>
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e067      	b.n	8005b92 <USB_EPStartXfer+0x45a>
 8005ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac8:	d819      	bhi.n	8005afe <USB_EPStartXfer+0x3c6>
 8005aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <USB_EPStartXfer+0x3b2>
 8005ae0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005aea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	029b      	lsls	r3, r3, #10
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e049      	b.n	8005b92 <USB_EPStartXfer+0x45a>
 8005afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <USB_EPStartXfer+0x3e6>
 8005b14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	029b      	lsls	r3, r3, #10
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f107 0314 	add.w	r3, r7, #20
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	e02a      	b.n	8005b92 <USB_EPStartXfer+0x45a>
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d125      	bne.n	8005b92 <USB_EPStartXfer+0x45a>
 8005b46:	f107 0320 	add.w	r3, r7, #32
 8005b4a:	1d3a      	adds	r2, r7, #4
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	1d3b      	adds	r3, r7, #4
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f107 0320 	add.w	r3, r7, #32
 8005b60:	f107 0220 	add.w	r2, r7, #32
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	440a      	add	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	463b      	mov	r3, r7
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	011a      	lsls	r2, r3, #4
 8005b72:	f107 0320 	add.w	r3, r7, #32
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b7e:	f107 031c 	add.w	r3, r7, #28
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f107 031c 	add.w	r3, r7, #28
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	891b      	ldrh	r3, [r3, #8]
 8005b98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6959      	ldr	r1, [r3, #20]
 8005ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bac:	1d38      	adds	r0, r7, #4
 8005bae:	6800      	ldr	r0, [r0, #0]
 8005bb0:	f001 f9f7 	bl	8006fa2 <USB_WritePMA>
 8005bb4:	f000 bcc6 	b.w	8006544 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d164      	bne.n	8005c8c <USB_EPStartXfer+0x554>
 8005bc2:	1d3b      	adds	r3, r7, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd6:	4413      	add	r3, r2
 8005bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bda:	463b      	mov	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	011a      	lsls	r2, r3, #4
 8005be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be4:	4413      	add	r3, r2
 8005be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bea:	647b      	str	r3, [r7, #68]	; 0x44
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d112      	bne.n	8005c1a <USB_EPStartXfer+0x4e2>
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e057      	b.n	8005cca <USB_EPStartXfer+0x592>
 8005c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c20:	d817      	bhi.n	8005c52 <USB_EPStartXfer+0x51a>
 8005c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <USB_EPStartXfer+0x50a>
 8005c38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	e03b      	b.n	8005cca <USB_EPStartXfer+0x592>
 8005c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d104      	bne.n	8005c72 <USB_EPStartXfer+0x53a>
 8005c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	e01e      	b.n	8005cca <USB_EPStartXfer+0x592>
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d119      	bne.n	8005cca <USB_EPStartXfer+0x592>
 8005c96:	1d3b      	adds	r3, r7, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c9c:	1d3b      	adds	r3, r7, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005caa:	4413      	add	r3, r2
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
 8005cae:	463b      	mov	r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	891b      	ldrh	r3, [r3, #8]
 8005cd0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6959      	ldr	r1, [r3, #20]
 8005cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ce4:	1d38      	adds	r0, r7, #4
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	f001 f95b 	bl	8006fa2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf6:	441a      	add	r2, r3
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cfe:	463b      	mov	r3, r7
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	463b      	mov	r3, r7
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d909      	bls.n	8005d22 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a1a      	ldr	r2, [r3, #32]
 8005d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	621a      	str	r2, [r3, #32]
 8005d20:	e008      	b.n	8005d34 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2200      	movs	r2, #0
 8005d32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d164      	bne.n	8005e0e <USB_EPStartXfer+0x6d6>
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	4413      	add	r3, r2
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	011a      	lsls	r2, r3, #4
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	4413      	add	r3, r2
 8005d68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d112      	bne.n	8005d9c <USB_EPStartXfer+0x664>
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e054      	b.n	8005e46 <USB_EPStartXfer+0x70e>
 8005d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da0:	2b3e      	cmp	r3, #62	; 0x3e
 8005da2:	d817      	bhi.n	8005dd4 <USB_EPStartXfer+0x69c>
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <USB_EPStartXfer+0x68c>
 8005dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e038      	b.n	8005e46 <USB_EPStartXfer+0x70e>
 8005dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <USB_EPStartXfer+0x6bc>
 8005dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	e01b      	b.n	8005e46 <USB_EPStartXfer+0x70e>
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d116      	bne.n	8005e46 <USB_EPStartXfer+0x70e>
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e26:	4413      	add	r3, r2
 8005e28:	643b      	str	r3, [r7, #64]	; 0x40
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	895b      	ldrh	r3, [r3, #10]
 8005e4c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6959      	ldr	r1, [r3, #20]
 8005e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e60:	1d38      	adds	r0, r7, #4
 8005e62:	6800      	ldr	r0, [r0, #0]
 8005e64:	f001 f89d 	bl	8006fa2 <USB_WritePMA>
 8005e68:	e36c      	b.n	8006544 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebe:	1d3b      	adds	r3, r7, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ecc:	4413      	add	r3, r2
 8005ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	011a      	lsls	r2, r3, #4
 8005ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	891b      	ldrh	r3, [r3, #8]
 8005ef2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6959      	ldr	r1, [r3, #20]
 8005efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f06:	1d38      	adds	r0, r7, #4
 8005f08:	6800      	ldr	r0, [r0, #0]
 8005f0a:	f001 f84a 	bl	8006fa2 <USB_WritePMA>
 8005f0e:	e319      	b.n	8006544 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8162 	beq.w	8006246 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d164      	bne.n	800605e <USB_EPStartXfer+0x926>
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fa8:	4413      	add	r3, r2
 8005faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	011a      	lsls	r2, r3, #4
 8005fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8005fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d112      	bne.n	8005fec <USB_EPStartXfer+0x8b4>
 8005fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e057      	b.n	800609c <USB_EPStartXfer+0x964>
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff2:	d817      	bhi.n	8006024 <USB_EPStartXfer+0x8ec>
 8005ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <USB_EPStartXfer+0x8dc>
 800600a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800600e:	3301      	adds	r3, #1
 8006010:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006014:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006018:	b29b      	uxth	r3, r3
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	b29a      	uxth	r2, r3
 800601e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e03b      	b.n	800609c <USB_EPStartXfer+0x964>
 8006024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <USB_EPStartXfer+0x90c>
 800603a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800603e:	3b01      	subs	r3, #1
 8006040:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006044:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006056:	b29a      	uxth	r2, r3
 8006058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e01e      	b.n	800609c <USB_EPStartXfer+0x964>
 800605e:	463b      	mov	r3, r7
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d119      	bne.n	800609c <USB_EPStartXfer+0x964>
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006078:	4413      	add	r3, r2
 800607a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800607e:	463b      	mov	r3, r7
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	011a      	lsls	r2, r3, #4
 8006086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800608a:	4413      	add	r3, r2
 800608c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006090:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	b29a      	uxth	r2, r3
 8006098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800609a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	895b      	ldrh	r3, [r3, #10]
 80060a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6959      	ldr	r1, [r3, #20]
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060b6:	1d38      	adds	r0, r7, #4
 80060b8:	6800      	ldr	r0, [r0, #0]
 80060ba:	f000 ff72 	bl	8006fa2 <USB_WritePMA>
          ep->xfer_buff += len;
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	441a      	add	r2, r3
 80060ca:	463b      	mov	r3, r7
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	463b      	mov	r3, r7
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d909      	bls.n	80060f4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80060e0:	463b      	mov	r3, r7
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ea:	1ad2      	subs	r2, r2, r3
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	621a      	str	r2, [r3, #32]
 80060f2:	e008      	b.n	8006106 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 821a 	beq.w	8006544 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d164      	bne.n	80061e4 <USB_EPStartXfer+0xaac>
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006120:	1d3b      	adds	r3, r7, #4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800612e:	4413      	add	r3, r2
 8006130:	66bb      	str	r3, [r7, #104]	; 0x68
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011a      	lsls	r2, r3, #4
 800613a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800613c:	4413      	add	r3, r2
 800613e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006142:	667b      	str	r3, [r7, #100]	; 0x64
 8006144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d112      	bne.n	8006172 <USB_EPStartXfer+0xa3a>
 800614c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006156:	b29a      	uxth	r2, r3
 8006158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800616a:	b29a      	uxth	r2, r3
 800616c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800616e:	801a      	strh	r2, [r3, #0]
 8006170:	e057      	b.n	8006222 <USB_EPStartXfer+0xaea>
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	2b3e      	cmp	r3, #62	; 0x3e
 8006178:	d817      	bhi.n	80061aa <USB_EPStartXfer+0xa72>
 800617a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <USB_EPStartXfer+0xa62>
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006194:	3301      	adds	r3, #1
 8006196:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	b29b      	uxth	r3, r3
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e03b      	b.n	8006222 <USB_EPStartXfer+0xaea>
 80061aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <USB_EPStartXfer+0xa92>
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e0:	801a      	strh	r2, [r3, #0]
 80061e2:	e01e      	b.n	8006222 <USB_EPStartXfer+0xaea>
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d119      	bne.n	8006222 <USB_EPStartXfer+0xaea>
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	673b      	str	r3, [r7, #112]	; 0x70
 80061f4:	1d3b      	adds	r3, r7, #4
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006202:	4413      	add	r3, r2
 8006204:	673b      	str	r3, [r7, #112]	; 0x70
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006210:	4413      	add	r3, r2
 8006212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621c:	b29a      	uxth	r2, r3
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	891b      	ldrh	r3, [r3, #8]
 8006228:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6959      	ldr	r1, [r3, #20]
 8006232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006236:	b29b      	uxth	r3, r3
 8006238:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800623c:	1d38      	adds	r0, r7, #4
 800623e:	6800      	ldr	r0, [r0, #0]
 8006240:	f000 feaf 	bl	8006fa2 <USB_WritePMA>
 8006244:	e17e      	b.n	8006544 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d16f      	bne.n	8006330 <USB_EPStartXfer+0xbf8>
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006260:	b29b      	uxth	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006268:	4413      	add	r3, r2
 800626a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800626e:	463b      	mov	r3, r7
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	011a      	lsls	r2, r3, #4
 8006276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800627a:	4413      	add	r3, r2
 800627c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d116      	bne.n	80062ba <USB_EPStartXfer+0xb82>
 800628c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006298:	b29a      	uxth	r2, r3
 800629a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	e05f      	b.n	800637a <USB_EPStartXfer+0xc42>
 80062ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062be:	2b3e      	cmp	r3, #62	; 0x3e
 80062c0:	d818      	bhi.n	80062f4 <USB_EPStartXfer+0xbbc>
 80062c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <USB_EPStartXfer+0xbaa>
 80062d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062dc:	3301      	adds	r3, #1
 80062de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	029b      	lsls	r3, r3, #10
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	e042      	b.n	800637a <USB_EPStartXfer+0xc42>
 80062f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80062fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <USB_EPStartXfer+0xbdc>
 800630a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800630e:	3b01      	subs	r3, #1
 8006310:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006314:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006318:	b29b      	uxth	r3, r3
 800631a:	029b      	lsls	r3, r3, #10
 800631c:	b29b      	uxth	r3, r3
 800631e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006326:	b29a      	uxth	r2, r3
 8006328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	e024      	b.n	800637a <USB_EPStartXfer+0xc42>
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d11f      	bne.n	800637a <USB_EPStartXfer+0xc42>
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006352:	4413      	add	r3, r2
 8006354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	011a      	lsls	r2, r3, #4
 8006360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006364:	4413      	add	r3, r2
 8006366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800636a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	b29a      	uxth	r2, r3
 8006374:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006378:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800637a:	463b      	mov	r3, r7
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	891b      	ldrh	r3, [r3, #8]
 8006380:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6959      	ldr	r1, [r3, #20]
 800638a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638e:	b29b      	uxth	r3, r3
 8006390:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006394:	1d38      	adds	r0, r7, #4
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	f000 fe03 	bl	8006fa2 <USB_WritePMA>
          ep->xfer_buff += len;
 800639c:	463b      	mov	r3, r7
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695a      	ldr	r2, [r3, #20]
 80063a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063a6:	441a      	add	r2, r3
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a1a      	ldr	r2, [r3, #32]
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d909      	bls.n	80063d2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c8:	1ad2      	subs	r2, r2, r3
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	621a      	str	r2, [r3, #32]
 80063d0:	e008      	b.n	80063e4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2200      	movs	r2, #0
 80063e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80063e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80ab 	beq.w	8006544 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063f6:	463b      	mov	r3, r7
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	785b      	ldrb	r3, [r3, #1]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d16f      	bne.n	80064e0 <USB_EPStartXfer+0xda8>
 8006400:	1d3b      	adds	r3, r7, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006410:	b29b      	uxth	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006418:	4413      	add	r3, r2
 800641a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	011a      	lsls	r2, r3, #4
 8006426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800642a:	4413      	add	r3, r2
 800642c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d116      	bne.n	800646a <USB_EPStartXfer+0xd32>
 800643c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e05b      	b.n	8006522 <USB_EPStartXfer+0xdea>
 800646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646e:	2b3e      	cmp	r3, #62	; 0x3e
 8006470:	d818      	bhi.n	80064a4 <USB_EPStartXfer+0xd6c>
 8006472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800647c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <USB_EPStartXfer+0xd5a>
 8006488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800648c:	3301      	adds	r3, #1
 800648e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006496:	b29b      	uxth	r3, r3
 8006498:	029b      	lsls	r3, r3, #10
 800649a:	b29a      	uxth	r2, r3
 800649c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e03e      	b.n	8006522 <USB_EPStartXfer+0xdea>
 80064a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <USB_EPStartXfer+0xd8c>
 80064ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064be:	3b01      	subs	r3, #1
 80064c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80064c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	e020      	b.n	8006522 <USB_EPStartXfer+0xdea>
 80064e0:	463b      	mov	r3, r7
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d11b      	bne.n	8006522 <USB_EPStartXfer+0xdea>
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064fa:	4413      	add	r3, r2
 80064fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006500:	463b      	mov	r3, r7
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	011a      	lsls	r2, r3, #4
 8006508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800650c:	4413      	add	r3, r2
 800650e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006520:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	895b      	ldrh	r3, [r3, #10]
 8006528:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6959      	ldr	r1, [r3, #20]
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	b29b      	uxth	r3, r3
 8006538:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800653c:	1d38      	adds	r0, r7, #4
 800653e:	6800      	ldr	r0, [r0, #0]
 8006540:	f000 fd2f 	bl	8006fa2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f107 020a 	add.w	r2, r7, #10
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006562:	8013      	strh	r3, [r2, #0]
 8006564:	f107 030a 	add.w	r3, r7, #10
 8006568:	f107 020a 	add.w	r2, r7, #10
 800656c:	8812      	ldrh	r2, [r2, #0]
 800656e:	f082 0210 	eor.w	r2, r2, #16
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	f107 030a 	add.w	r3, r7, #10
 8006578:	f107 020a 	add.w	r2, r7, #10
 800657c:	8812      	ldrh	r2, [r2, #0]
 800657e:	f082 0220 	eor.w	r2, r2, #32
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	463b      	mov	r3, r7
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	441a      	add	r2, r3
 8006592:	f107 030a 	add.w	r3, r7, #10
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	8013      	strh	r3, [r2, #0]
 80065ac:	e3b5      	b.n	8006d1a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	7b1b      	ldrb	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 8090 	bne.w	80066da <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699a      	ldr	r2, [r3, #24]
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d90e      	bls.n	80065e8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	619a      	str	r2, [r3, #24]
 80065e6:	e008      	b.n	80065fa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2200      	movs	r2, #0
 80065f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006612:	4413      	add	r3, r2
 8006614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006618:	463b      	mov	r3, r7
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	011a      	lsls	r2, r3, #4
 8006620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006624:	4413      	add	r3, r2
 8006626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800662a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800662e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d116      	bne.n	8006664 <USB_EPStartXfer+0xf2c>
 8006636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665a:	b29a      	uxth	r2, r3
 800665c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e32c      	b.n	8006cbe <USB_EPStartXfer+0x1586>
 8006664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006668:	2b3e      	cmp	r3, #62	; 0x3e
 800666a:	d818      	bhi.n	800669e <USB_EPStartXfer+0xf66>
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <USB_EPStartXfer+0xf54>
 8006682:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006686:	3301      	adds	r3, #1
 8006688:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800668c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006690:	b29b      	uxth	r3, r3
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e30f      	b.n	8006cbe <USB_EPStartXfer+0x1586>
 800669e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <USB_EPStartXfer+0xf86>
 80066b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066b8:	3b01      	subs	r3, #1
 80066ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	e2f1      	b.n	8006cbe <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	78db      	ldrb	r3, [r3, #3]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	f040 818f 	bne.w	8006a04 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066e6:	463b      	mov	r3, r7
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d175      	bne.n	80067dc <USB_EPStartXfer+0x10a4>
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006708:	4413      	add	r3, r2
 800670a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800670e:	463b      	mov	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	011a      	lsls	r2, r3, #4
 8006716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800671a:	4413      	add	r3, r2
 800671c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d116      	bne.n	800675c <USB_EPStartXfer+0x1024>
 800672e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800673a:	b29a      	uxth	r2, r3
 800673c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800674e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006752:	b29a      	uxth	r2, r3
 8006754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006758:	801a      	strh	r2, [r3, #0]
 800675a:	e065      	b.n	8006828 <USB_EPStartXfer+0x10f0>
 800675c:	463b      	mov	r3, r7
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b3e      	cmp	r3, #62	; 0x3e
 8006764:	d81a      	bhi.n	800679c <USB_EPStartXfer+0x1064>
 8006766:	463b      	mov	r3, r7
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006772:	463b      	mov	r3, r7
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0x1052>
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678e:	b29b      	uxth	r3, r3
 8006790:	029b      	lsls	r3, r3, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e045      	b.n	8006828 <USB_EPStartXfer+0x10f0>
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067a8:	463b      	mov	r3, r7
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <USB_EPStartXfer+0x1088>
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ba:	3b01      	subs	r3, #1
 80067bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	029b      	lsls	r3, r3, #10
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e025      	b.n	8006828 <USB_EPStartXfer+0x10f0>
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d120      	bne.n	8006828 <USB_EPStartXfer+0x10f0>
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fe:	4413      	add	r3, r2
 8006800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	011a      	lsls	r2, r3, #4
 800680c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006810:	4413      	add	r3, r2
 8006812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006816:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	785b      	ldrb	r3, [r3, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d175      	bne.n	8006926 <USB_EPStartXfer+0x11ee>
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006842:	1d3b      	adds	r3, r7, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006852:	4413      	add	r3, r2
 8006854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006858:	463b      	mov	r3, r7
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	011a      	lsls	r2, r3, #4
 8006860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006864:	4413      	add	r3, r2
 8006866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800686a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d116      	bne.n	80068a6 <USB_EPStartXfer+0x116e>
 8006878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006884:	b29a      	uxth	r2, r3
 8006886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	e061      	b.n	800696a <USB_EPStartXfer+0x1232>
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b3e      	cmp	r3, #62	; 0x3e
 80068ae:	d81a      	bhi.n	80068e6 <USB_EPStartXfer+0x11ae>
 80068b0:	463b      	mov	r3, r7
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <USB_EPStartXfer+0x119c>
 80068ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068ce:	3301      	adds	r3, #1
 80068d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068d8:	b29b      	uxth	r3, r3
 80068da:	029b      	lsls	r3, r3, #10
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	e041      	b.n	800696a <USB_EPStartXfer+0x1232>
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <USB_EPStartXfer+0x11d2>
 8006900:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006904:	3b01      	subs	r3, #1
 8006906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800690a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800690e:	b29b      	uxth	r3, r3
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	e021      	b.n	800696a <USB_EPStartXfer+0x1232>
 8006926:	463b      	mov	r3, r7
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d11c      	bne.n	800696a <USB_EPStartXfer+0x1232>
 8006930:	1d3b      	adds	r3, r7, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006940:	4413      	add	r3, r2
 8006942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006952:	4413      	add	r3, r2
 8006954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800695c:	463b      	mov	r3, r7
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	b29a      	uxth	r2, r3
 8006964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006968:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 81a4 	beq.w	8006cbe <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006976:	1d3b      	adds	r3, r7, #4
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	463b      	mov	r3, r7
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800698a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800698e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <USB_EPStartXfer+0x126a>
 8006996:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10d      	bne.n	80069be <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 8187 	bne.w	8006cbe <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f040 8180 	bne.w	8006cbe <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80069dc:	1d3b      	adds	r3, r7, #4
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	463b      	mov	r3, r7
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
 8006a02:	e15c      	b.n	8006cbe <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a04:	463b      	mov	r3, r7
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	78db      	ldrb	r3, [r3, #3]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	f040 8155 	bne.w	8006cba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a10:	463b      	mov	r3, r7
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	463b      	mov	r3, r7
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d90e      	bls.n	8006a3e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006a20:	463b      	mov	r3, r7
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	463b      	mov	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	619a      	str	r2, [r3, #24]
 8006a3c:	e008      	b.n	8006a50 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006a3e:	463b      	mov	r3, r7
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006a48:	463b      	mov	r3, r7
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a50:	463b      	mov	r3, r7
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d16f      	bne.n	8006b3a <USB_EPStartXfer+0x1402>
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a62:	1d3b      	adds	r3, r7, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a72:	4413      	add	r3, r2
 8006a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	011a      	lsls	r2, r3, #4
 8006a80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a84:	4413      	add	r3, r2
 8006a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d116      	bne.n	8006ac4 <USB_EPStartXfer+0x138c>
 8006a96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ac0:	801a      	strh	r2, [r3, #0]
 8006ac2:	e05f      	b.n	8006b84 <USB_EPStartXfer+0x144c>
 8006ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aca:	d818      	bhi.n	8006afe <USB_EPStartXfer+0x13c6>
 8006acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USB_EPStartXfer+0x13b4>
 8006ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	e042      	b.n	8006b84 <USB_EPStartXfer+0x144c>
 8006afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <USB_EPStartXfer+0x13e6>
 8006b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	029b      	lsls	r3, r3, #10
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	e024      	b.n	8006b84 <USB_EPStartXfer+0x144c>
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d11f      	bne.n	8006b84 <USB_EPStartXfer+0x144c>
 8006b44:	1d3b      	adds	r3, r7, #4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	011a      	lsls	r2, r3, #4
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d16f      	bne.n	8006c76 <USB_EPStartXfer+0x153e>
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bae:	4413      	add	r3, r2
 8006bb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	011a      	lsls	r2, r3, #4
 8006bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <USB_EPStartXfer+0x14c8>
 8006bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	e05e      	b.n	8006cbe <USB_EPStartXfer+0x1586>
 8006c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c04:	2b3e      	cmp	r3, #62	; 0x3e
 8006c06:	d818      	bhi.n	8006c3a <USB_EPStartXfer+0x1502>
 8006c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0c:	085b      	lsrs	r3, r3, #1
 8006c0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <USB_EPStartXfer+0x14f0>
 8006c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c22:	3301      	adds	r3, #1
 8006c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	029b      	lsls	r3, r3, #10
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	e041      	b.n	8006cbe <USB_EPStartXfer+0x1586>
 8006c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <USB_EPStartXfer+0x1522>
 8006c50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c54:	3b01      	subs	r3, #1
 8006c56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	029b      	lsls	r3, r3, #10
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e023      	b.n	8006cbe <USB_EPStartXfer+0x1586>
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d11e      	bne.n	8006cbe <USB_EPStartXfer+0x1586>
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	4413      	add	r3, r2
 8006c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c96:	463b      	mov	r3, r7
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	011a      	lsls	r2, r3, #4
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e001      	b.n	8006cbe <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e02e      	b.n	8006d1c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006cdc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ce0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ce4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ce8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006cec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cf0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	441a      	add	r2, r3
 8006d02:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d020      	beq.n	8006d7a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4e:	81bb      	strh	r3, [r7, #12]
 8006d50:	89bb      	ldrh	r3, [r7, #12]
 8006d52:	f083 0310 	eor.w	r3, r3, #16
 8006d56:	81bb      	strh	r3, [r7, #12]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	89bb      	ldrh	r3, [r7, #12]
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]
 8006d78:	e01f      	b.n	8006dba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	81fb      	strh	r3, [r7, #14]
 8006d92:	89fb      	ldrh	r3, [r7, #14]
 8006d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d98:	81fb      	strh	r3, [r7, #14]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	89fb      	ldrh	r3, [r7, #14]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr

08006dc6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f040 809d 	bne.w	8006f14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d04c      	beq.n	8006e7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	823b      	strh	r3, [r7, #16]
 8006df0:	8a3b      	ldrh	r3, [r7, #16]
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01b      	beq.n	8006e32 <USB_EPClearStall+0x6c>
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e10:	81fb      	strh	r3, [r7, #14]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	89fb      	ldrh	r3, [r7, #14]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d06c      	beq.n	8006f14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e50:	81bb      	strh	r3, [r7, #12]
 8006e52:	89bb      	ldrh	r3, [r7, #12]
 8006e54:	f083 0320 	eor.w	r3, r3, #32
 8006e58:	81bb      	strh	r3, [r7, #12]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	89bb      	ldrh	r3, [r7, #12]
 8006e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	8013      	strh	r3, [r2, #0]
 8006e7a:	e04b      	b.n	8006f14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	82fb      	strh	r3, [r7, #22]
 8006e8a:	8afb      	ldrh	r3, [r7, #22]
 8006e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01b      	beq.n	8006ecc <USB_EPClearStall+0x106>
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	82bb      	strh	r3, [r7, #20]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	8abb      	ldrh	r3, [r7, #20]
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee2:	827b      	strh	r3, [r7, #18]
 8006ee4:	8a7b      	ldrh	r3, [r7, #18]
 8006ee6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eea:	827b      	strh	r3, [r7, #18]
 8006eec:	8a7b      	ldrh	r3, [r7, #18]
 8006eee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ef2:	827b      	strh	r3, [r7, #18]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	441a      	add	r2, r3
 8006efe:	8a7b      	ldrh	r3, [r7, #18]
 8006f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2280      	movs	r2, #128	; 0x80
 8006f36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr

08006f5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f80:	68fb      	ldr	r3, [r7, #12]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr

08006f8c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b08d      	sub	sp, #52	; 0x34
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	4611      	mov	r1, r2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	80fb      	strh	r3, [r7, #6]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fb8:	88bb      	ldrh	r3, [r7, #4]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	005a      	lsls	r2, r3, #1
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fda:	e01e      	b.n	800701a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	3302      	adds	r3, #2
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	3302      	adds	r3, #2
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	3301      	adds	r3, #1
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	3b01      	subs	r3, #1
 8007018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1dd      	bne.n	8006fdc <USB_WritePMA+0x3a>
  }
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	3734      	adds	r7, #52	; 0x34
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800702c:	b480      	push	{r7}
 800702e:	b08b      	sub	sp, #44	; 0x2c
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4611      	mov	r1, r2
 8007038:	461a      	mov	r2, r3
 800703a:	460b      	mov	r3, r1
 800703c:	80fb      	strh	r3, [r7, #6]
 800703e:	4613      	mov	r3, r2
 8007040:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007042:	88bb      	ldrh	r3, [r7, #4]
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	005a      	lsls	r2, r3, #1
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
 8007064:	e01b      	b.n	800709e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	3302      	adds	r3, #2
 8007072:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	b2da      	uxtb	r2, r3
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	3301      	adds	r3, #1
 8007080:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	b2da      	uxtb	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	3301      	adds	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	3302      	adds	r3, #2
 8007096:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	3b01      	subs	r3, #1
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e0      	bne.n	8007066 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070a4:	88bb      	ldrh	r3, [r7, #4]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	701a      	strb	r2, [r3, #0]
  }
}
 80070c0:	bf00      	nop
 80070c2:	372c      	adds	r7, #44	; 0x2c
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80070d6:	2304      	movs	r3, #4
 80070d8:	2203      	movs	r2, #3
 80070da:	2181      	movs	r1, #129	; 0x81
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fc84 	bl	80089ea <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80070e8:	2010      	movs	r0, #16
 80070ea:	f001 fd93 	bl	8008c14 <USBD_static_malloc>
 80070ee:	4602      	mov	r2, r0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007100:	2302      	movs	r3, #2
 8007102:	e005      	b.n	8007110 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	2200      	movs	r2, #0
 800710c:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007124:	2181      	movs	r1, #129	; 0x81
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fc85 	bl	8008a36 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d009      	beq.n	8007150 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fd72 	bl	8008c2c <USBD_static_free>
    pdev->pClassData = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007186:	2b00      	cmp	r3, #0
 8007188:	d045      	beq.n	8007216 <USBD_HID_Setup+0xba>
 800718a:	2b20      	cmp	r3, #32
 800718c:	f040 80d3 	bne.w	8007336 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	3b02      	subs	r3, #2
 8007196:	2b09      	cmp	r3, #9
 8007198:	d835      	bhi.n	8007206 <USBD_HID_Setup+0xaa>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <USBD_HID_Setup+0x44>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071f7 	.word	0x080071f7
 80071a4:	080071d7 	.word	0x080071d7
 80071a8:	08007207 	.word	0x08007207
 80071ac:	08007207 	.word	0x08007207
 80071b0:	08007207 	.word	0x08007207
 80071b4:	08007207 	.word	0x08007207
 80071b8:	08007207 	.word	0x08007207
 80071bc:	08007207 	.word	0x08007207
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071c9 	.word	0x080071c9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	885b      	ldrh	r3, [r3, #2]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	601a      	str	r2, [r3, #0]
          break;
 80071d4:	e01e      	b.n	8007214 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2201      	movs	r2, #1
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 f944 	bl	800846a <USBD_CtlSendData>
          break;
 80071e2:	e017      	b.n	8007214 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	0a1b      	lsrs	r3, r3, #8
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	605a      	str	r2, [r3, #4]
          break;
 80071f4:	e00e      	b.n	8007214 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3304      	adds	r3, #4
 80071fa:	2201      	movs	r2, #1
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f933 	bl	800846a <USBD_CtlSendData>
          break;
 8007204:	e006      	b.n	8007214 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f8c4 	bl	8008396 <USBD_CtlError>
          ret = USBD_FAIL;
 800720e:	2302      	movs	r3, #2
 8007210:	75fb      	strb	r3, [r7, #23]
          break;
 8007212:	bf00      	nop
      }
      break;
 8007214:	e096      	b.n	8007344 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b0b      	cmp	r3, #11
 800721c:	f200 8083 	bhi.w	8007326 <USBD_HID_Setup+0x1ca>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <USBD_HID_Setup+0xcc>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007259 	.word	0x08007259
 800722c:	08007327 	.word	0x08007327
 8007230:	08007327 	.word	0x08007327
 8007234:	08007327 	.word	0x08007327
 8007238:	08007327 	.word	0x08007327
 800723c:	08007327 	.word	0x08007327
 8007240:	08007281 	.word	0x08007281
 8007244:	08007327 	.word	0x08007327
 8007248:	08007327 	.word	0x08007327
 800724c:	08007327 	.word	0x08007327
 8007250:	080072d9 	.word	0x080072d9
 8007254:	08007301 	.word	0x08007301
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725e:	2b03      	cmp	r3, #3
 8007260:	d107      	bne.n	8007272 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007262:	f107 030e 	add.w	r3, r7, #14
 8007266:	2202      	movs	r2, #2
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 f8fd 	bl	800846a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007270:	e060      	b.n	8007334 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f88e 	bl	8008396 <USBD_CtlError>
            ret = USBD_FAIL;
 800727a:	2302      	movs	r3, #2
 800727c:	75fb      	strb	r3, [r7, #23]
          break;
 800727e:	e059      	b.n	8007334 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	885b      	ldrh	r3, [r3, #2]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b22      	cmp	r3, #34	; 0x22
 800728a:	d108      	bne.n	800729e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	2b4a      	cmp	r3, #74	; 0x4a
 8007292:	bf28      	it	cs
 8007294:	234a      	movcs	r3, #74	; 0x4a
 8007296:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007298:	4b2d      	ldr	r3, [pc, #180]	; (8007350 <USBD_HID_Setup+0x1f4>)
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e015      	b.n	80072ca <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	885b      	ldrh	r3, [r3, #2]
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b21      	cmp	r3, #33	; 0x21
 80072a8:	d108      	bne.n	80072bc <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80072aa:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <USBD_HID_Setup+0x1f8>)
 80072ac:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	2b09      	cmp	r3, #9
 80072b4:	bf28      	it	cs
 80072b6:	2309      	movcs	r3, #9
 80072b8:	83fb      	strh	r3, [r7, #30]
 80072ba:	e006      	b.n	80072ca <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f869 	bl	8008396 <USBD_CtlError>
            ret = USBD_FAIL;
 80072c4:	2302      	movs	r3, #2
 80072c6:	75fb      	strb	r3, [r7, #23]
            break;
 80072c8:	e034      	b.n	8007334 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80072ca:	8bfb      	ldrh	r3, [r7, #30]
 80072cc:	461a      	mov	r2, r3
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f8ca 	bl	800846a <USBD_CtlSendData>
          break;
 80072d6:	e02d      	b.n	8007334 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d107      	bne.n	80072f2 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3308      	adds	r3, #8
 80072e6:	2201      	movs	r2, #1
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f8bd 	bl	800846a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072f0:	e020      	b.n	8007334 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f84e 	bl	8008396 <USBD_CtlError>
            ret = USBD_FAIL;
 80072fa:	2302      	movs	r3, #2
 80072fc:	75fb      	strb	r3, [r7, #23]
          break;
 80072fe:	e019      	b.n	8007334 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007306:	2b03      	cmp	r3, #3
 8007308:	d106      	bne.n	8007318 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007316:	e00d      	b.n	8007334 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f83b 	bl	8008396 <USBD_CtlError>
            ret = USBD_FAIL;
 8007320:	2302      	movs	r3, #2
 8007322:	75fb      	strb	r3, [r7, #23]
          break;
 8007324:	e006      	b.n	8007334 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f001 f834 	bl	8008396 <USBD_CtlError>
          ret = USBD_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	75fb      	strb	r3, [r7, #23]
          break;
 8007332:	bf00      	nop
      }
      break;
 8007334:	e006      	b.n	8007344 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f82c 	bl	8008396 <USBD_CtlError>
      ret = USBD_FAIL;
 800733e:	2302      	movs	r3, #2
 8007340:	75fb      	strb	r3, [r7, #23]
      break;
 8007342:	bf00      	nop
  }

  return ret;
 8007344:	7dfb      	ldrb	r3, [r7, #23]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200000c8 	.word	0x200000c8
 8007354:	200000b0 	.word	0x200000b0

08007358 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	2b03      	cmp	r3, #3
 8007376:	d10c      	bne.n	8007392 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	7b1b      	ldrb	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d108      	bne.n	8007392 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2201      	movs	r2, #1
 8007384:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	2181      	movs	r1, #129	; 0x81
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f001 fbfa 	bl	8008b86 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2222      	movs	r2, #34	; 0x22
 80073a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80073aa:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000044 	.word	0x20000044

080073bc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2222      	movs	r2, #34	; 0x22
 80073c8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80073ca:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000068 	.word	0x20000068

080073dc <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2222      	movs	r2, #34	; 0x22
 80073e8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80073ea:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	2000008c 	.word	0x2000008c

080073fc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740e:	2200      	movs	r2, #0
 8007410:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr
	...

08007420 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220a      	movs	r2, #10
 800742c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800742e:	4b03      	ldr	r3, [pc, #12]	; (800743c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	200000bc 	.word	0x200000bc

08007440 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007454:	2302      	movs	r3, #2
 8007456:	e01a      	b.n	800748e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	79fa      	ldrb	r2, [r7, #7]
 8007484:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 fa4c 	bl	8008924 <USBD_LL_Init>

  return USBD_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d006      	beq.n	80074b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	e001      	b.n	80074bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80074b8:	2302      	movs	r3, #2
 80074ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 fa6f 	bl	80089b4 <USBD_LL_Start>

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007500:	2302      	movs	r3, #2
 8007502:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00c      	beq.n	8007528 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	460b      	mov	r3, r1
 800753c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	78fa      	ldrb	r2, [r7, #3]
 8007548:	4611      	mov	r1, r2
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fed7 	bl	800831e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800757e:	461a      	mov	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	2b02      	cmp	r3, #2
 8007592:	d016      	beq.n	80075c2 <USBD_LL_SetupStage+0x6a>
 8007594:	2b02      	cmp	r3, #2
 8007596:	d81c      	bhi.n	80075d2 <USBD_LL_SetupStage+0x7a>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <USBD_LL_SetupStage+0x4a>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d008      	beq.n	80075b2 <USBD_LL_SetupStage+0x5a>
 80075a0:	e017      	b.n	80075d2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f9ca 	bl	8007944 <USBD_StdDevReq>
      break;
 80075b0:	e01a      	b.n	80075e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa2c 	bl	8007a18 <USBD_StdItfReq>
      break;
 80075c0:	e012      	b.n	80075e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa6c 	bl	8007aa8 <USBD_StdEPReq>
      break;
 80075d0:	e00a      	b.n	80075e8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80075d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fa47 	bl	8008a74 <USBD_LL_StallEP>
      break;
 80075e6:	bf00      	nop
  }

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	460b      	mov	r3, r1
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d14b      	bne.n	800769e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800760c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007614:	2b03      	cmp	r3, #3
 8007616:	d134      	bne.n	8007682 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	d919      	bls.n	8007658 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	1ad2      	subs	r2, r2, r3
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800763a:	429a      	cmp	r2, r3
 800763c:	d203      	bcs.n	8007646 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007642:	b29b      	uxth	r3, r3
 8007644:	e002      	b.n	800764c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 ff38 	bl	80084c6 <USBD_CtlContinueRx>
 8007656:	e038      	b.n	80076ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800766a:	2b03      	cmp	r3, #3
 800766c:	d105      	bne.n	800767a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 ff35 	bl	80084ea <USBD_CtlSendStatus>
 8007680:	e023      	b.n	80076ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007688:	2b05      	cmp	r3, #5
 800768a:	d11e      	bne.n	80076ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007694:	2100      	movs	r1, #0
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f001 f9ec 	bl	8008a74 <USBD_LL_StallEP>
 800769c:	e015      	b.n	80076ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d108      	bne.n	80076c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	7afa      	ldrb	r2, [r7, #11]
 80076be:	4611      	mov	r1, r2
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	4798      	blx	r3
 80076c4:	e001      	b.n	80076ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076c6:	2302      	movs	r3, #2
 80076c8:	e000      	b.n	80076cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	460b      	mov	r3, r1
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d17f      	bne.n	80077e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3314      	adds	r3, #20
 80076ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d15c      	bne.n	80077b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	429a      	cmp	r2, r3
 8007702:	d915      	bls.n	8007730 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	1ad2      	subs	r2, r2, r3
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	b29b      	uxth	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fec0 	bl	80084a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007722:	2300      	movs	r3, #0
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f001 fa4f 	bl	8008bcc <USBD_LL_PrepareReceive>
 800772e:	e04e      	b.n	80077ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	6912      	ldr	r2, [r2, #16]
 8007738:	fbb3 f1f2 	udiv	r1, r3, r2
 800773c:	fb02 f201 	mul.w	r2, r2, r1
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d11c      	bne.n	8007780 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800774e:	429a      	cmp	r2, r3
 8007750:	d316      	bcc.n	8007780 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800775c:	429a      	cmp	r2, r3
 800775e:	d20f      	bcs.n	8007780 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007760:	2200      	movs	r2, #0
 8007762:	2100      	movs	r1, #0
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fe9c 	bl	80084a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007772:	2300      	movs	r3, #0
 8007774:	2200      	movs	r2, #0
 8007776:	2100      	movs	r1, #0
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f001 fa27 	bl	8008bcc <USBD_LL_PrepareReceive>
 800777e:	e026      	b.n	80077ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007792:	2b03      	cmp	r3, #3
 8007794:	d105      	bne.n	80077a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80077a2:	2180      	movs	r1, #128	; 0x80
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 f965 	bl	8008a74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 feb0 	bl	8008510 <USBD_CtlReceiveStatus>
 80077b0:	e00d      	b.n	80077ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d004      	beq.n	80077c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d103      	bne.n	80077ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80077c6:	2180      	movs	r1, #128	; 0x80
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 f953 	bl	8008a74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d11d      	bne.n	8007814 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7ff fe81 	bl	80074e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80077e6:	e015      	b.n	8007814 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d108      	bne.n	8007810 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	7afa      	ldrb	r2, [r7, #11]
 8007808:	4611      	mov	r1, r2
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	4798      	blx	r3
 800780e:	e001      	b.n	8007814 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007810:	2302      	movs	r3, #2
 8007812:	e000      	b.n	8007816 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007826:	2340      	movs	r3, #64	; 0x40
 8007828:	2200      	movs	r2, #0
 800782a:	2100      	movs	r1, #0
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f8dc 	bl	80089ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2240      	movs	r2, #64	; 0x40
 800783e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	2200      	movs	r2, #0
 8007846:	2180      	movs	r1, #128	; 0x80
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 f8ce 	bl	80089ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2240      	movs	r2, #64	; 0x40
 8007858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	4611      	mov	r1, r2
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
  }

  return USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2204      	movs	r2, #4
 80078d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d105      	bne.n	8007904 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791e:	2b03      	cmp	r3, #3
 8007920:	d10b      	bne.n	800793a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d005      	beq.n	800796a <USBD_StdDevReq+0x26>
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d84f      	bhi.n	8007a02 <USBD_StdDevReq+0xbe>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <USBD_StdDevReq+0x36>
 8007966:	2b20      	cmp	r3, #32
 8007968:	d14b      	bne.n	8007a02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
      break;
 8007978:	e048      	b.n	8007a0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d839      	bhi.n	80079f6 <USBD_StdDevReq+0xb2>
 8007982:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <USBD_StdDevReq+0x44>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079d9 	.word	0x080079d9
 800798c:	080079ed 	.word	0x080079ed
 8007990:	080079f7 	.word	0x080079f7
 8007994:	080079e3 	.word	0x080079e3
 8007998:	080079f7 	.word	0x080079f7
 800799c:	080079bb 	.word	0x080079bb
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079f7 	.word	0x080079f7
 80079a8:	080079cf 	.word	0x080079cf
 80079ac:	080079c5 	.word	0x080079c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9dc 	bl	8007d70 <USBD_GetDescriptor>
          break;
 80079b8:	e022      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fb3f 	bl	8008040 <USBD_SetAddress>
          break;
 80079c2:	e01d      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fb7e 	bl	80080c8 <USBD_SetConfig>
          break;
 80079cc:	e018      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc07 	bl	80081e4 <USBD_GetConfig>
          break;
 80079d6:	e013      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fc37 	bl	800824e <USBD_GetStatus>
          break;
 80079e0:	e00e      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fc65 	bl	80082b4 <USBD_SetFeature>
          break;
 80079ea:	e009      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc74 	bl	80082dc <USBD_ClrFeature>
          break;
 80079f4:	e004      	b.n	8007a00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fccc 	bl	8008396 <USBD_CtlError>
          break;
 80079fe:	bf00      	nop
      }
      break;
 8007a00:	e004      	b.n	8007a0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fcc6 	bl	8008396 <USBD_CtlError>
      break;
 8007a0a:	bf00      	nop
  }

  return ret;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop

08007a18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	d005      	beq.n	8007a3e <USBD_StdItfReq+0x26>
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d82e      	bhi.n	8007a94 <USBD_StdItfReq+0x7c>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <USBD_StdItfReq+0x26>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d12a      	bne.n	8007a94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	3b01      	subs	r3, #1
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d81d      	bhi.n	8007a86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d813      	bhi.n	8007a7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d110      	bne.n	8007a90 <USBD_StdItfReq+0x78>
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10d      	bne.n	8007a90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fd38 	bl	80084ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a7a:	e009      	b.n	8007a90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fc89 	bl	8008396 <USBD_CtlError>
          break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc84 	bl	8008396 <USBD_CtlError>
          break;
 8007a8e:	e000      	b.n	8007a92 <USBD_StdItfReq+0x7a>
          break;
 8007a90:	bf00      	nop
      }
      break;
 8007a92:	e004      	b.n	8007a9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fc7d 	bl	8008396 <USBD_CtlError>
      break;
 8007a9c:	bf00      	nop
  }

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	889b      	ldrh	r3, [r3, #4]
 8007aba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac4:	2b40      	cmp	r3, #64	; 0x40
 8007ac6:	d007      	beq.n	8007ad8 <USBD_StdEPReq+0x30>
 8007ac8:	2b40      	cmp	r3, #64	; 0x40
 8007aca:	f200 8146 	bhi.w	8007d5a <USBD_StdEPReq+0x2b2>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <USBD_StdEPReq+0x40>
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	f040 8141 	bne.w	8007d5a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
      break;
 8007ae6:	e13d      	b.n	8007d64 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d10a      	bne.n	8007b0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	e12d      	b.n	8007d66 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d007      	beq.n	8007b22 <USBD_StdEPReq+0x7a>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	f300 811b 	bgt.w	8007d4e <USBD_StdEPReq+0x2a6>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d072      	beq.n	8007c02 <USBD_StdEPReq+0x15a>
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d03a      	beq.n	8007b96 <USBD_StdEPReq+0xee>
 8007b20:	e115      	b.n	8007d4e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d002      	beq.n	8007b32 <USBD_StdEPReq+0x8a>
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d015      	beq.n	8007b5c <USBD_StdEPReq+0xb4>
 8007b30:	e02b      	b.n	8007b8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00c      	beq.n	8007b52 <USBD_StdEPReq+0xaa>
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d009      	beq.n	8007b52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 ff96 	bl	8008a74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b48:	2180      	movs	r1, #128	; 0x80
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 ff92 	bl	8008a74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b50:	e020      	b.n	8007b94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fc1e 	bl	8008396 <USBD_CtlError>
              break;
 8007b5a:	e01b      	b.n	8007b94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	885b      	ldrh	r3, [r3, #2]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10e      	bne.n	8007b82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00b      	beq.n	8007b82 <USBD_StdEPReq+0xda>
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b80      	cmp	r3, #128	; 0x80
 8007b6e:	d008      	beq.n	8007b82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	88db      	ldrh	r3, [r3, #6]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 ff79 	bl	8008a74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fcb1 	bl	80084ea <USBD_CtlSendStatus>

              break;
 8007b88:	e004      	b.n	8007b94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc02 	bl	8008396 <USBD_CtlError>
              break;
 8007b92:	bf00      	nop
          }
          break;
 8007b94:	e0e0      	b.n	8007d58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d002      	beq.n	8007ba6 <USBD_StdEPReq+0xfe>
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d015      	beq.n	8007bd0 <USBD_StdEPReq+0x128>
 8007ba4:	e026      	b.n	8007bf4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00c      	beq.n	8007bc6 <USBD_StdEPReq+0x11e>
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d009      	beq.n	8007bc6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 ff5c 	bl	8008a74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 ff58 	bl	8008a74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bc4:	e01c      	b.n	8007c00 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fbe4 	bl	8008396 <USBD_CtlError>
              break;
 8007bce:	e017      	b.n	8007c00 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	885b      	ldrh	r3, [r3, #2]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d112      	bne.n	8007bfe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 ff63 	bl	8008ab2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc7c 	bl	80084ea <USBD_CtlSendStatus>
              }
              break;
 8007bf2:	e004      	b.n	8007bfe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fbcd 	bl	8008396 <USBD_CtlError>
              break;
 8007bfc:	e000      	b.n	8007c00 <USBD_StdEPReq+0x158>
              break;
 8007bfe:	bf00      	nop
          }
          break;
 8007c00:	e0aa      	b.n	8007d58 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d002      	beq.n	8007c12 <USBD_StdEPReq+0x16a>
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d032      	beq.n	8007c76 <USBD_StdEPReq+0x1ce>
 8007c10:	e097      	b.n	8007d42 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <USBD_StdEPReq+0x180>
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b80      	cmp	r3, #128	; 0x80
 8007c1c:	d004      	beq.n	8007c28 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fbb8 	bl	8008396 <USBD_CtlError>
                break;
 8007c26:	e091      	b.n	8007d4c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da0b      	bge.n	8007c48 <USBD_StdEPReq+0x1a0>
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	3310      	adds	r3, #16
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	3304      	adds	r3, #4
 8007c46:	e00b      	b.n	8007c60 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3304      	adds	r3, #4
 8007c60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fbfb 	bl	800846a <USBD_CtlSendData>
              break;
 8007c74:	e06a      	b.n	8007d4c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	da11      	bge.n	8007ca2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	f003 020f 	and.w	r2, r3, #15
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	3318      	adds	r3, #24
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d117      	bne.n	8007cc8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fb7b 	bl	8008396 <USBD_CtlError>
                  break;
 8007ca0:	e054      	b.n	8007d4c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d104      	bne.n	8007cc8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fb68 	bl	8008396 <USBD_CtlError>
                  break;
 8007cc6:	e041      	b.n	8007d4c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da0b      	bge.n	8007ce8 <USBD_StdEPReq+0x240>
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	3310      	adds	r3, #16
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	e00b      	b.n	8007d00 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3304      	adds	r3, #4
 8007d00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <USBD_StdEPReq+0x266>
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	d103      	bne.n	8007d16 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	e00e      	b.n	8007d34 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fee8 	bl	8008af0 <USBD_LL_IsStallEP>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e002      	b.n	8007d34 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2202      	movs	r2, #2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fb95 	bl	800846a <USBD_CtlSendData>
              break;
 8007d40:	e004      	b.n	8007d4c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fb26 	bl	8008396 <USBD_CtlError>
              break;
 8007d4a:	bf00      	nop
          }
          break;
 8007d4c:	e004      	b.n	8007d58 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fb20 	bl	8008396 <USBD_CtlError>
          break;
 8007d56:	bf00      	nop
      }
      break;
 8007d58:	e004      	b.n	8007d64 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fb1a 	bl	8008396 <USBD_CtlError>
      break;
 8007d62:	bf00      	nop
  }

  return ret;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	f200 8128 	bhi.w	8007fe6 <USBD_GetDescriptor+0x276>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <USBD_GetDescriptor+0x2c>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007db9 	.word	0x08007db9
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007e11 	.word	0x08007e11
 8007da8:	08007fe7 	.word	0x08007fe7
 8007dac:	08007fe7 	.word	0x08007fe7
 8007db0:	08007f87 	.word	0x08007f87
 8007db4:	08007fb3 	.word	0x08007fb3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	7c12      	ldrb	r2, [r2, #16]
 8007dc4:	f107 0108 	add.w	r1, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
      break;
 8007dce:	e112      	b.n	8007ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7c1b      	ldrb	r3, [r3, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10d      	bne.n	8007df4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	f107 0208 	add.w	r2, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	2202      	movs	r2, #2
 8007df0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007df2:	e100      	b.n	8007ff6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f107 0208 	add.w	r2, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	701a      	strb	r2, [r3, #0]
      break;
 8007e0e:	e0f2      	b.n	8007ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	885b      	ldrh	r3, [r3, #2]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b05      	cmp	r3, #5
 8007e18:	f200 80ac 	bhi.w	8007f74 <USBD_GetDescriptor+0x204>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <USBD_GetDescriptor+0xb4>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e3d 	.word	0x08007e3d
 8007e28:	08007e71 	.word	0x08007e71
 8007e2c:	08007ea5 	.word	0x08007ea5
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007f0d 	.word	0x08007f0d
 8007e38:	08007f41 	.word	0x08007f41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	7c12      	ldrb	r2, [r2, #16]
 8007e54:	f107 0108 	add.w	r1, r7, #8
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5e:	e091      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa97 	bl	8008396 <USBD_CtlError>
            err++;
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6e:	e089      	b.n	8007f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	7c12      	ldrb	r2, [r2, #16]
 8007e88:	f107 0108 	add.w	r1, r7, #8
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4798      	blx	r3
 8007e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e92:	e077      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa7d 	bl	8008396 <USBD_CtlError>
            err++;
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea2:	e06f      	b.n	8007f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7c12      	ldrb	r2, [r2, #16]
 8007ebc:	f107 0108 	add.w	r1, r7, #8
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
 8007ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec6:	e05d      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa63 	bl	8008396 <USBD_CtlError>
            err++;
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed6:	e055      	b.n	8007f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
 8007ef0:	f107 0108 	add.w	r1, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efa:	e043      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa49 	bl	8008396 <USBD_CtlError>
            err++;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	3301      	adds	r3, #1
 8007f08:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0a:	e03b      	b.n	8007f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7c12      	ldrb	r2, [r2, #16]
 8007f24:	f107 0108 	add.w	r1, r7, #8
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2e:	e029      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa2f 	bl	8008396 <USBD_CtlError>
            err++;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3e:	e021      	b.n	8007f84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	7c12      	ldrb	r2, [r2, #16]
 8007f58:	f107 0108 	add.w	r1, r7, #8
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
 8007f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f62:	e00f      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa15 	bl	8008396 <USBD_CtlError>
            err++;
 8007f6c:	7afb      	ldrb	r3, [r7, #11]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	72fb      	strb	r3, [r7, #11]
          break;
 8007f72:	e007      	b.n	8007f84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fa0d 	bl	8008396 <USBD_CtlError>
          err++;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f82:	e038      	b.n	8007ff6 <USBD_GetDescriptor+0x286>
 8007f84:	e037      	b.n	8007ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7c1b      	ldrb	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f96:	f107 0208 	add.w	r2, r7, #8
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4798      	blx	r3
 8007f9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fa0:	e029      	b.n	8007ff6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f9f6 	bl	8008396 <USBD_CtlError>
        err++;
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	3301      	adds	r3, #1
 8007fae:	72fb      	strb	r3, [r7, #11]
      break;
 8007fb0:	e021      	b.n	8007ff6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7c1b      	ldrb	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10d      	bne.n	8007fd6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	f107 0208 	add.w	r2, r7, #8
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	4798      	blx	r3
 8007fca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fd4:	e00f      	b.n	8007ff6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9dc 	bl	8008396 <USBD_CtlError>
        err++;
 8007fde:	7afb      	ldrb	r3, [r7, #11]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe4:	e007      	b.n	8007ff6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9d4 	bl	8008396 <USBD_CtlError>
      err++;
 8007fee:	7afb      	ldrb	r3, [r7, #11]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ff4:	bf00      	nop
  }

  if (err != 0U)
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11c      	bne.n	8008036 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ffc:	893b      	ldrh	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d011      	beq.n	8008026 <USBD_GetDescriptor+0x2b6>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88db      	ldrh	r3, [r3, #6]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00d      	beq.n	8008026 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	88da      	ldrh	r2, [r3, #6]
 800800e:	893b      	ldrh	r3, [r7, #8]
 8008010:	4293      	cmp	r3, r2
 8008012:	bf28      	it	cs
 8008014:	4613      	movcs	r3, r2
 8008016:	b29b      	uxth	r3, r3
 8008018:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800801a:	893b      	ldrh	r3, [r7, #8]
 800801c:	461a      	mov	r2, r3
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fa22 	bl	800846a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	88db      	ldrh	r3, [r3, #6]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa5b 	bl	80084ea <USBD_CtlSendStatus>
 8008034:	e000      	b.n	8008038 <USBD_GetDescriptor+0x2c8>
    return;
 8008036:	bf00      	nop
    }
  }
}
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	889b      	ldrh	r3, [r3, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d130      	bne.n	80080b4 <USBD_SetAddress+0x74>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	88db      	ldrh	r3, [r3, #6]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d12c      	bne.n	80080b4 <USBD_SetAddress+0x74>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	2b7f      	cmp	r3, #127	; 0x7f
 8008060:	d828      	bhi.n	80080b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	2b03      	cmp	r3, #3
 8008076:	d104      	bne.n	8008082 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f98b 	bl	8008396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008080:	e01d      	b.n	80080be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	7bfa      	ldrb	r2, [r7, #15]
 8008086:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fd5a 	bl	8008b48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa28 	bl	80084ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a8:	e009      	b.n	80080be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b2:	e004      	b.n	80080be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f96d 	bl	8008396 <USBD_CtlError>
  }
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	4b41      	ldr	r3, [pc, #260]	; (80081e0 <USBD_SetConfig+0x118>)
 80080da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080dc:	4b40      	ldr	r3, [pc, #256]	; (80081e0 <USBD_SetConfig+0x118>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d904      	bls.n	80080ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f955 	bl	8008396 <USBD_CtlError>
 80080ec:	e075      	b.n	80081da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d002      	beq.n	80080fe <USBD_SetConfig+0x36>
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d023      	beq.n	8008144 <USBD_SetConfig+0x7c>
 80080fc:	e062      	b.n	80081c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080fe:	4b38      	ldr	r3, [pc, #224]	; (80081e0 <USBD_SetConfig+0x118>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01a      	beq.n	800813c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008106:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <USBD_SetConfig+0x118>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2203      	movs	r2, #3
 8008114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008118:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <USBD_SetConfig+0x118>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff f9e8 	bl	80074f4 <USBD_SetClassConfig>
 8008124:	4603      	mov	r3, r0
 8008126:	2b02      	cmp	r3, #2
 8008128:	d104      	bne.n	8008134 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f932 	bl	8008396 <USBD_CtlError>
            return;
 8008132:	e052      	b.n	80081da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9d8 	bl	80084ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800813a:	e04e      	b.n	80081da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f9d4 	bl	80084ea <USBD_CtlSendStatus>
        break;
 8008142:	e04a      	b.n	80081da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008144:	4b26      	ldr	r3, [pc, #152]	; (80081e0 <USBD_SetConfig+0x118>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d112      	bne.n	8008172 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008154:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <USBD_SetConfig+0x118>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800815e:	4b20      	ldr	r3, [pc, #128]	; (80081e0 <USBD_SetConfig+0x118>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff f9e4 	bl	8007532 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f9bd 	bl	80084ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008170:	e033      	b.n	80081da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <USBD_SetConfig+0x118>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d01d      	beq.n	80081bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff f9d2 	bl	8007532 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <USBD_SetConfig+0x118>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008198:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <USBD_SetConfig+0x118>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff f9a8 	bl	80074f4 <USBD_SetClassConfig>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d104      	bne.n	80081b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f8f2 	bl	8008396 <USBD_CtlError>
            return;
 80081b2:	e012      	b.n	80081da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f998 	bl	80084ea <USBD_CtlSendStatus>
        break;
 80081ba:	e00e      	b.n	80081da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f994 	bl	80084ea <USBD_CtlSendStatus>
        break;
 80081c2:	e00a      	b.n	80081da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f8e5 	bl	8008396 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <USBD_SetConfig+0x118>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff f9ad 	bl	8007532 <USBD_ClrClassConfig>
        break;
 80081d8:	bf00      	nop
    }
  }
}
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000194 	.word	0x20000194

080081e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	88db      	ldrh	r3, [r3, #6]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d004      	beq.n	8008200 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f8cc 	bl	8008396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081fe:	e022      	b.n	8008246 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008206:	2b02      	cmp	r3, #2
 8008208:	dc02      	bgt.n	8008210 <USBD_GetConfig+0x2c>
 800820a:	2b00      	cmp	r3, #0
 800820c:	dc03      	bgt.n	8008216 <USBD_GetConfig+0x32>
 800820e:	e015      	b.n	800823c <USBD_GetConfig+0x58>
 8008210:	2b03      	cmp	r3, #3
 8008212:	d00b      	beq.n	800822c <USBD_GetConfig+0x48>
 8008214:	e012      	b.n	800823c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3308      	adds	r3, #8
 8008220:	2201      	movs	r2, #1
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f920 	bl	800846a <USBD_CtlSendData>
        break;
 800822a:	e00c      	b.n	8008246 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3304      	adds	r3, #4
 8008230:	2201      	movs	r2, #1
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f918 	bl	800846a <USBD_CtlSendData>
        break;
 800823a:	e004      	b.n	8008246 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f8a9 	bl	8008396 <USBD_CtlError>
        break;
 8008244:	bf00      	nop
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825e:	3b01      	subs	r3, #1
 8008260:	2b02      	cmp	r3, #2
 8008262:	d81e      	bhi.n	80082a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d004      	beq.n	8008276 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f891 	bl	8008396 <USBD_CtlError>
        break;
 8008274:	e01a      	b.n	80082ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f043 0202 	orr.w	r2, r3, #2
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	330c      	adds	r3, #12
 8008296:	2202      	movs	r2, #2
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f8e5 	bl	800846a <USBD_CtlSendData>
      break;
 80082a0:	e004      	b.n	80082ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f876 	bl	8008396 <USBD_CtlError>
      break;
 80082aa:	bf00      	nop
  }
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	885b      	ldrh	r3, [r3, #2]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d106      	bne.n	80082d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f90b 	bl	80084ea <USBD_CtlSendStatus>
  }
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ec:	3b01      	subs	r3, #1
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d80b      	bhi.n	800830a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d10c      	bne.n	8008314 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8f1 	bl	80084ea <USBD_CtlSendStatus>
      }
      break;
 8008308:	e004      	b.n	8008314 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f842 	bl	8008396 <USBD_CtlError>
      break;
 8008312:	e000      	b.n	8008316 <USBD_ClrFeature+0x3a>
      break;
 8008314:	bf00      	nop
  }
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785a      	ldrb	r2, [r3, #1]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	3302      	adds	r3, #2
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b29a      	uxth	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	3303      	adds	r3, #3
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	b29b      	uxth	r3, r3
 800834c:	4413      	add	r3, r2
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	3304      	adds	r3, #4
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	b29a      	uxth	r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	3305      	adds	r3, #5
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	b29b      	uxth	r3, r3
 8008368:	4413      	add	r3, r2
 800836a:	b29a      	uxth	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	3306      	adds	r3, #6
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b29a      	uxth	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	3307      	adds	r3, #7
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	b29b      	uxth	r3, r3
 8008384:	4413      	add	r3, r2
 8008386:	b29a      	uxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	80da      	strh	r2, [r3, #6]

}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80083a0:	2180      	movs	r1, #128	; 0x80
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fb66 	bl	8008a74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80083a8:	2100      	movs	r1, #0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fb62 	bl	8008a74 <USBD_LL_StallEP>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d032      	beq.n	8008434 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f834 	bl	800843c <USBD_GetLen>
 80083d4:	4603      	mov	r3, r0
 80083d6:	3301      	adds	r3, #1
 80083d8:	b29b      	uxth	r3, r3
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	75fa      	strb	r2, [r7, #23]
 80083e8:	461a      	mov	r2, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4413      	add	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	75fa      	strb	r2, [r7, #23]
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4413      	add	r3, r2
 8008400:	2203      	movs	r2, #3
 8008402:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008404:	e012      	b.n	800842c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	60fa      	str	r2, [r7, #12]
 800840c:	7dfa      	ldrb	r2, [r7, #23]
 800840e:	1c51      	adds	r1, r2, #1
 8008410:	75f9      	strb	r1, [r7, #23]
 8008412:	4611      	mov	r1, r2
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	440a      	add	r2, r1
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	75fa      	strb	r2, [r7, #23]
 8008422:	461a      	mov	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4413      	add	r3, r2
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e8      	bne.n	8008406 <USBD_GetString+0x4e>
    }
  }
}
 8008434:	bf00      	nop
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008448:	e005      	b.n	8008456 <USBD_GetLen+0x1a>
  {
    len++;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	3301      	adds	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3301      	adds	r3, #1
 8008454:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f5      	bne.n	800844a <USBD_GetLen+0xe>
  }

  return len;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	4613      	mov	r3, r2
 8008476:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2202      	movs	r2, #2
 800847c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008486:	88fa      	ldrh	r2, [r7, #6]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	2100      	movs	r1, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fb77 	bl	8008b86 <USBD_LL_Transmit>

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	2100      	movs	r1, #0
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fb65 	bl	8008b86 <USBD_LL_Transmit>

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	4613      	mov	r3, r2
 80084d2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 fb76 	bl	8008bcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2204      	movs	r2, #4
 80084f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084fa:	2300      	movs	r3, #0
 80084fc:	2200      	movs	r2, #0
 80084fe:	2100      	movs	r1, #0
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fb40 	bl	8008b86 <USBD_LL_Transmit>

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2205      	movs	r2, #5
 800851c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008520:	2300      	movs	r3, #0
 8008522:	2200      	movs	r2, #0
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fb50 	bl	8008bcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800853c:	2200      	movs	r2, #0
 800853e:	490e      	ldr	r1, [pc, #56]	; (8008578 <MX_USB_DEVICE_Init+0x40>)
 8008540:	480e      	ldr	r0, [pc, #56]	; (800857c <MX_USB_DEVICE_Init+0x44>)
 8008542:	f7fe ff7d 	bl	8007440 <USBD_Init>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800854c:	f7f8 fda4 	bl	8001098 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008550:	490b      	ldr	r1, [pc, #44]	; (8008580 <MX_USB_DEVICE_Init+0x48>)
 8008552:	480a      	ldr	r0, [pc, #40]	; (800857c <MX_USB_DEVICE_Init+0x44>)
 8008554:	f7fe ff9f 	bl	8007496 <USBD_RegisterClass>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800855e:	f7f8 fd9b 	bl	8001098 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008562:	4806      	ldr	r0, [pc, #24]	; (800857c <MX_USB_DEVICE_Init+0x44>)
 8008564:	f7fe ffb0 	bl	80074c8 <USBD_Start>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800856e:	f7f8 fd93 	bl	8001098 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008572:	bf00      	nop
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000114 	.word	0x20000114
 800857c:	2000021c 	.word	0x2000021c
 8008580:	2000000c 	.word	0x2000000c

08008584 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	6039      	str	r1, [r7, #0]
 800858e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2212      	movs	r2, #18
 8008594:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008596:	4b03      	ldr	r3, [pc, #12]	; (80085a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	20000130 	.word	0x20000130

080085a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2204      	movs	r2, #4
 80085b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085ba:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bc80      	pop	{r7}
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20000144 	.word	0x20000144

080085cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	4907      	ldr	r1, [pc, #28]	; (8008600 <USBD_FS_ProductStrDescriptor+0x34>)
 80085e2:	4808      	ldr	r0, [pc, #32]	; (8008604 <USBD_FS_ProductStrDescriptor+0x38>)
 80085e4:	f7ff fee8 	bl	80083b8 <USBD_GetString>
 80085e8:	e004      	b.n	80085f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	4904      	ldr	r1, [pc, #16]	; (8008600 <USBD_FS_ProductStrDescriptor+0x34>)
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <USBD_FS_ProductStrDescriptor+0x38>)
 80085f0:	f7ff fee2 	bl	80083b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	200004e0 	.word	0x200004e0
 8008604:	08008d2c 	.word	0x08008d2c

08008608 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	4904      	ldr	r1, [pc, #16]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008618:	4804      	ldr	r0, [pc, #16]	; (800862c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800861a:	f7ff fecd 	bl	80083b8 <USBD_GetString>
  return USBD_StrDesc;
 800861e:	4b02      	ldr	r3, [pc, #8]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200004e0 	.word	0x200004e0
 800862c:	08008d44 	.word	0x08008d44

08008630 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	221a      	movs	r2, #26
 8008640:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008642:	f000 f843 	bl	80086cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008646:	4b02      	ldr	r3, [pc, #8]	; (8008650 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000148 	.word	0x20000148

08008654 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d105      	bne.n	8008672 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4907      	ldr	r1, [pc, #28]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x34>)
 800866a:	4808      	ldr	r0, [pc, #32]	; (800868c <USBD_FS_ConfigStrDescriptor+0x38>)
 800866c:	f7ff fea4 	bl	80083b8 <USBD_GetString>
 8008670:	e004      	b.n	800867c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4904      	ldr	r1, [pc, #16]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008676:	4805      	ldr	r0, [pc, #20]	; (800868c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008678:	f7ff fe9e 	bl	80083b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200004e0 	.word	0x200004e0
 800868c:	08008d58 	.word	0x08008d58

08008690 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	6039      	str	r1, [r7, #0]
 800869a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d105      	bne.n	80086ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4907      	ldr	r1, [pc, #28]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086a6:	4808      	ldr	r0, [pc, #32]	; (80086c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a8:	f7ff fe86 	bl	80083b8 <USBD_GetString>
 80086ac:	e004      	b.n	80086b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	4904      	ldr	r1, [pc, #16]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086b2:	4805      	ldr	r0, [pc, #20]	; (80086c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086b4:	f7ff fe80 	bl	80083b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200004e0 	.word	0x200004e0
 80086c8:	08008d64 	.word	0x08008d64

080086cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <Get_SerialNum+0x44>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086d8:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <Get_SerialNum+0x48>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086de:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <Get_SerialNum+0x4c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d009      	beq.n	8008706 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086f2:	2208      	movs	r2, #8
 80086f4:	4909      	ldr	r1, [pc, #36]	; (800871c <Get_SerialNum+0x50>)
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 f814 	bl	8008724 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086fc:	2204      	movs	r2, #4
 80086fe:	4908      	ldr	r1, [pc, #32]	; (8008720 <Get_SerialNum+0x54>)
 8008700:	68b8      	ldr	r0, [r7, #8]
 8008702:	f000 f80f 	bl	8008724 <IntToUnicode>
  }
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	1ffff7e8 	.word	0x1ffff7e8
 8008714:	1ffff7ec 	.word	0x1ffff7ec
 8008718:	1ffff7f0 	.word	0x1ffff7f0
 800871c:	2000014a 	.word	0x2000014a
 8008720:	2000015a 	.word	0x2000015a

08008724 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008736:	2300      	movs	r3, #0
 8008738:	75fb      	strb	r3, [r7, #23]
 800873a:	e027      	b.n	800878c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0f1b      	lsrs	r3, r3, #28
 8008740:	2b09      	cmp	r3, #9
 8008742:	d80b      	bhi.n	800875c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	0f1b      	lsrs	r3, r3, #28
 8008748:	b2da      	uxtb	r2, r3
 800874a:	7dfb      	ldrb	r3, [r7, #23]
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4619      	mov	r1, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	440b      	add	r3, r1
 8008754:	3230      	adds	r2, #48	; 0x30
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e00a      	b.n	8008772 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	0f1b      	lsrs	r3, r3, #28
 8008760:	b2da      	uxtb	r2, r3
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4619      	mov	r1, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	440b      	add	r3, r1
 800876c:	3237      	adds	r2, #55	; 0x37
 800876e:	b2d2      	uxtb	r2, r2
 8008770:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	3301      	adds	r3, #1
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	4413      	add	r3, r2
 8008782:	2200      	movs	r2, #0
 8008784:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	3301      	adds	r3, #1
 800878a:	75fb      	strb	r3, [r7, #23]
 800878c:	7dfa      	ldrb	r2, [r7, #23]
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	429a      	cmp	r2, r3
 8008792:	d3d3      	bcc.n	800873c <IntToUnicode+0x18>
  }
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr

080087a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a0d      	ldr	r2, [pc, #52]	; (80087e4 <HAL_PCD_MspInit+0x44>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d113      	bne.n	80087da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087b2:	4b0d      	ldr	r3, [pc, #52]	; (80087e8 <HAL_PCD_MspInit+0x48>)
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	4a0c      	ldr	r2, [pc, #48]	; (80087e8 <HAL_PCD_MspInit+0x48>)
 80087b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087bc:	61d3      	str	r3, [r2, #28]
 80087be:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <HAL_PCD_MspInit+0x48>)
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	2014      	movs	r0, #20
 80087d0:	f7f8 fe9b 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80087d4:	2014      	movs	r0, #20
 80087d6:	f7f8 feb4 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	40005c00 	.word	0x40005c00
 80087e8:	40021000 	.word	0x40021000

080087ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008800:	4619      	mov	r1, r3
 8008802:	4610      	mov	r0, r2
 8008804:	f7fe fea8 	bl	8007558 <USBD_LL_SetupStage>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008822:	78fa      	ldrb	r2, [r7, #3]
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	440b      	add	r3, r1
 8008830:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	4619      	mov	r1, r3
 800883a:	f7fe feda 	bl	80075f2 <USBD_LL_DataOutStage>
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	460b      	mov	r3, r1
 8008850:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	440b      	add	r3, r1
 8008866:	333c      	adds	r3, #60	; 0x3c
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	4619      	mov	r1, r3
 800886e:	f7fe ff31 	bl	80076d4 <USBD_LL_DataInStage>
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff f841 	bl	8007910 <USBD_LL_SOF>
}
 800888e:	bf00      	nop
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800889e:	2301      	movs	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d001      	beq.n	80088ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088aa:	f7f8 fbf5 	bl	8001098 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088b4:	7bfa      	ldrb	r2, [r7, #15]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fff1 	bl	80078a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe ffaa 	bl	800781e <USBD_LL_Reset>
}
 80088ca:	bf00      	nop
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe ffeb 	bl	80078be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <HAL_PCD_SuspendCallback+0x30>)
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	4a03      	ldr	r2, [pc, #12]	; (8008904 <HAL_PCD_SuspendCallback+0x30>)
 80088f6:	f043 0306 	orr.w	r3, r3, #6
 80088fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	e000ed00 	.word	0xe000ed00

08008908 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ffe5 	bl	80078e6 <USBD_LL_Resume>
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800892c:	4a1f      	ldr	r2, [pc, #124]	; (80089ac <USBD_LL_Init+0x88>)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <USBD_LL_Init+0x88>)
 8008938:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800893c:	4b1b      	ldr	r3, [pc, #108]	; (80089ac <USBD_LL_Init+0x88>)
 800893e:	4a1c      	ldr	r2, [pc, #112]	; (80089b0 <USBD_LL_Init+0x8c>)
 8008940:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008942:	4b1a      	ldr	r3, [pc, #104]	; (80089ac <USBD_LL_Init+0x88>)
 8008944:	2208      	movs	r2, #8
 8008946:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008948:	4b18      	ldr	r3, [pc, #96]	; (80089ac <USBD_LL_Init+0x88>)
 800894a:	2202      	movs	r2, #2
 800894c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800894e:	4b17      	ldr	r3, [pc, #92]	; (80089ac <USBD_LL_Init+0x88>)
 8008950:	2200      	movs	r2, #0
 8008952:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008954:	4b15      	ldr	r3, [pc, #84]	; (80089ac <USBD_LL_Init+0x88>)
 8008956:	2200      	movs	r2, #0
 8008958:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800895a:	4b14      	ldr	r3, [pc, #80]	; (80089ac <USBD_LL_Init+0x88>)
 800895c:	2200      	movs	r2, #0
 800895e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008960:	4812      	ldr	r0, [pc, #72]	; (80089ac <USBD_LL_Init+0x88>)
 8008962:	f7f9 ffbd 	bl	80028e0 <HAL_PCD_Init>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800896c:	f7f8 fb94 	bl	8001098 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008976:	2318      	movs	r3, #24
 8008978:	2200      	movs	r2, #0
 800897a:	2100      	movs	r1, #0
 800897c:	f7fb fc1c 	bl	80041b8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008986:	2358      	movs	r3, #88	; 0x58
 8008988:	2200      	movs	r2, #0
 800898a:	2180      	movs	r1, #128	; 0x80
 800898c:	f7fb fc14 	bl	80041b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800899a:	2200      	movs	r2, #0
 800899c:	2181      	movs	r1, #129	; 0x81
 800899e:	f7fb fc0b 	bl	80041b8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	200006e0 	.word	0x200006e0
 80089b0:	40005c00 	.word	0x40005c00

080089b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fa f893 	bl	8002af6 <HAL_PCD_Start>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f93c 	bl	8008c54 <USBD_Get_USB_Status>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	4608      	mov	r0, r1
 80089f4:	4611      	mov	r1, r2
 80089f6:	461a      	mov	r2, r3
 80089f8:	4603      	mov	r3, r0
 80089fa:	70fb      	strb	r3, [r7, #3]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70bb      	strb	r3, [r7, #2]
 8008a00:	4613      	mov	r3, r2
 8008a02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a12:	78bb      	ldrb	r3, [r7, #2]
 8008a14:	883a      	ldrh	r2, [r7, #0]
 8008a16:	78f9      	ldrb	r1, [r7, #3]
 8008a18:	f7fa fa0d 	bl	8002e36 <HAL_PCD_EP_Open>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f916 	bl	8008c54 <USBD_Get_USB_Status>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a50:	78fa      	ldrb	r2, [r7, #3]
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fa fa54 	bl	8002f02 <HAL_PCD_EP_Close>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f8f7 	bl	8008c54 <USBD_Get_USB_Status>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fa fafd 	bl	8003092 <HAL_PCD_EP_SetStall>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f8d8 	bl	8008c54 <USBD_Get_USB_Status>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fa fb3e 	bl	8003152 <HAL_PCD_EP_ClrStall>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f8b9 	bl	8008c54 <USBD_Get_USB_Status>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da0c      	bge.n	8008b26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	440b      	add	r3, r1
 8008b20:	3302      	adds	r3, #2
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	e00b      	b.n	8008b3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b2c:	68f9      	ldr	r1, [r7, #12]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	440b      	add	r3, r1
 8008b38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008b3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bc80      	pop	{r7}
 8008b46:	4770      	bx	lr

08008b48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fa f940 	bl	8002dec <HAL_PCD_SetAddress>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f86e 	bl	8008c54 <USBD_Get_USB_Status>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	461a      	mov	r2, r3
 8008b92:	460b      	mov	r3, r1
 8008b94:	72fb      	strb	r3, [r7, #11]
 8008b96:	4613      	mov	r3, r2
 8008b98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ba8:	893b      	ldrh	r3, [r7, #8]
 8008baa:	7af9      	ldrb	r1, [r7, #11]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	f7fa fa2d 	bl	800300c <HAL_PCD_EP_Transmit>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f84b 	bl	8008c54 <USBD_Get_USB_Status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	607a      	str	r2, [r7, #4]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	460b      	mov	r3, r1
 8008bda:	72fb      	strb	r3, [r7, #11]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bee:	893b      	ldrh	r3, [r7, #8]
 8008bf0:	7af9      	ldrb	r1, [r7, #11]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	f7fa f9cd 	bl	8002f92 <HAL_PCD_EP_Receive>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 f828 	bl	8008c54 <USBD_Get_USB_Status>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c1c:	4b02      	ldr	r3, [pc, #8]	; (8008c28 <USBD_static_malloc+0x14>)
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr
 8008c28:	20000198 	.word	0x20000198

08008c2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]

}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d817      	bhi.n	8008c98 <USBD_Get_USB_Status+0x44>
 8008c68:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <USBD_Get_USB_Status+0x1c>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c87 	.word	0x08008c87
 8008c78:	08008c8d 	.word	0x08008c8d
 8008c7c:	08008c93 	.word	0x08008c93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
    break;
 8008c84:	e00b      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c86:	2302      	movs	r3, #2
 8008c88:	73fb      	strb	r3, [r7, #15]
    break;
 8008c8a:	e008      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c90:	e005      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
 8008c94:	73fb      	strb	r3, [r7, #15]
    break;
 8008c96:	e002      	b.n	8008c9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	bf00      	nop
  }
  return usb_status;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bc80      	pop	{r7}
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop

08008cac <__libc_init_array>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	2600      	movs	r6, #0
 8008cb0:	4d0c      	ldr	r5, [pc, #48]	; (8008ce4 <__libc_init_array+0x38>)
 8008cb2:	4c0d      	ldr	r4, [pc, #52]	; (8008ce8 <__libc_init_array+0x3c>)
 8008cb4:	1b64      	subs	r4, r4, r5
 8008cb6:	10a4      	asrs	r4, r4, #2
 8008cb8:	42a6      	cmp	r6, r4
 8008cba:	d109      	bne.n	8008cd0 <__libc_init_array+0x24>
 8008cbc:	f000 f822 	bl	8008d04 <_init>
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	4d0a      	ldr	r5, [pc, #40]	; (8008cec <__libc_init_array+0x40>)
 8008cc4:	4c0a      	ldr	r4, [pc, #40]	; (8008cf0 <__libc_init_array+0x44>)
 8008cc6:	1b64      	subs	r4, r4, r5
 8008cc8:	10a4      	asrs	r4, r4, #2
 8008cca:	42a6      	cmp	r6, r4
 8008ccc:	d105      	bne.n	8008cda <__libc_init_array+0x2e>
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd4:	4798      	blx	r3
 8008cd6:	3601      	adds	r6, #1
 8008cd8:	e7ee      	b.n	8008cb8 <__libc_init_array+0xc>
 8008cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cde:	4798      	blx	r3
 8008ce0:	3601      	adds	r6, #1
 8008ce2:	e7f2      	b.n	8008cca <__libc_init_array+0x1e>
 8008ce4:	08008d8c 	.word	0x08008d8c
 8008ce8:	08008d8c 	.word	0x08008d8c
 8008cec:	08008d8c 	.word	0x08008d8c
 8008cf0:	08008d90 	.word	0x08008d90

08008cf4 <memset>:
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	4402      	add	r2, r0
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d100      	bne.n	8008cfe <memset+0xa>
 8008cfc:	4770      	bx	lr
 8008cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008d02:	e7f9      	b.n	8008cf8 <memset+0x4>

08008d04 <_init>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	bf00      	nop
 8008d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0a:	bc08      	pop	{r3}
 8008d0c:	469e      	mov	lr, r3
 8008d0e:	4770      	bx	lr

08008d10 <_fini>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr
