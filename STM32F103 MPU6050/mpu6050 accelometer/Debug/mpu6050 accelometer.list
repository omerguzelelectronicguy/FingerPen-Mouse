
mpu6050 accelometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008c20  08008c20  00018c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c90  08008c90  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08008c90  08008c90  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c90  08008c90  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000164  08008dfc  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  08008dfc  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013818  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d55  00000000  00000000  000339a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00036700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d6  00000000  00000000  00037f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011078  00000000  00000000  00051766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008739f  00000000  00000000  000627de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  000e9bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000164 	.word	0x20000164
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c08 	.word	0x08008c08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000168 	.word	0x20000168
 800014c:	08008c08 	.word	0x08008c08

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_f2iz>:
 800098c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000990:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000994:	d30f      	bcc.n	80009b6 <__aeabi_f2iz+0x2a>
 8000996:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800099a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099e:	d90d      	bls.n	80009bc <__aeabi_f2iz+0x30>
 80009a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ac:	fa23 f002 	lsr.w	r0, r3, r2
 80009b0:	bf18      	it	ne
 80009b2:	4240      	negne	r0, r0
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr
 80009bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009c0:	d101      	bne.n	80009c6 <__aeabi_f2iz+0x3a>
 80009c2:	0242      	lsls	r2, r0, #9
 80009c4:	d105      	bne.n	80009d2 <__aeabi_f2iz+0x46>
 80009c6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009ca:	bf08      	it	eq
 80009cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d0:	4770      	bx	lr
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	4770      	bx	lr

080009d8 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80009de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	2301      	movs	r3, #1
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2275      	movs	r2, #117	; 0x75
 80009f0:	21d0      	movs	r1, #208	; 0xd0
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MPU6050_Init+0xa8>)
 80009f4:	f001 f934 	bl	8001c60 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b68      	cmp	r3, #104	; 0x68
 80009fc:	d13b      	bne.n	8000a76 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	1dbb      	adds	r3, r7, #6
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	226b      	movs	r2, #107	; 0x6b
 8000a14:	21d0      	movs	r1, #208	; 0xd0
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a18:	f001 f828 	bl	8001a6c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000a20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	2219      	movs	r2, #25
 8000a32:	21d0      	movs	r1, #208	; 0xd0
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a36:	f001 f819 	bl	8001a6c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	9302      	str	r3, [sp, #8]
 8000a44:	2301      	movs	r3, #1
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	221c      	movs	r2, #28
 8000a50:	21d0      	movs	r1, #208	; 0xd0
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a54:	f001 f80a 	bl	8001a6c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2301      	movs	r3, #1
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	221b      	movs	r2, #27
 8000a6e:	21d0      	movs	r1, #208	; 0xd0
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MPU6050_Init+0xa8>)
 8000a72:	f000 fffb 	bl	8001a6c <HAL_I2C_Mem_Write>
	}

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001b8 	.word	0x200001b8
 8000a84:	00000000 	.word	0x00000000

08000a88 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	2306      	movs	r3, #6
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	463b      	mov	r3, r7
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	223b      	movs	r2, #59	; 0x3b
 8000aa0:	21d0      	movs	r1, #208	; 0xd0
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <MPU6050_Read_Accel+0x118>)
 8000aa4:	f001 f8dc 	bl	8001c60 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <MPU6050_Read_Accel+0x11c>)
 8000ab8:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000aba:	78bb      	ldrb	r3, [r7, #2]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MPU6050_Read_Accel+0x120>)
 8000aca:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000acc:	793b      	ldrb	r3, [r7, #4]
 8000ace:	021b      	lsls	r3, r3, #8
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	797b      	ldrb	r3, [r7, #5]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	4b34      	ldr	r3, [pc, #208]	; (8000bac <MPU6050_Read_Accel+0x124>)
 8000adc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW*9.8/16384.0;
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MPU6050_Read_Accel+0x11c>)
 8000ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fc85 	bl	80003f4 <__aeabi_i2d>
 8000aea:	a32b      	add	r3, pc, #172	; (adr r3, 8000b98 <MPU6050_Read_Accel+0x110>)
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	f7ff fcea 	bl	80004c8 <__aeabi_dmul>
 8000af4:	4602      	mov	r2, r0
 8000af6:	460b      	mov	r3, r1
 8000af8:	4610      	mov	r0, r2
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MPU6050_Read_Accel+0x128>)
 8000b02:	f7ff fe0b 	bl	800071c <__aeabi_ddiv>
 8000b06:	4602      	mov	r2, r0
 8000b08:	460b      	mov	r3, r1
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f7ff feed 	bl	80008ec <__aeabi_d2f>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <MPU6050_Read_Accel+0x12c>)
 8000b16:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW*9.8/16384.0;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MPU6050_Read_Accel+0x120>)
 8000b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fc68 	bl	80003f4 <__aeabi_i2d>
 8000b24:	a31c      	add	r3, pc, #112	; (adr r3, 8000b98 <MPU6050_Read_Accel+0x110>)
 8000b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2a:	f7ff fccd 	bl	80004c8 <__aeabi_dmul>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	460b      	mov	r3, r1
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MPU6050_Read_Accel+0x128>)
 8000b3c:	f7ff fdee 	bl	800071c <__aeabi_ddiv>
 8000b40:	4602      	mov	r2, r0
 8000b42:	460b      	mov	r3, r1
 8000b44:	4610      	mov	r0, r2
 8000b46:	4619      	mov	r1, r3
 8000b48:	f7ff fed0 	bl	80008ec <__aeabi_d2f>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <MPU6050_Read_Accel+0x130>)
 8000b50:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW*9.8/16384.0;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MPU6050_Read_Accel+0x124>)
 8000b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fc4b 	bl	80003f4 <__aeabi_i2d>
 8000b5e:	a30e      	add	r3, pc, #56	; (adr r3, 8000b98 <MPU6050_Read_Accel+0x110>)
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	f7ff fcb0 	bl	80004c8 <__aeabi_dmul>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MPU6050_Read_Accel+0x128>)
 8000b76:	f7ff fdd1 	bl	800071c <__aeabi_ddiv>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4610      	mov	r0, r2
 8000b80:	4619      	mov	r1, r3
 8000b82:	f7ff feb3 	bl	80008ec <__aeabi_d2f>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <MPU6050_Read_Accel+0x134>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	f3af 8000 	nop.w
 8000b98:	9999999a 	.word	0x9999999a
 8000b9c:	40239999 	.word	0x40239999
 8000ba0:	200001b8 	.word	0x200001b8
 8000ba4:	20000190 	.word	0x20000190
 8000ba8:	20000192 	.word	0x20000192
 8000bac:	20000194 	.word	0x20000194
 8000bb0:	40d00000 	.word	0x40d00000
 8000bb4:	20000214 	.word	0x20000214
 8000bb8:	2000020c 	.word	0x2000020c
 8000bbc:	20000218 	.word	0x20000218

08000bc0 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	9302      	str	r3, [sp, #8]
 8000bcc:	2306      	movs	r3, #6
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	2243      	movs	r2, #67	; 0x43
 8000bd8:	21d0      	movs	r1, #208	; 0xd0
 8000bda:	4831      	ldr	r0, [pc, #196]	; (8000ca0 <MPU6050_Read_Gyro+0xe0>)
 8000bdc:	f001 f840 	bl	8001c60 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000be0:	783b      	ldrb	r3, [r7, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	787b      	ldrb	r3, [r7, #1]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MPU6050_Read_Gyro+0xe4>)
 8000bf0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000bf2:	78bb      	ldrb	r3, [r7, #2]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	b21b      	sxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MPU6050_Read_Gyro+0xe8>)
 8000c02:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000c04:	793b      	ldrb	r3, [r7, #4]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	797b      	ldrb	r3, [r7, #5]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MPU6050_Read_Gyro+0xec>)
 8000c14:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/310.0;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MPU6050_Read_Gyro+0xe4>)
 8000c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fbe9 	bl	80003f4 <__aeabi_i2d>
 8000c22:	a31d      	add	r3, pc, #116	; (adr r3, 8000c98 <MPU6050_Read_Gyro+0xd8>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fd78 	bl	800071c <__aeabi_ddiv>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fe5a 	bl	80008ec <__aeabi_d2f>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <MPU6050_Read_Gyro+0xf0>)
 8000c3c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/310.0;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MPU6050_Read_Gyro+0xe8>)
 8000c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbd5 	bl	80003f4 <__aeabi_i2d>
 8000c4a:	a313      	add	r3, pc, #76	; (adr r3, 8000c98 <MPU6050_Read_Gyro+0xd8>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fd64 	bl	800071c <__aeabi_ddiv>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4610      	mov	r0, r2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f7ff fe46 	bl	80008ec <__aeabi_d2f>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <MPU6050_Read_Gyro+0xf4>)
 8000c64:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/310.0;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MPU6050_Read_Gyro+0xec>)
 8000c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fbc1 	bl	80003f4 <__aeabi_i2d>
 8000c72:	a309      	add	r3, pc, #36	; (adr r3, 8000c98 <MPU6050_Read_Gyro+0xd8>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	f7ff fd50 	bl	800071c <__aeabi_ddiv>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	f7ff fe32 	bl	80008ec <__aeabi_d2f>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <MPU6050_Read_Gyro+0xf8>)
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40736000 	.word	0x40736000
 8000ca0:	200001b8 	.word	0x200001b8
 8000ca4:	20000196 	.word	0x20000196
 8000ca8:	20000198 	.word	0x20000198
 8000cac:	2000019a 	.word	0x2000019a
 8000cb0:	200001b4 	.word	0x200001b4
 8000cb4:	20000210 	.word	0x20000210
 8000cb8:	2000021c 	.word	0x2000021c

08000cbc <HAL_GPIO_EXTI_Callback>:


/********************* EXTI RELATED ************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7)
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	2b80      	cmp	r3, #128	; 0x80
 8000cca:	d102      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x20>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	20000180 	.word	0x20000180

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fa1e 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f856 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 f8dc 	bl	8000ea8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf0:	f000 f8ac 	bl	8000e4c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000cf4:	f007 fba2 	bl	800843c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000cf8:	f7ff fe6e 	bl	80009d8 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel();
 8000cfc:	f7ff fec4 	bl	8000a88 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000d00:	f7ff ff5e 	bl	8000bc0 <MPU6050_Read_Gyro>

	mousehid.mouse_y = -Gy;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <main+0x9c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fe3d 	bl	800098c <__aeabi_f2iz>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b25a      	sxtb	r2, r3
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <main+0xa0>)
 8000d18:	709a      	strb	r2, [r3, #2]

	mousehid.mouse_x = -Gz;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <main+0xa4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fe32 	bl	800098c <__aeabi_f2iz>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <main+0xa0>)
 8000d2e:	705a      	strb	r2, [r3, #1]

	buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0xa8>)
 8000d34:	f000 fd0e 	bl	8001754 <HAL_GPIO_ReadPin>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <main+0xac>)
 8000d3e:	601a      	str	r2, [r3, #0]

	if (buttonstate != oldbuttonstate )
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <main+0xac>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <main+0xb0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d00e      	beq.n	8000d6a <main+0x8a>
	{
	  mousehid.button = buttonstate;  // left click =1, right click =2
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <main+0xac>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <main+0xa0>)
 8000d54:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000d56:	2204      	movs	r2, #4
 8000d58:	4909      	ldr	r1, [pc, #36]	; (8000d80 <main+0xa0>)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <main+0xb4>)
 8000d5c:	f006 fa7e 	bl	800725c <USBD_HID_SendReport>
	  oldbuttonstate = buttonstate;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <main+0xac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <main+0xb0>)
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e004      	b.n	8000d74 <main+0x94>
	}
	else{
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <main+0xa0>)
 8000d6e:	4809      	ldr	r0, [pc, #36]	; (8000d94 <main+0xb4>)
 8000d70:	f006 fa74 	bl	800725c <USBD_HID_SendReport>
	}


	HAL_Delay (15);  // wait for a while
 8000d74:	200f      	movs	r0, #15
 8000d76:	f000 fa37 	bl	80011e8 <HAL_Delay>
	MPU6050_Read_Accel();
 8000d7a:	e7bf      	b.n	8000cfc <main+0x1c>
 8000d7c:	20000210 	.word	0x20000210
 8000d80:	20000184 	.word	0x20000184
 8000d84:	2000021c 	.word	0x2000021c
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	20000188 	.word	0x20000188
 8000d90:	2000018c 	.word	0x2000018c
 8000d94:	20000224 	.word	0x20000224

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b094      	sub	sp, #80	; 0x50
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	2228      	movs	r2, #40	; 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f007 ff26 	bl	8008bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000de4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f9a6 	bl	8004140 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dfa:	f000 f8b7 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fc10 	bl	8004640 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e26:	f000 f8a1 	bl	8000f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 fd89 	bl	800494c <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e40:	f000 f894 	bl	8000f6c <Error_Handler>
  }
}
 8000e44:	bf00      	nop
 8000e46:	3750      	adds	r7, #80	; 0x50
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <MX_I2C1_Init+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_I2C1_Init+0x58>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_I2C1_Init+0x50>)
 8000e8a:	f000 fcab 	bl	80017e4 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 f86a 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001b8 	.word	0x200001b8
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	000186a0 	.word	0x000186a0

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_GPIO_Init+0xb4>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2110      	movs	r1, #16
 8000f08:	4815      	ldr	r0, [pc, #84]	; (8000f60 <MX_GPIO_Init+0xb8>)
 8000f0a:	f000 fc3a 	bl	8001782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_GPIO_Init+0xbc>)
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4811      	ldr	r0, [pc, #68]	; (8000f68 <MX_GPIO_Init+0xc0>)
 8000f22:	f000 fa93 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f26:	2310      	movs	r3, #16
 8000f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <MX_GPIO_Init+0xb8>)
 8000f3e:	f000 fa85 	bl	800144c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2017      	movs	r0, #23
 8000f48:	f000 fa49 	bl	80013de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f4c:	2017      	movs	r0, #23
 8000f4e:	f000 fa62 	bl	8001416 <HAL_NVIC_EnableIRQ>

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	10210000 	.word	0x10210000
 8000f68:	40010800 	.word	0x40010800

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x5c>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_MspInit+0x60>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_MspInit+0x60>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_I2C_MspInit+0x70>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d123      	bne.n	8001044 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001014:	23c0      	movs	r3, #192	; 0xc0
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001018:	2312      	movs	r3, #18
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_I2C_MspInit+0x78>)
 8001028:	f000 fa10 	bl	800144c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8001032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001036:	61d3      	str	r3, [r2, #28]
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010c00 	.word	0x40010c00

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f887 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010ae:	f001 fcca 	bl	8002a46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200006e8 	.word	0x200006e8

080010bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	f000 fb77 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}

080010ca <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
	...

080010d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	; (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fe:	f7ff ffe4 	bl	80010ca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f007 fd55 	bl	8008bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff fdeb 	bl	8000ce0 <main>
  bx lr
 800110a:	4770      	bx	lr
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001114:	08008c98 	.word	0x08008c98
  ldr r2, =_sbss
 8001118:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800111c:	200009d4 	.word	0x200009d4

08001120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_2_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_Init+0x28>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_Init+0x28>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f947 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	200f      	movs	r0, #15
 800113c:	f000 f808 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff ff1a 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40022000 	.word	0x40022000

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x54>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x58>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f95f 	bl	8001432 <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00e      	b.n	800119c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d80a      	bhi.n	800119a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f927 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_InitTick+0x5c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x1c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x20>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a03      	ldr	r2, [pc, #12]	; (80011d0 <HAL_IncTick+0x20>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000220 	.word	0x20000220

080011d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <HAL_GetTick+0x10>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000220 	.word	0x20000220

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff fff0 	bl	80011d4 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffe0 	bl	80011d4 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4906      	ldr	r1, [pc, #24]	; (80012c8 <__NVIC_EnableIRQ+0x34>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff90 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff2d 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff42 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff90 	bl	8001320 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff35 	bl	8001294 <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e169      	b.n	8001734 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8158 	bne.w	800172e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a9a      	ldr	r2, [pc, #616]	; (80016ec <HAL_GPIO_Init+0x2a0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d05e      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001488:	4a98      	ldr	r2, [pc, #608]	; (80016ec <HAL_GPIO_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d875      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800148e:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <HAL_GPIO_Init+0x2a4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d058      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001494:	4a96      	ldr	r2, [pc, #600]	; (80016f0 <HAL_GPIO_Init+0x2a4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d86f      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800149a:	4a96      	ldr	r2, [pc, #600]	; (80016f4 <HAL_GPIO_Init+0x2a8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d052      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014a0:	4a94      	ldr	r2, [pc, #592]	; (80016f4 <HAL_GPIO_Init+0x2a8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d869      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014a6:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x2ac>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d04c      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014ac:	4a92      	ldr	r2, [pc, #584]	; (80016f8 <HAL_GPIO_Init+0x2ac>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d863      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014b2:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d046      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014b8:	4a90      	ldr	r2, [pc, #576]	; (80016fc <HAL_GPIO_Init+0x2b0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d85d      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d82a      	bhi.n	8001518 <HAL_GPIO_Init+0xcc>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d859      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014c6:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <HAL_GPIO_Init+0x80>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001521 	.word	0x08001521
 80014d4:	08001533 	.word	0x08001533
 80014d8:	08001575 	.word	0x08001575
 80014dc:	0800157b 	.word	0x0800157b
 80014e0:	0800157b 	.word	0x0800157b
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	0800157b 	.word	0x0800157b
 80014ec:	0800157b 	.word	0x0800157b
 80014f0:	0800157b 	.word	0x0800157b
 80014f4:	0800157b 	.word	0x0800157b
 80014f8:	0800157b 	.word	0x0800157b
 80014fc:	0800157b 	.word	0x0800157b
 8001500:	0800157b 	.word	0x0800157b
 8001504:	0800157b 	.word	0x0800157b
 8001508:	0800157b 	.word	0x0800157b
 800150c:	0800157b 	.word	0x0800157b
 8001510:	08001529 	.word	0x08001529
 8001514:	0800153d 	.word	0x0800153d
 8001518:	4a79      	ldr	r2, [pc, #484]	; (8001700 <HAL_GPIO_Init+0x2b4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800151e:	e02c      	b.n	800157a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e029      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	3304      	adds	r3, #4
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e024      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	3308      	adds	r3, #8
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e01f      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	330c      	adds	r3, #12
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e01a      	b.n	800157c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800154e:	2304      	movs	r3, #4
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e013      	b.n	800157c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	611a      	str	r2, [r3, #16]
          break;
 8001566:	e009      	b.n	800157c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	615a      	str	r2, [r3, #20]
          break;
 8001572:	e003      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x130>
          break;
 800157a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d801      	bhi.n	8001586 <HAL_GPIO_Init+0x13a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	e001      	b.n	800158a <HAL_GPIO_Init+0x13e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2bff      	cmp	r3, #255	; 0xff
 8001590:	d802      	bhi.n	8001598 <HAL_GPIO_Init+0x14c>
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x152>
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	3b08      	subs	r3, #8
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	210f      	movs	r1, #15
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	6a39      	ldr	r1, [r7, #32]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80b1 	beq.w	800172e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015cc:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_GPIO_Init+0x2b8>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_GPIO_Init+0x2b8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e4:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a40      	ldr	r2, [pc, #256]	; (800170c <HAL_GPIO_Init+0x2c0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d013      	beq.n	8001638 <HAL_GPIO_Init+0x1ec>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d00d      	beq.n	8001634 <HAL_GPIO_Init+0x1e8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <HAL_GPIO_Init+0x2c8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d007      	beq.n	8001630 <HAL_GPIO_Init+0x1e4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3d      	ldr	r2, [pc, #244]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_GPIO_Init+0x1e0>
 8001628:	2303      	movs	r3, #3
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 800162c:	2304      	movs	r3, #4
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x1ee>
 8001638:	2300      	movs	r3, #0
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164a:	492f      	ldr	r1, [pc, #188]	; (8001708 <HAL_GPIO_Init+0x2bc>)
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	492c      	ldr	r1, [pc, #176]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	43db      	mvns	r3, r3
 800167a:	4928      	ldr	r1, [pc, #160]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800167c:	4013      	ands	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168c:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4922      	ldr	r1, [pc, #136]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	491e      	ldr	r1, [pc, #120]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d006      	beq.n	80016c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	4918      	ldr	r1, [pc, #96]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4914      	ldr	r1, [pc, #80]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d021      	beq.n	8001720 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
 80016e8:	e021      	b.n	800172e <HAL_GPIO_Init+0x2e2>
 80016ea:	bf00      	nop
 80016ec:	10320000 	.word	0x10320000
 80016f0:	10310000 	.word	0x10310000
 80016f4:	10220000 	.word	0x10220000
 80016f8:	10210000 	.word	0x10210000
 80016fc:	10120000 	.word	0x10120000
 8001700:	10110000 	.word	0x10110000
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	40010800 	.word	0x40010800
 8001710:	40010c00 	.word	0x40010c00
 8001714:	40011000 	.word	0x40011000
 8001718:	40011400 	.word	0x40011400
 800171c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_GPIO_Init+0x304>)
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	4909      	ldr	r1, [pc, #36]	; (8001750 <HAL_GPIO_Init+0x304>)
 800172a:	4013      	ands	r3, r2
 800172c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3301      	adds	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	f47f ae8e 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	372c      	adds	r7, #44	; 0x2c
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e001      	b.n	8001776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001792:	787b      	ldrb	r3, [r7, #1]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001798:	887a      	ldrh	r2, [r7, #2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	041a      	lsls	r2, r3, #16
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	611a      	str	r2, [r3, #16]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fa72 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e12b      	b.n	8001a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fbe6 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2224      	movs	r2, #36	; 0x24
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001848:	f003 f84e 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 800184c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a81      	ldr	r2, [pc, #516]	; (8001a58 <HAL_I2C_Init+0x274>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d807      	bhi.n	8001868 <HAL_I2C_Init+0x84>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a80      	ldr	r2, [pc, #512]	; (8001a5c <HAL_I2C_Init+0x278>)
 800185c:	4293      	cmp	r3, r2
 800185e:	bf94      	ite	ls
 8001860:	2301      	movls	r3, #1
 8001862:	2300      	movhi	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e006      	b.n	8001876 <HAL_I2C_Init+0x92>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a7d      	ldr	r2, [pc, #500]	; (8001a60 <HAL_I2C_Init+0x27c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	bf94      	ite	ls
 8001870:	2301      	movls	r3, #1
 8001872:	2300      	movhi	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0e7      	b.n	8001a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a78      	ldr	r2, [pc, #480]	; (8001a64 <HAL_I2C_Init+0x280>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0c9b      	lsrs	r3, r3, #18
 8001888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <HAL_I2C_Init+0x274>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d802      	bhi.n	80018b8 <HAL_I2C_Init+0xd4>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3301      	adds	r3, #1
 80018b6:	e009      	b.n	80018cc <HAL_I2C_Init+0xe8>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <HAL_I2C_Init+0x284>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	099b      	lsrs	r3, r3, #6
 80018ca:	3301      	adds	r3, #1
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	495c      	ldr	r1, [pc, #368]	; (8001a58 <HAL_I2C_Init+0x274>)
 80018e8:	428b      	cmp	r3, r1
 80018ea:	d819      	bhi.n	8001920 <HAL_I2C_Init+0x13c>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1e59      	subs	r1, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fa:	1c59      	adds	r1, r3, #1
 80018fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001900:	400b      	ands	r3, r1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <HAL_I2C_Init+0x138>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1e59      	subs	r1, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fbb1 f3f3 	udiv	r3, r1, r3
 8001914:	3301      	adds	r3, #1
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191a:	e051      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 800191c:	2304      	movs	r3, #4
 800191e:	e04f      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d111      	bne.n	800194c <HAL_I2C_Init+0x168>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e012      	b.n	8001972 <HAL_I2C_Init+0x18e>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	0099      	lsls	r1, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Init+0x196>
 8001976:	2301      	movs	r3, #1
 8001978:	e022      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10e      	bne.n	80019a0 <HAL_I2C_Init+0x1bc>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e58      	subs	r0, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	440b      	add	r3, r1
 8001990:	fbb0 f3f3 	udiv	r3, r0, r3
 8001994:	3301      	adds	r3, #1
 8001996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199e:	e00f      	b.n	80019c0 <HAL_I2C_Init+0x1dc>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	0099      	lsls	r1, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	6809      	ldr	r1, [r1, #0]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6911      	ldr	r1, [r2, #16]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68d2      	ldr	r2, [r2, #12]
 80019fa:	4311      	orrs	r1, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	000186a0 	.word	0x000186a0
 8001a5c:	001e847f 	.word	0x001e847f
 8001a60:	003d08ff 	.word	0x003d08ff
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	10624dd3 	.word	0x10624dd3

08001a6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	817b      	strh	r3, [r7, #10]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	813b      	strh	r3, [r7, #8]
 8001a82:	4613      	mov	r3, r2
 8001a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a86:	f7ff fba5 	bl	80011d4 <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	f040 80d9 	bne.w	8001c4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	496d      	ldr	r1, [pc, #436]	; (8001c58 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fcc1 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e0cc      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Mem_Write+0x56>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e0c5      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1e2>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d007      	beq.n	8001ae8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2221      	movs	r2, #33	; 0x21
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_I2C_Mem_Write+0x1f0>)
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b2a:	88f8      	ldrh	r0, [r7, #6]
 8001b2c:	893a      	ldrh	r2, [r7, #8]
 8001b2e:	8979      	ldrh	r1, [r7, #10]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4603      	mov	r3, r0
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 faf8 	bl	8002130 <I2C_RequestMemoryWrite>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d052      	beq.n	8001bec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e081      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fd42 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d107      	bne.n	8001b72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06b      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d11b      	bne.n	8001bec <HAL_I2C_Mem_Write+0x180>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d017      	beq.n	8001bec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1aa      	bne.n	8001b4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fd2e 	bl	800265a <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00d      	beq.n	8001c20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d107      	bne.n	8001c1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e016      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e000      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c4c:	2302      	movs	r3, #2
  }
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	00100002 	.word	0x00100002
 8001c5c:	ffff0000 	.word	0xffff0000

08001c60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	817b      	strh	r3, [r7, #10]
 8001c72:	460b      	mov	r3, r1
 8001c74:	813b      	strh	r3, [r7, #8]
 8001c76:	4613      	mov	r3, r2
 8001c78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c7e:	f7ff faa9 	bl	80011d4 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	f040 8244 	bne.w	800211a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2319      	movs	r3, #25
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4982      	ldr	r1, [pc, #520]	; (8001ea4 <HAL_I2C_Mem_Read+0x244>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fbc5 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e237      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Mem_Read+0x5a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e230      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d007      	beq.n	8001ce0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2222      	movs	r2, #34	; 0x22
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a62      	ldr	r2, [pc, #392]	; (8001ea8 <HAL_I2C_Mem_Read+0x248>)
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d22:	88f8      	ldrh	r0, [r7, #6]
 8001d24:	893a      	ldrh	r2, [r7, #8]
 8001d26:	8979      	ldrh	r1, [r7, #10]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4603      	mov	r3, r0
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fa92 	bl	800225c <I2C_RequestMemoryRead>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1ec      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d113      	bne.n	8001d72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e1c0      	b.n	80020f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d11e      	bne.n	8001db8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8a:	b672      	cpsid	i
}
 8001d8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001db4:	b662      	cpsie	i
}
 8001db6:	e035      	b.n	8001e24 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d11e      	bne.n	8001dfe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dfa:	b662      	cpsie	i
}
 8001dfc:	e012      	b.n	8001e24 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e0c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e24:	e166      	b.n	80020f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	f200 811f 	bhi.w	800206e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d123      	bne.n	8001e80 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fc4d 	bl	80026dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e167      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e7e:	e139      	b.n	80020f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d152      	bne.n	8001f2e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4906      	ldr	r1, [pc, #24]	; (8001eac <HAL_I2C_Mem_Read+0x24c>)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 faca 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e13c      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
 8001ea2:	bf00      	nop
 8001ea4:	00100002 	.word	0x00100002
 8001ea8:	ffff0000 	.word	0xffff0000
 8001eac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ef6:	b662      	cpsie	i
}
 8001ef8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f2c:	e0e2      	b.n	80020f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	2200      	movs	r2, #0
 8001f36:	497b      	ldr	r1, [pc, #492]	; (8002124 <HAL_I2C_Mem_Read+0x4c4>)
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fa77 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0e9      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_I2C_Mem_Read+0x4c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	08db      	lsrs	r3, r3, #3
 8001f94:	4a65      	ldr	r2, [pc, #404]	; (800212c <HAL_I2C_Mem_Read+0x4cc>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a1a      	lsrs	r2, r3, #8
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00da      	lsls	r2, r3, #3
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d118      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f043 0220 	orr.w	r2, r3, #32
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fd6:	b662      	cpsie	i
}
 8001fd8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e09a      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d1d9      	bne.n	8001fa8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002036:	b662      	cpsie	i
}
 8002038:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800206c:	e042      	b.n	80020f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fb32 	bl	80026dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e04c      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d118      	bne.n	80020f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f ae94 	bne.w	8001e26 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800211a:	2302      	movs	r3, #2
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	00010004 	.word	0x00010004
 8002128:	20000000 	.word	0x20000000
 800212c:	14f8b589 	.word	0x14f8b589

08002130 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	460b      	mov	r3, r1
 8002144:	813b      	strh	r3, [r7, #8]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2200      	movs	r2, #0
 8002162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f960 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002180:	d103      	bne.n	800218a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e05f      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800219c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	492d      	ldr	r1, [pc, #180]	; (8002258 <I2C_RequestMemoryWrite+0x128>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f998 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e04c      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fa02 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e02b      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021fc:	893b      	ldrh	r3, [r7, #8]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	e021      	b.n	800224c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002208:	893b      	ldrh	r3, [r7, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2da      	uxtb	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f9dc 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e005      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002242:	893b      	ldrh	r3, [r7, #8]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	00010002 	.word	0x00010002

0800225c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	460b      	mov	r3, r1
 8002270:	813b      	strh	r3, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002284:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2200      	movs	r2, #0
 800229e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8c2 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d103      	bne.n	80022c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0aa      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	4952      	ldr	r1, [pc, #328]	; (8002428 <I2C_RequestMemoryRead+0x1cc>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8fa 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e097      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f964 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d107      	bne.n	800232e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e076      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002338:	893b      	ldrh	r3, [r7, #8]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	e021      	b.n	8002388 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002344:	893b      	ldrh	r3, [r7, #8]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f93e 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b04      	cmp	r3, #4
 8002368:	d107      	bne.n	800237a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e050      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800237e:	893b      	ldrh	r3, [r7, #8]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238a:	6a39      	ldr	r1, [r7, #32]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f923 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e035      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f82b 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ea:	d103      	bne.n	80023f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e013      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023f8:	897b      	ldrh	r3, [r7, #10]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	6a3a      	ldr	r2, [r7, #32]
 800240c:	4906      	ldr	r1, [pc, #24]	; (8002428 <I2C_RequestMemoryRead+0x1cc>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f863 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	00010002 	.word	0x00010002

0800242c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243c:	e025      	b.n	800248a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d021      	beq.n	800248a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7fe fec5 	bl	80011d4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e023      	b.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10d      	bne.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	e00c      	b.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d0b6      	beq.n	800243e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e8:	e051      	b.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f8:	d123      	bne.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e046      	b.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d021      	beq.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe fe43 	bl	80011d4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e020      	b.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e00b      	b.n	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d18d      	bne.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e4:	e02d      	b.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f8ce 	bl	8002788 <I2C_IsAcknowledgeFailed>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e02d      	b.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d021      	beq.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7fe fde9 	bl	80011d4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e007      	b.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d1ca      	bne.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002666:	e02d      	b.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f88d 	bl	8002788 <I2C_IsAcknowledgeFailed>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e02d      	b.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d021      	beq.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002680:	f7fe fda8 	bl	80011d4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d302      	bcc.n	8002696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e007      	b.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d1ca      	bne.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026e8:	e042      	b.n	8002770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d119      	bne.n	800272c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0210 	mvn.w	r2, #16
 8002700:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e029      	b.n	8002780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272c:	f7fe fd52 	bl	80011d4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d302      	bcc.n	8002742 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d1b5      	bne.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d11b      	bne.n	80027d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	b08b      	sub	sp, #44	; 0x2c
 80027e8:	af06      	add	r7, sp, #24
 80027ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0fd      	b.n	80029f2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f005 ff4a 	bl	80086a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2203      	movs	r2, #3
 8002814:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 f971 	bl	8004b04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	687e      	ldr	r6, [r7, #4]
 800282a:	466d      	mov	r5, sp
 800282c:	f106 0410 	add.w	r4, r6, #16
 8002830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	1d33      	adds	r3, r6, #4
 800283a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283c:	6838      	ldr	r0, [r7, #0]
 800283e:	f002 f93b 	bl	8004ab8 <USB_CoreInit>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0ce      	b.n	80029f2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f002 f96c 	bl	8004b38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e04c      	b.n	8002900 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3301      	adds	r3, #1
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	b298      	uxth	r0, r3
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	3336      	adds	r3, #54	; 0x36
 80028a4:	4602      	mov	r2, r0
 80028a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	3303      	adds	r3, #3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3338      	adds	r3, #56	; 0x38
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	333c      	adds	r3, #60	; 0x3c
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	3340      	adds	r3, #64	; 0x40
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	3301      	adds	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d3ad      	bcc.n	8002866 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e044      	b.n	800299a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	440b      	add	r3, r1
 800291e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	3301      	adds	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3b5      	bcc.n	8002910 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	687e      	ldr	r6, [r7, #4]
 80029ac:	466d      	mov	r5, sp
 80029ae:	f106 0410 	add.w	r4, r6, #16
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	602b      	str	r3, [r5, #0]
 80029ba:	1d33      	adds	r3, r6, #4
 80029bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	f002 f8c6 	bl	8004b50 <USB_DevInit>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00d      	b.n	80029f2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 fa37 	bl	8006e5e <USB_DevDisconnect>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_PCD_Start+0x16>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e016      	b.n	8002a3e <HAL_PCD_Start+0x44>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 f85b 	bl	8004ad8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a22:	2101      	movs	r1, #1
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f006 f88c 	bl	8008b42 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 fa0b 	bl	8006e4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b088      	sub	sp, #32
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 fa0d 	bl	8006e72 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a62:	d102      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fb4a 	bl	80030fe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 f9ff 	bl	8006e72 <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7e:	d112      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f005 fe7e 	bl	800879a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f925 	bl	8002cf0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 f9e1 	bl	8006e72 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aba:	d10b      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ace:	b292      	uxth	r2, r2
 8002ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f004 f9ca 	bl	8006e72 <USB_ReadInterrupts>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae8:	d10b      	bne.n	8002b02 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afc:	b292      	uxth	r2, r2
 8002afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 f9b3 	bl	8006e72 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d126      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0204 	bic.w	r2, r2, #4
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0208 	bic.w	r2, r2, #8
 8002b42:	b292      	uxth	r2, r2
 8002b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f005 fe5f 	bl	800880c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b60:	b292      	uxth	r2, r2
 8002b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 f981 	bl	8006e72 <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b7a:	f040 8084 	bne.w	8002c86 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e011      	b.n	8002ba8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	b292      	uxth	r2, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	f107 0120 	add.w	r1, r7, #32
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
 8002baa:	2b07      	cmp	r3, #7
 8002bac:	d9ea      	bls.n	8002b84 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002bde:	bf00      	nop
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f6      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c04:	b292      	uxth	r2, r2
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e010      	b.n	8002c32 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	4611      	mov	r1, r2
 8002c18:	7ffa      	ldrb	r2, [r7, #31]
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	440a      	add	r2, r1
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	f107 0120 	add.w	r1, r7, #32
 8002c24:	440b      	add	r3, r1
 8002c26:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c2a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c2c:	7ffb      	ldrb	r3, [r7, #31]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	77fb      	strb	r3, [r7, #31]
 8002c32:	7ffb      	ldrb	r3, [r7, #31]
 8002c34:	2b07      	cmp	r3, #7
 8002c36:	d9eb      	bls.n	8002c10 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	b292      	uxth	r2, r2
 8002c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0204 	orr.w	r2, r2, #4
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 fda9 	bl	80087d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 f8f1 	bl	8006e72 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9a:	d10e      	bne.n	8002cba <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f005 fd62 	bl	800877e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 f8d7 	bl	8006e72 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	d10b      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_SetAddress+0x1a>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e013      	b.n	8002d32 <HAL_PCD_SetAddress+0x42>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 f87e 	bl	8006e24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	4608      	mov	r0, r1
 8002d44:	4611      	mov	r1, r2
 8002d46:	461a      	mov	r2, r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	70fb      	strb	r3, [r7, #3]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	803b      	strh	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da0e      	bge.n	8002d7e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	705a      	strb	r2, [r3, #1]
 8002d7c:	e00e      	b.n	8002d9c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	f003 0207 	and.w	r2, r3, #7
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002da8:	883a      	ldrh	r2, [r7, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	78ba      	ldrb	r2, [r7, #2]
 8002db2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dc6:	78bb      	ldrb	r3, [r7, #2]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d102      	bne.n	8002dd2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_PCD_EP_Open+0xa6>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e00e      	b.n	8002dfe <HAL_PCD_EP_Open+0xc4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68f9      	ldr	r1, [r7, #12]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fece 	bl	8004b90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da0e      	bge.n	8002e38 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	705a      	strb	r2, [r3, #1]
 8002e36:	e00e      	b.n	8002e56 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 0207 	and.w	r2, r3, #7
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_EP_Close+0x6a>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e00e      	b.n	8002e8e <HAL_PCD_EP_Close+0x88>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68f9      	ldr	r1, [r7, #12]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 f9f0 	bl	8005264 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	f003 0207 	and.w	r2, r3, #7
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d106      	bne.n	8002efa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6979      	ldr	r1, [r7, #20]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 fba2 	bl	800563c <USB_EPStartXfer>
 8002ef8:	e005      	b.n	8002f06 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6979      	ldr	r1, [r7, #20]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 fb9b 	bl	800563c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f20:	7afb      	ldrb	r3, [r7, #11]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 fb5f 	bl	800563c <USB_EPStartXfer>
 8002f7e:	e005      	b.n	8002f8c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f002 fb58 	bl	800563c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d901      	bls.n	8002fb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04c      	b.n	800304e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da0e      	bge.n	8002fda <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	705a      	strb	r2, [r3, #1]
 8002fd8:	e00c      	b.n	8002ff4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_PCD_EP_SetStall+0x7e>
 8003010:	2302      	movs	r3, #2
 8003012:	e01c      	b.n	800304e <HAL_PCD_EP_SetStall+0xb8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fe01 	bl	8006c2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f003 ff26 	bl	8006e90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d901      	bls.n	8003074 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e040      	b.n	80030f6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da0e      	bge.n	800309a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00e      	b.n	80030b8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0207 	and.w	r2, r3, #7
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_PCD_EP_ClrStall+0x82>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e00e      	b.n	80030f6 <HAL_PCD_EP_ClrStall+0xa0>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68f9      	ldr	r1, [r7, #12]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fdef 	bl	8006cca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b08e      	sub	sp, #56	; 0x38
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003106:	e2ec      	b.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003110:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800311e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 8161 	bne.w	80033ea <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003128:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d152      	bne.n	80031d8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	81fb      	strh	r3, [r7, #14]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	89fb      	ldrh	r3, [r7, #14]
 800314a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3328      	adds	r3, #40	; 0x28
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	3302      	adds	r3, #2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	441a      	add	r2, r3
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003196:	2100      	movs	r1, #0
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f005 fad6 	bl	800874a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 829b 	beq.w	80036e2 <PCD_EP_ISR_Handler+0x5e4>
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8296 	bne.w	80036e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b292      	uxth	r2, r2
 80031ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031d6:	e284      	b.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d034      	beq.n	800325c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	3306      	adds	r3, #6
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4413      	add	r3, r2
 8003210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 fe7d 	bl	8006f30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29a      	uxth	r2, r3
 800323e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003242:	4013      	ands	r3, r2
 8003244:	823b      	strh	r3, [r7, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	8a3a      	ldrh	r2, [r7, #16]
 800324c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003250:	b292      	uxth	r2, r2
 8003252:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f005 fa4b 	bl	80086f0 <HAL_PCD_SetupStageCallback>
 800325a:	e242      	b.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800325c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003260:	2b00      	cmp	r3, #0
 8003262:	f280 823e 	bge.w	80036e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003272:	4013      	ands	r3, r2
 8003274:	83bb      	strh	r3, [r7, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	8bba      	ldrh	r2, [r7, #28]
 800327c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003280:	b292      	uxth	r2, r2
 8003282:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	3306      	adds	r3, #6
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d019      	beq.n	80032ec <PCD_EP_ISR_Handler+0x1ee>
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d015      	beq.n	80032ec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6959      	ldr	r1, [r3, #20]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f003 fe2d 	bl	8006f30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	441a      	add	r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032e4:	2100      	movs	r1, #0
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f005 fa14 	bl	8008714 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 81f2 	bne.w	80036e2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800330c:	b29b      	uxth	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d112      	bne.n	800334c <PCD_EP_ISR_Handler+0x24e>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003330:	b29a      	uxth	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003344:	b29a      	uxth	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	801a      	strh	r2, [r3, #0]
 800334a:	e02f      	b.n	80033ac <PCD_EP_ISR_Handler+0x2ae>
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b3e      	cmp	r3, #62	; 0x3e
 8003352:	d813      	bhi.n	800337c <PCD_EP_ISR_Handler+0x27e>
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <PCD_EP_ISR_Handler+0x270>
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	3301      	adds	r3, #1
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	b29b      	uxth	r3, r3
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	b29a      	uxth	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	801a      	strh	r2, [r3, #0]
 800337a:	e017      	b.n	80033ac <PCD_EP_ISR_Handler+0x2ae>
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <PCD_EP_ISR_Handler+0x298>
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	3b01      	subs	r3, #1
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	b29b      	uxth	r3, r3
 800339a:	029b      	lsls	r3, r3, #10
 800339c:	b29b      	uxth	r3, r3
 800339e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033bc:	827b      	strh	r3, [r7, #18]
 80033be:	8a7b      	ldrh	r3, [r7, #18]
 80033c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033c4:	827b      	strh	r3, [r7, #18]
 80033c6:	8a7b      	ldrh	r3, [r7, #18]
 80033c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033cc:	827b      	strh	r3, [r7, #18]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	8a7b      	ldrh	r3, [r7, #18]
 80033d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	8013      	strh	r3, [r2, #0]
 80033e8:	e17b      	b.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003400:	2b00      	cmp	r3, #0
 8003402:	f280 80ea 	bge.w	80035da <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29a      	uxth	r2, r3
 8003418:	f640 738f 	movw	r3, #3983	; 0xf8f
 800341c:	4013      	ands	r3, r2
 800341e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003434:	b292      	uxth	r2, r2
 8003436:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003438:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	7b1b      	ldrb	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d122      	bne.n	800349c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	3306      	adds	r3, #6
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8087 	beq.w	8003596 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	6959      	ldr	r1, [r3, #20]
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	88da      	ldrh	r2, [r3, #6]
 8003494:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003496:	f003 fd4b 	bl	8006f30 <USB_ReadPMA>
 800349a:	e07c      	b.n	8003596 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	78db      	ldrb	r3, [r3, #3]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d108      	bne.n	80034b6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034a6:	461a      	mov	r2, r3
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f927 	bl	80036fe <HAL_PCD_EP_DB_Receive>
 80034b0:	4603      	mov	r3, r0
 80034b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80034b4:	e06f      	b.n	8003596 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d021      	beq.n	8003554 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	3302      	adds	r3, #2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003538:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800353a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02a      	beq.n	8003596 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	6959      	ldr	r1, [r3, #20]
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	891a      	ldrh	r2, [r3, #8]
 800354c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800354e:	f003 fcef 	bl	8006f30 <USB_ReadPMA>
 8003552:	e020      	b.n	8003596 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	3306      	adds	r3, #6
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800357e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	6959      	ldr	r1, [r3, #20]
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	895a      	ldrh	r2, [r3, #10]
 8003590:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003592:	f003 fccd 	bl	8006f30 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800359c:	441a      	add	r2, r3
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035a8:	441a      	add	r2, r3
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <PCD_EP_ISR_Handler+0x4c2>
 80035b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d206      	bcs.n	80035ce <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f005 f8a4 	bl	8008714 <HAL_PCD_DataOutStageCallback>
 80035cc:	e005      	b.n	80035da <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d4:	4618      	mov	r0, r3
 80035d6:	f002 f831 	bl	800563c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d07e      	beq.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80035e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	843b      	strh	r3, [r7, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	8c3b      	ldrh	r3, [r7, #32]
 8003624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362c:	b29b      	uxth	r3, r3
 800362e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	78db      	ldrb	r3, [r3, #3]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d00c      	beq.n	8003652 <PCD_EP_ISR_Handler+0x554>
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	78db      	ldrb	r3, [r3, #3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003644:	2b02      	cmp	r3, #2
 8003646:	d146      	bne.n	80036d6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003648:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d141      	bne.n	80036d6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	3302      	adds	r3, #2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800367a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	8bfb      	ldrh	r3, [r7, #30]
 8003682:	429a      	cmp	r2, r3
 8003684:	d906      	bls.n	8003694 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	8bfb      	ldrh	r3, [r7, #30]
 800368c:	1ad2      	subs	r2, r2, r3
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	619a      	str	r2, [r3, #24]
 8003692:	e002      	b.n	800369a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f005 f84e 	bl	800874a <HAL_PCD_DataInStageCallback>
 80036ae:	e018      	b.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	8bfb      	ldrh	r3, [r7, #30]
 80036b6:	441a      	add	r2, r3
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	8bfb      	ldrh	r3, [r7, #30]
 80036c2:	441a      	add	r2, r3
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 ffb4 	bl	800563c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80036d4:	e005      	b.n	80036e2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036d8:	461a      	mov	r2, r3
 80036da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f91b 	bl	8003918 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f6ff ad0a 	blt.w	8003108 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3738      	adds	r7, #56	; 0x38
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d07e      	beq.n	8003814 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	3302      	adds	r3, #2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	8b7b      	ldrh	r3, [r7, #26]
 8003746:	429a      	cmp	r2, r3
 8003748:	d306      	bcc.n	8003758 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	8b7b      	ldrh	r3, [r7, #26]
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e002      	b.n	800375e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d123      	bne.n	80037ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003780:	833b      	strh	r3, [r7, #24]
 8003782:	8b3b      	ldrh	r3, [r7, #24]
 8003784:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003788:	833b      	strh	r3, [r7, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8b3b      	ldrh	r3, [r7, #24]
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01f      	beq.n	80037f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	82fb      	strh	r3, [r7, #22]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	8afb      	ldrh	r3, [r7, #22]
 80037e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f8:	8b7b      	ldrh	r3, [r7, #26]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8087 	beq.w	800390e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6959      	ldr	r1, [r3, #20]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	891a      	ldrh	r2, [r3, #8]
 800380c:	8b7b      	ldrh	r3, [r7, #26]
 800380e:	f003 fb8f 	bl	8006f30 <USB_ReadPMA>
 8003812:	e07c      	b.n	800390e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	3306      	adds	r3, #6
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	8b7b      	ldrh	r3, [r7, #26]
 8003844:	429a      	cmp	r2, r3
 8003846:	d306      	bcc.n	8003856 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	8b7b      	ldrh	r3, [r7, #26]
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	e002      	b.n	800385c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d123      	bne.n	80038ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	83fb      	strh	r3, [r7, #30]
 8003880:	8bfb      	ldrh	r3, [r7, #30]
 8003882:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003886:	83fb      	strh	r3, [r7, #30]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8bfb      	ldrh	r3, [r7, #30]
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11f      	bne.n	80038f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d0:	83bb      	strh	r3, [r7, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	441a      	add	r2, r3
 80038e0:	8bbb      	ldrh	r3, [r7, #28]
 80038e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6959      	ldr	r1, [r3, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	895a      	ldrh	r2, [r3, #10]
 8003908:	8b7b      	ldrh	r3, [r7, #26]
 800390a:	f003 fb11 	bl	8006f30 <USB_ReadPMA>
    }
  }

  return count;
 800390e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b0a2      	sub	sp, #136	; 0x88
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 81c7 	beq.w	8003cc0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393a:	b29b      	uxth	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	3302      	adds	r3, #2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003966:	429a      	cmp	r2, r3
 8003968:	d907      	bls.n	800397a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	619a      	str	r2, [r3, #24]
 8003978:	e002      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 80b9 	bne.w	8003afc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d126      	bne.n	80039e0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	4413      	add	r3, r2
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	011a      	lsls	r2, r3, #4
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e01a      	b.n	8003a16 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d116      	bne.n	8003a16 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	633b      	str	r3, [r7, #48]	; 0x30
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	4413      	add	r3, r2
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	4413      	add	r3, r2
 8003a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	2200      	movs	r2, #0
 8003a14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d126      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4413      	add	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	011a      	lsls	r2, r3, #4
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	e017      	b.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d113      	bne.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	4413      	add	r3, r2
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	011a      	lsls	r2, r3, #4
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	4413      	add	r3, r2
 8003a96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f004 fe4e 	bl	800874a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 82d4 	beq.w	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	827b      	strh	r3, [r7, #18]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	8a7b      	ldrh	r3, [r7, #18]
 8003ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8013      	strh	r3, [r2, #0]
 8003afa:	e2b2      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 8286 	bne.w	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b5e:	441a      	add	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d309      	bcc.n	8003b92 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	621a      	str	r2, [r3, #32]
 8003b90:	e015      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003b9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ba8:	e009      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d155      	bne.n	8003c72 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	4413      	add	r3, r2
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	011a      	lsls	r2, r3, #4
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d112      	bne.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x302>
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	e047      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x392>
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	2b3e      	cmp	r3, #62	; 0x3e
 8003c1e:	d811      	bhi.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c32:	3301      	adds	r3, #1
 8003c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	e032      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x392>
 8003c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x342>
 8003c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c56:	3b01      	subs	r3, #1
 8003c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	029b      	lsls	r3, r3, #10
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e01b      	b.n	8003caa <HAL_PCD_EP_DB_Transmit+0x392>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d117      	bne.n	8003caa <HAL_PCD_EP_DB_Transmit+0x392>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8e:	4413      	add	r3, r2
 8003c90:	643b      	str	r3, [r7, #64]	; 0x40
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	011a      	lsls	r2, r3, #4
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6959      	ldr	r1, [r3, #20]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	891a      	ldrh	r2, [r3, #8]
 8003cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f003 f8f4 	bl	8006ea6 <USB_WritePMA>
 8003cbe:	e1d0      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3306      	adds	r3, #6
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d307      	bcc.n	8003d08 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d00:	1ad2      	subs	r2, r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	e002      	b.n	8003d0e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 80c4 	bne.w	8003ea0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d126      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x456>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	4413      	add	r3, r2
 8003d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	011a      	lsls	r2, r3, #4
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	4413      	add	r3, r2
 8003d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	e01a      	b.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d116      	bne.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	677b      	str	r3, [r7, #116]	; 0x74
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8a:	4413      	add	r3, r2
 8003d8c:	677b      	str	r3, [r7, #116]	; 0x74
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	011a      	lsls	r2, r3, #4
 8003d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d96:	4413      	add	r3, r2
 8003d98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d9c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da0:	2200      	movs	r2, #0
 8003da2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d12f      	bne.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dca:	4413      	add	r3, r2
 8003dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	011a      	lsls	r2, r3, #4
 8003dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dda:	4413      	add	r3, r2
 8003ddc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e0e:	801a      	strh	r2, [r3, #0]
 8003e10:	e017      	b.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d113      	bne.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e28:	4413      	add	r3, r2
 8003e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	011a      	lsls	r2, r3, #4
 8003e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e34:	4413      	add	r3, r2
 8003e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e3e:	2200      	movs	r2, #0
 8003e40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f004 fc7e 	bl	800874a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 8104 	bne.w	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]
 8003e9e:	e0e0      	b.n	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d121      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	f040 80b4 	bne.w	8004062 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f02:	441a      	add	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f10:	441a      	add	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6a1a      	ldr	r2, [r3, #32]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d309      	bcc.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2e:	1ad2      	subs	r2, r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	621a      	str	r2, [r3, #32]
 8003f34:	e015      	b.n	8003f62 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003f3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f4c:	e009      	b.n	8003f62 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	667b      	str	r3, [r7, #100]	; 0x64
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	785b      	ldrb	r3, [r3, #1]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d155      	bne.n	800401c <HAL_PCD_EP_DB_Transmit+0x704>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f84:	4413      	add	r3, r2
 8003f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	011a      	lsls	r2, r3, #4
 8003f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f90:	4413      	add	r3, r2
 8003f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d112      	bne.n	8003fc4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e044      	b.n	800404e <HAL_PCD_EP_DB_Transmit+0x736>
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc8:	d811      	bhi.n	8003fee <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fdc:	3301      	adds	r3, #1
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e02f      	b.n	800404e <HAL_PCD_EP_DB_Transmit+0x736>
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004000:	3b01      	subs	r3, #1
 8004002:	657b      	str	r3, [r7, #84]	; 0x54
 8004004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004006:	b29b      	uxth	r3, r3
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	b29b      	uxth	r3, r3
 800400c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004014:	b29a      	uxth	r2, r3
 8004016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	e018      	b.n	800404e <HAL_PCD_EP_DB_Transmit+0x736>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d114      	bne.n	800404e <HAL_PCD_EP_DB_Transmit+0x736>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004032:	4413      	add	r3, r2
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	011a      	lsls	r2, r3, #4
 800403c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403e:	4413      	add	r3, r2
 8004040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004044:	663b      	str	r3, [r7, #96]	; 0x60
 8004046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004048:	b29a      	uxth	r2, r3
 800404a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800404c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6959      	ldr	r1, [r3, #20]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	895a      	ldrh	r2, [r3, #10]
 800405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405c:	b29b      	uxth	r3, r3
 800405e:	f002 ff22 	bl	8006ea6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407c:	823b      	strh	r3, [r7, #16]
 800407e:	8a3b      	ldrh	r3, [r7, #16]
 8004080:	f083 0310 	eor.w	r3, r3, #16
 8004084:	823b      	strh	r3, [r7, #16]
 8004086:	8a3b      	ldrh	r3, [r7, #16]
 8004088:	f083 0320 	eor.w	r3, r3, #32
 800408c:	823b      	strh	r3, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	8a3b      	ldrh	r3, [r7, #16]
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3788      	adds	r7, #136	; 0x88
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	817b      	strh	r3, [r7, #10]
 80040ca:	4613      	mov	r3, r2
 80040cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80040ce:	897b      	ldrh	r3, [r7, #10]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040da:	897b      	ldrh	r3, [r7, #10]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4413      	add	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e009      	b.n	8004106 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040f2:	897a      	ldrh	r2, [r7, #10]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004106:	893b      	ldrh	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2200      	movs	r2, #0
 8004110:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	b29a      	uxth	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	80da      	strh	r2, [r3, #6]
 800411a:	e00b      	b.n	8004134 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2201      	movs	r2, #1
 8004120:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	b29a      	uxth	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b29a      	uxth	r2, r3
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e26c      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8087 	beq.w	800426e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004160:	4b92      	ldr	r3, [pc, #584]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b04      	cmp	r3, #4
 800416a:	d00c      	beq.n	8004186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d112      	bne.n	800419e <HAL_RCC_OscConfig+0x5e>
 8004178:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d10b      	bne.n	800419e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004186:	4b89      	ldr	r3, [pc, #548]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d06c      	beq.n	800426c <HAL_RCC_OscConfig+0x12c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d168      	bne.n	800426c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e246      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x76>
 80041a8:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e02e      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x98>
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7a      	ldr	r2, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b78      	ldr	r3, [pc, #480]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0xbc>
 80041e2:	4b72      	ldr	r3, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a71      	ldr	r2, [pc, #452]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041fc:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6a      	ldr	r2, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fc ffda 	bl	80011d4 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fc ffd6 	bl	80011d4 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1fa      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xe4>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fc ffc6 	bl	80011d4 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fc ffc2 	bl	80011d4 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1e6      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x10c>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004286:	4b49      	ldr	r3, [pc, #292]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x18c>
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x176>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1ba      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4939      	ldr	r1, [pc, #228]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x270>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fc ff7b 	bl	80011d4 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fc ff77 	bl	80011d4 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e19b      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4927      	ldr	r1, [pc, #156]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fc ff5a 	bl	80011d4 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7fc ff56 	bl	80011d4 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e17a      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03a      	beq.n	80043c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d019      	beq.n	800438a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7fc ff3a 	bl	80011d4 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7fc ff36 	bl	80011d4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e15a      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004382:	2001      	movs	r0, #1
 8004384:	f000 fac4 	bl	8004910 <RCC_Delay>
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fc ff20 	bl	80011d4 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004396:	e00f      	b.n	80043b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7fc ff1c 	bl	80011d4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d908      	bls.n	80043b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e140      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	42420000 	.word	0x42420000
 80043b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b9e      	ldr	r3, [pc, #632]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e9      	bne.n	8004398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a6 	beq.w	800451e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b97      	ldr	r3, [pc, #604]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b94      	ldr	r3, [pc, #592]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4a93      	ldr	r2, [pc, #588]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	61d3      	str	r3, [r2, #28]
 80043ee:	4b91      	ldr	r3, [pc, #580]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4b8e      	ldr	r3, [pc, #568]	; (8004638 <HAL_RCC_OscConfig+0x4f8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440a:	4b8b      	ldr	r3, [pc, #556]	; (8004638 <HAL_RCC_OscConfig+0x4f8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a8a      	ldr	r2, [pc, #552]	; (8004638 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004416:	f7fc fedd 	bl	80011d4 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fc fed9 	bl	80011d4 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b64      	cmp	r3, #100	; 0x64
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0fd      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b81      	ldr	r3, [pc, #516]	; (8004638 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x312>
 8004444:	4b7b      	ldr	r3, [pc, #492]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a7a      	ldr	r2, [pc, #488]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	e02d      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x334>
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6213      	str	r3, [r2, #32]
 8004466:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4a72      	ldr	r2, [pc, #456]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6213      	str	r3, [r2, #32]
 8004472:	e01c      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b05      	cmp	r3, #5
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x356>
 800447c:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a69      	ldr	r2, [pc, #420]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e00b      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004496:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a66      	ldr	r2, [pc, #408]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6213      	str	r3, [r2, #32]
 80044a2:	4b64      	ldr	r3, [pc, #400]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a63      	ldr	r2, [pc, #396]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d015      	beq.n	80044e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b6:	f7fc fe8d 	bl	80011d4 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fc fe89 	bl	80011d4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0ab      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b57      	ldr	r3, [pc, #348]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCC_OscConfig+0x37e>
 80044e0:	e014      	b.n	800450c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fc fe77 	bl	80011d4 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fc fe73 	bl	80011d4 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e095      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	4b4c      	ldr	r3, [pc, #304]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ee      	bne.n	80044ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b48      	ldr	r3, [pc, #288]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4a47      	ldr	r2, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8081 	beq.w	800462a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004528:	4b42      	ldr	r3, [pc, #264]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d061      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d146      	bne.n	80045ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b3f      	ldr	r3, [pc, #252]	; (800463c <HAL_RCC_OscConfig+0x4fc>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fc fe47 	bl	80011d4 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fc fe43 	bl	80011d4 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e067      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455c:	4b35      	ldr	r3, [pc, #212]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004572:	4b30      	ldr	r3, [pc, #192]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	492d      	ldr	r1, [pc, #180]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a19      	ldr	r1, [r3, #32]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	430b      	orrs	r3, r1
 8004596:	4927      	ldr	r1, [pc, #156]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_RCC_OscConfig+0x4fc>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fc fe17 	bl	80011d4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fc fe13 	bl	80011d4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e037      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x46a>
 80045c8:	e02f      	b.n	800462a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b1c      	ldr	r3, [pc, #112]	; (800463c <HAL_RCC_OscConfig+0x4fc>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fc fe00 	bl	80011d4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fc fdfc 	bl	80011d4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e020      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x498>
 80045f6:	e018      	b.n	800462a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e013      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x4f4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	429a      	cmp	r2, r3
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	d001      	beq.n	800462a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
 800463c:	42420060 	.word	0x42420060

08004640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0d0      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004654:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d910      	bls.n	8004684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b67      	ldr	r3, [pc, #412]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 0207 	bic.w	r2, r3, #7
 800466a:	4965      	ldr	r1, [pc, #404]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d040      	beq.n	8004760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d115      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d107      	bne.n	800470e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fe:	4b41      	ldr	r3, [pc, #260]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e073      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e06b      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471e:	4b39      	ldr	r3, [pc, #228]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	4936      	ldr	r1, [pc, #216]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004730:	f7fc fd50 	bl	80011d4 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	e00a      	b.n	800474e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004738:	f7fc fd4c 	bl	80011d4 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	; 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e053      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474e:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 020c 	and.w	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	429a      	cmp	r2, r3
 800475e:	d1eb      	bne.n	8004738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d210      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 0207 	bic.w	r2, r3, #7
 8004776:	4922      	ldr	r1, [pc, #136]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_ClockConfig+0x1c0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f821 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490a      	ldr	r1, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1cc>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1d0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc fcae 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40022000 	.word	0x40022000
 8004804:	40021000 	.word	0x40021000
 8004808:	08008c78 	.word	0x08008c78
 800480c:	20000000 	.word	0x20000000
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	b490      	push	{r4, r7}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800481a:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800481c:	1d3c      	adds	r4, r7, #4
 800481e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004824:	f240 2301 	movw	r3, #513	; 0x201
 8004828:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b04      	cmp	r3, #4
 800484c:	d002      	beq.n	8004854 <HAL_RCC_GetSysClockFreq+0x40>
 800484e:	2b08      	cmp	r3, #8
 8004850:	d003      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x46>
 8004852:	e02d      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004856:	623b      	str	r3, [r7, #32]
      break;
 8004858:	e02d      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	0c9b      	lsrs	r3, r3, #18
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004866:	4413      	add	r3, r2
 8004868:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800486c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c5b      	lsrs	r3, r3, #17
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004886:	4413      	add	r3, r2
 8004888:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800488c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004892:	fb02 f203 	mul.w	r2, r2, r3
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e004      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	623b      	str	r3, [r7, #32]
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b2:	623b      	str	r3, [r7, #32]
      break;
 80048b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	; 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc90      	pop	{r4, r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	08008c20 	.word	0x08008c20
 80048c8:	40021000 	.word	0x40021000
 80048cc:	007a1200 	.word	0x007a1200
 80048d0:	003d0900 	.word	0x003d0900

080048d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	20000000 	.word	0x20000000

080048e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048ec:	f7ff fff2 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4903      	ldr	r1, [pc, #12]	; (800490c <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	08008c88 	.word	0x08008c88

08004910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <RCC_Delay+0x34>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <RCC_Delay+0x38>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0a5b      	lsrs	r3, r3, #9
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800492c:	bf00      	nop
  }
  while (Delay --);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1e5a      	subs	r2, r3, #1
 8004932:	60fa      	str	r2, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f9      	bne.n	800492c <RCC_Delay+0x1c>
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	20000000 	.word	0x20000000
 8004948:	10624dd3 	.word	0x10624dd3

0800494c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d07d      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496c:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10d      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	4b4c      	ldr	r3, [pc, #304]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4a4b      	ldr	r2, [pc, #300]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004982:	61d3      	str	r3, [r2, #28]
 8004984:	4b49      	ldr	r3, [pc, #292]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d118      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a42      	ldr	r2, [pc, #264]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ac:	f7fc fc12 	bl	80011d4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	e008      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b4:	f7fc fc0e 	bl	80011d4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e06d      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c6:	4b3a      	ldr	r3, [pc, #232]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02e      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d027      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f0:	4b2e      	ldr	r3, [pc, #184]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049fa:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a06:	4a29      	ldr	r2, [pc, #164]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d014      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fc fbdd 	bl	80011d4 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fc fbd9 	bl	80011d4 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e036      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ee      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a40:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4917      	ldr	r1, [pc, #92]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a58:	4b14      	ldr	r3, [pc, #80]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4a13      	ldr	r2, [pc, #76]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a70:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	490b      	ldr	r1, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4904      	ldr	r1, [pc, #16]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	42420440 	.word	0x42420440

08004ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ab8:	b084      	sub	sp, #16
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	f107 0014 	add.w	r0, r7, #20
 8004ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	b004      	add	sp, #16
 8004ad6:	4770      	bx	lr

08004ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ae8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004aec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	4013      	ands	r3, r2
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b50:	b084      	sub	sp, #16
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	f107 0014 	add.w	r0, r7, #20
 8004b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	b004      	add	sp, #16
 8004b8e:	4770      	bx	lr

08004b90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b09b      	sub	sp, #108	; 0x6c
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	78db      	ldrb	r3, [r3, #3]
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d81f      	bhi.n	8004c02 <USB_ActivateEndpoint+0x72>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <USB_ActivateEndpoint+0x38>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004c0b 	.word	0x08004c0b
 8004bd4:	08004be7 	.word	0x08004be7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004be4:	e012      	b.n	8004c0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004be6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bf2:	e00b      	b.n	8004c0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bfc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c00:	e004      	b.n	8004c0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c08:	e000      	b.n	8004c0c <USB_ActivateEndpoint+0x7c>
      break;
 8004c0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	7b1b      	ldrb	r3, [r3, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f040 8149 	bne.w	8004f10 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8084 	beq.w	8004d90 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	011a      	lsls	r2, r3, #4
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	81fb      	strh	r3, [r7, #14]
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <USB_ActivateEndpoint+0x17c>
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	81bb      	strh	r3, [r7, #12]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	89bb      	ldrh	r3, [r7, #12]
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	78db      	ldrb	r3, [r3, #3]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d020      	beq.n	8004d56 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2a:	813b      	strh	r3, [r7, #8]
 8004d2c:	893b      	ldrh	r3, [r7, #8]
 8004d2e:	f083 0320 	eor.w	r3, r3, #32
 8004d32:	813b      	strh	r3, [r7, #8]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	893b      	ldrh	r3, [r7, #8]
 8004d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8013      	strh	r3, [r2, #0]
 8004d54:	e27f      	b.n	8005256 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6c:	817b      	strh	r3, [r7, #10]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	897b      	ldrh	r3, [r7, #10]
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]
 8004d8e:	e262      	b.n	8005256 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	4413      	add	r3, r2
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	011a      	lsls	r2, r3, #4
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	88db      	ldrh	r3, [r3, #6]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	4413      	add	r3, r2
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	011a      	lsls	r2, r3, #4
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	4413      	add	r3, r2
 8004de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d112      	bne.n	8004e16 <USB_ActivateEndpoint+0x286>
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	e02f      	b.n	8004e76 <USB_ActivateEndpoint+0x2e6>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1c:	d813      	bhi.n	8004e46 <USB_ActivateEndpoint+0x2b6>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <USB_ActivateEndpoint+0x2a8>
 8004e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e34:	3301      	adds	r3, #1
 8004e36:	663b      	str	r3, [r7, #96]	; 0x60
 8004e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e017      	b.n	8004e76 <USB_ActivateEndpoint+0x2e6>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d102      	bne.n	8004e60 <USB_ActivateEndpoint+0x2d0>
 8004e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	83fb      	strh	r3, [r7, #30]
 8004e84:	8bfb      	ldrh	r3, [r7, #30]
 8004e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01b      	beq.n	8004ec6 <USB_ActivateEndpoint+0x336>
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	83bb      	strh	r3, [r7, #28]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8bbb      	ldrh	r3, [r7, #28]
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	837b      	strh	r3, [r7, #26]
 8004ede:	8b7b      	ldrh	r3, [r7, #26]
 8004ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ee4:	837b      	strh	r3, [r7, #26]
 8004ee6:	8b7b      	ldrh	r3, [r7, #26]
 8004ee8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eec:	837b      	strh	r3, [r7, #26]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8b7b      	ldrh	r3, [r7, #26]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
 8004f0e:	e1a2      	b.n	8005256 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5c:	4413      	add	r3, r2
 8004f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	011a      	lsls	r2, r3, #4
 8004f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	891b      	ldrh	r3, [r3, #8]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	4413      	add	r3, r2
 8004f92:	653b      	str	r3, [r7, #80]	; 0x50
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	895b      	ldrh	r3, [r3, #10]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f040 8091 	bne.w	80050e0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01b      	beq.n	800500e <USB_ActivateEndpoint+0x47e>
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	873b      	strh	r3, [r7, #56]	; 0x38
 800501c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01b      	beq.n	800505e <USB_ActivateEndpoint+0x4ce>
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005074:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005076:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800507c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800507e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005084:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	441a      	add	r2, r3
 8005090:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]
 80050de:	e0ba      	b.n	8005256 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01d      	beq.n	8005138 <USB_ActivateEndpoint+0x5a8>
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	441a      	add	r2, r3
 8005120:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800514c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01d      	beq.n	8005190 <USB_ActivateEndpoint+0x600>
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800517c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800518c:	b29b      	uxth	r3, r3
 800518e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d024      	beq.n	80051e2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051b6:	f083 0320 	eor.w	r3, r3, #32
 80051ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	441a      	add	r2, r3
 80051c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051dc:	b29b      	uxth	r3, r3
 80051de:	8013      	strh	r3, [r2, #0]
 80051e0:	e01d      	b.n	800521e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	441a      	add	r2, r3
 8005206:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005256:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800525a:	4618      	mov	r0, r3
 800525c:	376c      	adds	r7, #108	; 0x6c
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005264:	b480      	push	{r7}
 8005266:	b08d      	sub	sp, #52	; 0x34
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	7b1b      	ldrb	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 808e 	bne.w	8005394 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d044      	beq.n	800530a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	81bb      	strh	r3, [r7, #12]
 800528e:	89bb      	ldrh	r3, [r7, #12]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01b      	beq.n	80052d0 <USB_DeactivateEndpoint+0x6c>
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	817b      	strh	r3, [r7, #10]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e6:	813b      	strh	r3, [r7, #8]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	893b      	ldrh	r3, [r7, #8]
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]
 8005308:	e192      	b.n	8005630 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	827b      	strh	r3, [r7, #18]
 8005318:	8a7b      	ldrh	r3, [r7, #18]
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01b      	beq.n	800535a <USB_DeactivateEndpoint+0xf6>
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005338:	823b      	strh	r3, [r7, #16]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	8a3b      	ldrh	r3, [r7, #16]
 8005346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	b29b      	uxth	r3, r3
 8005358:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	81fb      	strh	r3, [r7, #14]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]
 8005392:	e14d      	b.n	8005630 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 80a5 	bne.w	80054e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	843b      	strh	r3, [r7, #32]
 80053ac:	8c3b      	ldrh	r3, [r7, #32]
 80053ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01b      	beq.n	80053ee <USB_DeactivateEndpoint+0x18a>
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	83fb      	strh	r3, [r7, #30]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	8bfb      	ldrh	r3, [r7, #30]
 80053da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	83bb      	strh	r3, [r7, #28]
 80053fc:	8bbb      	ldrh	r3, [r7, #28]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01b      	beq.n	800543e <USB_DeactivateEndpoint+0x1da>
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541c:	837b      	strh	r3, [r7, #26]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	8b7b      	ldrh	r3, [r7, #26]
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	833b      	strh	r3, [r7, #24]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	8b3b      	ldrh	r3, [r7, #24]
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005472:	b29b      	uxth	r3, r3
 8005474:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	82fb      	strh	r3, [r7, #22]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	8afb      	ldrh	r3, [r7, #22]
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c4:	82bb      	strh	r3, [r7, #20]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8abb      	ldrh	r3, [r7, #20]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
 80054e6:	e0a3      	b.n	8005630 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <USB_DeactivateEndpoint+0x2d4>
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	b29b      	uxth	r3, r3
 8005536:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <USB_DeactivateEndpoint+0x324>
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	853b      	strh	r3, [r7, #40]	; 0x28
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	441a      	add	r2, r3
 8005572:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005584:	b29b      	uxth	r3, r3
 8005586:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3734      	adds	r7, #52	; 0x34
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b0cc      	sub	sp, #304	; 0x130
 8005640:	af00      	add	r7, sp, #0
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	6018      	str	r0, [r3, #0]
 8005646:	463b      	mov	r3, r7
 8005648:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800564a:	463b      	mov	r3, r7
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b01      	cmp	r3, #1
 8005652:	f040 872e 	bne.w	80064b2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005656:	463b      	mov	r3, r7
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d905      	bls.n	8005672 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005666:	463b      	mov	r3, r7
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005670:	e004      	b.n	800567c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800567c:	463b      	mov	r3, r7
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	7b1b      	ldrb	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d134      	bne.n	80056f0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6959      	ldr	r1, [r3, #20]
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	88da      	ldrh	r2, [r3, #6]
 8005692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005696:	b29b      	uxth	r3, r3
 8005698:	1d38      	adds	r0, r7, #4
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	f001 fc03 	bl	8006ea6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056a0:	f107 0310 	add.w	r3, r7, #16
 80056a4:	1d3a      	adds	r2, r7, #4
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	1d3b      	adds	r3, r7, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4619      	mov	r1, r3
 80056b6:	f107 0310 	add.w	r3, r7, #16
 80056ba:	f107 0210 	add.w	r2, r7, #16
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	440a      	add	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4413      	add	r3, r2
 80056d4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80056d8:	f107 030c 	add.w	r3, r7, #12
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f107 030c 	add.w	r3, r7, #12
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	801a      	strh	r2, [r3, #0]
 80056ec:	f000 beac 	b.w	8006448 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	78db      	ldrb	r3, [r3, #3]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	f040 838c 	bne.w	8005e14 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056fc:	463b      	mov	r3, r7
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a1a      	ldr	r2, [r3, #32]
 8005702:	463b      	mov	r3, r7
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	f240 8330 	bls.w	8005d6e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005728:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800573e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005746:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574e:	b29b      	uxth	r3, r3
 8005750:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a1a      	ldr	r2, [r3, #32]
 8005758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575c:	1ad2      	subs	r2, r2, r3
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 819e 	beq.w	8005abc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005784:	1d3a      	adds	r2, r7, #4
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	463b      	mov	r3, r7
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d17a      	bne.n	800588a <USB_EPStartXfer+0x24e>
 8005794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005798:	1d3a      	adds	r2, r7, #4
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	4619      	mov	r1, r3
 80057aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	440a      	add	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	011a      	lsls	r2, r3, #4
 80057c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80057cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d11a      	bne.n	8005810 <USB_EPStartXfer+0x1d4>
 80057da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005804:	b29a      	uxth	r2, r3
 8005806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e062      	b.n	80058d6 <USB_EPStartXfer+0x29a>
 8005810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005814:	2b3e      	cmp	r3, #62	; 0x3e
 8005816:	d819      	bhi.n	800584c <USB_EPStartXfer+0x210>
 8005818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <USB_EPStartXfer+0x1fc>
 800582e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005832:	3301      	adds	r3, #1
 8005834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800583c:	b29b      	uxth	r3, r3
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	b29a      	uxth	r2, r3
 8005842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e044      	b.n	80058d6 <USB_EPStartXfer+0x29a>
 800584c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <USB_EPStartXfer+0x230>
 8005862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005866:	3b01      	subs	r3, #1
 8005868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800586c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005870:	b29b      	uxth	r3, r3
 8005872:	029b      	lsls	r3, r3, #10
 8005874:	b29b      	uxth	r3, r3
 8005876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587e:	b29a      	uxth	r2, r3
 8005880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e025      	b.n	80058d6 <USB_EPStartXfer+0x29a>
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d120      	bne.n	80058d6 <USB_EPStartXfer+0x29a>
 8005894:	1d3b      	adds	r3, r7, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589c:	b29b      	uxth	r3, r3
 800589e:	4619      	mov	r1, r3
 80058a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	440a      	add	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	463b      	mov	r3, r7
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	011a      	lsls	r2, r3, #4
 80058b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4413      	add	r3, r2
 80058be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80058c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	895b      	ldrh	r3, [r3, #10]
 80058dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6959      	ldr	r1, [r3, #20]
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058f0:	1d38      	adds	r0, r7, #4
 80058f2:	6800      	ldr	r0, [r0, #0]
 80058f4:	f001 fad7 	bl	8006ea6 <USB_WritePMA>
            ep->xfer_buff += len;
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	441a      	add	r2, r3
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	429a      	cmp	r2, r3
 8005918:	d909      	bls.n	800592e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a1a      	ldr	r2, [r3, #32]
 8005920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	463b      	mov	r3, r7
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	621a      	str	r2, [r3, #32]
 800592c:	e008      	b.n	8005940 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800592e:	463b      	mov	r3, r7
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2200      	movs	r2, #0
 800593e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d17a      	bne.n	8005a40 <USB_EPStartXfer+0x404>
 800594a:	f107 0318 	add.w	r3, r7, #24
 800594e:	1d3a      	adds	r2, r7, #4
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	1d3b      	adds	r3, r7, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595c:	b29b      	uxth	r3, r3
 800595e:	4619      	mov	r1, r3
 8005960:	f107 0318 	add.w	r3, r7, #24
 8005964:	f107 0218 	add.w	r2, r7, #24
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	440a      	add	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	011a      	lsls	r2, r3, #4
 8005976:	f107 0318 	add.w	r3, r7, #24
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4413      	add	r3, r2
 800597e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005982:	f107 0314 	add.w	r3, r7, #20
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d11a      	bne.n	80059c6 <USB_EPStartXfer+0x38a>
 8005990:	f107 0314 	add.w	r3, r7, #20
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599e:	b29a      	uxth	r2, r3
 80059a0:	f107 0314 	add.w	r3, r7, #20
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	f107 0314 	add.w	r3, r7, #20
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	f107 0314 	add.w	r3, r7, #20
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e067      	b.n	8005a96 <USB_EPStartXfer+0x45a>
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	2b3e      	cmp	r3, #62	; 0x3e
 80059cc:	d819      	bhi.n	8005a02 <USB_EPStartXfer+0x3c6>
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <USB_EPStartXfer+0x3b2>
 80059e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059e8:	3301      	adds	r3, #1
 80059ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e049      	b.n	8005a96 <USB_EPStartXfer+0x45a>
 8005a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <USB_EPStartXfer+0x3e6>
 8005a18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	029b      	lsls	r3, r3, #10
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	f107 0314 	add.w	r3, r7, #20
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	e02a      	b.n	8005a96 <USB_EPStartXfer+0x45a>
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d125      	bne.n	8005a96 <USB_EPStartXfer+0x45a>
 8005a4a:	f107 0320 	add.w	r3, r7, #32
 8005a4e:	1d3a      	adds	r2, r7, #4
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f107 0320 	add.w	r3, r7, #32
 8005a64:	f107 0220 	add.w	r2, r7, #32
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	463b      	mov	r3, r7
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	011a      	lsls	r2, r3, #4
 8005a76:	f107 0320 	add.w	r3, r7, #32
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a82:	f107 031c 	add.w	r3, r7, #28
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f107 031c 	add.w	r3, r7, #28
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	891b      	ldrh	r3, [r3, #8]
 8005a9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ab0:	1d38      	adds	r0, r7, #4
 8005ab2:	6800      	ldr	r0, [r0, #0]
 8005ab4:	f001 f9f7 	bl	8006ea6 <USB_WritePMA>
 8005ab8:	f000 bcc6 	b.w	8006448 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d164      	bne.n	8005b90 <USB_EPStartXfer+0x554>
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005acc:	1d3b      	adds	r3, r7, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ada:	4413      	add	r3, r2
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ade:	463b      	mov	r3, r7
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae8:	4413      	add	r3, r2
 8005aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aee:	647b      	str	r3, [r7, #68]	; 0x44
 8005af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d112      	bne.n	8005b1e <USB_EPStartXfer+0x4e2>
 8005af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	e057      	b.n	8005bce <USB_EPStartXfer+0x592>
 8005b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b22:	2b3e      	cmp	r3, #62	; 0x3e
 8005b24:	d817      	bhi.n	8005b56 <USB_EPStartXfer+0x51a>
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <USB_EPStartXfer+0x50a>
 8005b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b40:	3301      	adds	r3, #1
 8005b42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e03b      	b.n	8005bce <USB_EPStartXfer+0x592>
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <USB_EPStartXfer+0x53a>
 8005b6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b70:	3b01      	subs	r3, #1
 8005b72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	029b      	lsls	r3, r3, #10
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	e01e      	b.n	8005bce <USB_EPStartXfer+0x592>
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d119      	bne.n	8005bce <USB_EPStartXfer+0x592>
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bae:	4413      	add	r3, r2
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	011a      	lsls	r2, r3, #4
 8005bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	891b      	ldrh	r3, [r3, #8]
 8005bd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6959      	ldr	r1, [r3, #20]
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005be8:	1d38      	adds	r0, r7, #4
 8005bea:	6800      	ldr	r0, [r0, #0]
 8005bec:	f001 f95b 	bl	8006ea6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	441a      	add	r2, r3
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d909      	bls.n	8005c26 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	1ad2      	subs	r2, r2, r3
 8005c1e:	463b      	mov	r3, r7
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	621a      	str	r2, [r3, #32]
 8005c24:	e008      	b.n	8005c38 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c38:	1d3b      	adds	r3, r7, #4
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d164      	bne.n	8005d12 <USB_EPStartXfer+0x6d6>
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c4e:	1d3b      	adds	r3, r7, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	4413      	add	r3, r2
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	011a      	lsls	r2, r3, #4
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
 8005c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d112      	bne.n	8005ca0 <USB_EPStartXfer+0x664>
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	e054      	b.n	8005d4a <USB_EPStartXfer+0x70e>
 8005ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca6:	d817      	bhi.n	8005cd8 <USB_EPStartXfer+0x69c>
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <USB_EPStartXfer+0x68c>
 8005cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	029b      	lsls	r3, r3, #10
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e038      	b.n	8005d4a <USB_EPStartXfer+0x70e>
 8005cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <USB_EPStartXfer+0x6bc>
 8005cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e01b      	b.n	8005d4a <USB_EPStartXfer+0x70e>
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d116      	bne.n	8005d4a <USB_EPStartXfer+0x70e>
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2a:	4413      	add	r3, r2
 8005d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	011a      	lsls	r2, r3, #4
 8005d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d38:	4413      	add	r3, r2
 8005d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	895b      	ldrh	r3, [r3, #10]
 8005d50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d54:	463b      	mov	r3, r7
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6959      	ldr	r1, [r3, #20]
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d64:	1d38      	adds	r0, r7, #4
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	f001 f89d 	bl	8006ea6 <USB_WritePMA>
 8005d6c:	e36c      	b.n	8006448 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	441a      	add	r2, r3
 8005da4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dbc:	1d3b      	adds	r3, r7, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd0:	4413      	add	r3, r2
 8005dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	011a      	lsls	r2, r3, #4
 8005ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dde:	4413      	add	r3, r2
 8005de0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	891b      	ldrh	r3, [r3, #8]
 8005df6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6959      	ldr	r1, [r3, #20]
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e0a:	1d38      	adds	r0, r7, #4
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	f001 f84a 	bl	8006ea6 <USB_WritePMA>
 8005e12:	e319      	b.n	8006448 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005e14:	1d3b      	adds	r3, r7, #4
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	463b      	mov	r3, r7
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	463b      	mov	r3, r7
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8162 	beq.w	800614a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e8e:	463b      	mov	r3, r7
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d164      	bne.n	8005f62 <USB_EPStartXfer+0x926>
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eac:	4413      	add	r3, r2
 8005eae:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	011a      	lsls	r2, r3, #4
 8005eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eba:	4413      	add	r3, r2
 8005ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec0:	677b      	str	r3, [r7, #116]	; 0x74
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d112      	bne.n	8005ef0 <USB_EPStartXfer+0x8b4>
 8005eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	e057      	b.n	8005fa0 <USB_EPStartXfer+0x964>
 8005ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef6:	d817      	bhi.n	8005f28 <USB_EPStartXfer+0x8ec>
 8005ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <USB_EPStartXfer+0x8dc>
 8005f0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f12:	3301      	adds	r3, #1
 8005f14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f24:	801a      	strh	r2, [r3, #0]
 8005f26:	e03b      	b.n	8005fa0 <USB_EPStartXfer+0x964>
 8005f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <USB_EPStartXfer+0x90c>
 8005f3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f42:	3b01      	subs	r3, #1
 8005f44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	029b      	lsls	r3, r3, #10
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	e01e      	b.n	8005fa0 <USB_EPStartXfer+0x964>
 8005f62:	463b      	mov	r3, r7
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d119      	bne.n	8005fa0 <USB_EPStartXfer+0x964>
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	011a      	lsls	r2, r3, #4
 8005f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	895b      	ldrh	r3, [r3, #10]
 8005fa6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005faa:	463b      	mov	r3, r7
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6959      	ldr	r1, [r3, #20]
 8005fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fba:	1d38      	adds	r0, r7, #4
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f000 ff72 	bl	8006ea6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	441a      	add	r2, r3
 8005fce:	463b      	mov	r3, r7
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a1a      	ldr	r2, [r3, #32]
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d909      	bls.n	8005ff8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6a1a      	ldr	r2, [r3, #32]
 8005fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	621a      	str	r2, [r3, #32]
 8005ff6:	e008      	b.n	800600a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006002:	463b      	mov	r3, r7
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2200      	movs	r2, #0
 8006008:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800600a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 821a 	beq.w	8006448 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006014:	463b      	mov	r3, r7
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d164      	bne.n	80060e8 <USB_EPStartXfer+0xaac>
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	66bb      	str	r3, [r7, #104]	; 0x68
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602c:	b29b      	uxth	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006032:	4413      	add	r3, r2
 8006034:	66bb      	str	r3, [r7, #104]	; 0x68
 8006036:	463b      	mov	r3, r7
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	011a      	lsls	r2, r3, #4
 800603e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006040:	4413      	add	r3, r2
 8006042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006046:	667b      	str	r3, [r7, #100]	; 0x64
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d112      	bne.n	8006076 <USB_EPStartXfer+0xa3a>
 8006050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800605a:	b29a      	uxth	r2, r3
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606e:	b29a      	uxth	r2, r3
 8006070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e057      	b.n	8006126 <USB_EPStartXfer+0xaea>
 8006076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800607a:	2b3e      	cmp	r3, #62	; 0x3e
 800607c:	d817      	bhi.n	80060ae <USB_EPStartXfer+0xa72>
 800607e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <USB_EPStartXfer+0xa62>
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006098:	3301      	adds	r3, #1
 800609a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e03b      	b.n	8006126 <USB_EPStartXfer+0xaea>
 80060ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <USB_EPStartXfer+0xa92>
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c8:	3b01      	subs	r3, #1
 80060ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	029b      	lsls	r3, r3, #10
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e01e      	b.n	8006126 <USB_EPStartXfer+0xaea>
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d119      	bne.n	8006126 <USB_EPStartXfer+0xaea>
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	673b      	str	r3, [r7, #112]	; 0x70
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006106:	4413      	add	r3, r2
 8006108:	673b      	str	r3, [r7, #112]	; 0x70
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	011a      	lsls	r2, r3, #4
 8006112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006114:	4413      	add	r3, r2
 8006116:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800611a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800611c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006120:	b29a      	uxth	r2, r3
 8006122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	891b      	ldrh	r3, [r3, #8]
 800612c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006130:	463b      	mov	r3, r7
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6959      	ldr	r1, [r3, #20]
 8006136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613a:	b29b      	uxth	r3, r3
 800613c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006140:	1d38      	adds	r0, r7, #4
 8006142:	6800      	ldr	r0, [r0, #0]
 8006144:	f000 feaf 	bl	8006ea6 <USB_WritePMA>
 8006148:	e17e      	b.n	8006448 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800614a:	463b      	mov	r3, r7
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d16f      	bne.n	8006234 <USB_EPStartXfer+0xbf8>
 8006154:	1d3b      	adds	r3, r7, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800616c:	4413      	add	r3, r2
 800616e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006172:	463b      	mov	r3, r7
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800617e:	4413      	add	r3, r2
 8006180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d116      	bne.n	80061be <USB_EPStartXfer+0xb82>
 8006190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800619c:	b29a      	uxth	r2, r3
 800619e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e05f      	b.n	800627e <USB_EPStartXfer+0xc42>
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	2b3e      	cmp	r3, #62	; 0x3e
 80061c4:	d818      	bhi.n	80061f8 <USB_EPStartXfer+0xbbc>
 80061c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USB_EPStartXfer+0xbaa>
 80061dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061e0:	3301      	adds	r3, #1
 80061e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e042      	b.n	800627e <USB_EPStartXfer+0xc42>
 80061f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <USB_EPStartXfer+0xbdc>
 800620e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006212:	3b01      	subs	r3, #1
 8006214:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006218:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800621c:	b29b      	uxth	r3, r3
 800621e:	029b      	lsls	r3, r3, #10
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e024      	b.n	800627e <USB_EPStartXfer+0xc42>
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d11f      	bne.n	800627e <USB_EPStartXfer+0xc42>
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006256:	4413      	add	r3, r2
 8006258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	011a      	lsls	r2, r3, #4
 8006264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006268:	4413      	add	r3, r2
 800626a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800626e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800627c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800627e:	463b      	mov	r3, r7
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	891b      	ldrh	r3, [r3, #8]
 8006284:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6959      	ldr	r1, [r3, #20]
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	b29b      	uxth	r3, r3
 8006294:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006298:	1d38      	adds	r0, r7, #4
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	f000 fe03 	bl	8006ea6 <USB_WritePMA>
          ep->xfer_buff += len;
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062aa:	441a      	add	r2, r3
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062b2:	463b      	mov	r3, r7
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d909      	bls.n	80062d6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80062c2:	463b      	mov	r3, r7
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	621a      	str	r2, [r3, #32]
 80062d4:	e008      	b.n	80062e8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062e0:	463b      	mov	r3, r7
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2200      	movs	r2, #0
 80062e6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80062e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80ab 	beq.w	8006448 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062f2:	1d3b      	adds	r3, r7, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062fa:	463b      	mov	r3, r7
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d16f      	bne.n	80063e4 <USB_EPStartXfer+0xda8>
 8006304:	1d3b      	adds	r3, r7, #4
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800630c:	1d3b      	adds	r3, r7, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800631c:	4413      	add	r3, r2
 800631e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006322:	463b      	mov	r3, r7
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	011a      	lsls	r2, r3, #4
 800632a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800632e:	4413      	add	r3, r2
 8006330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d116      	bne.n	800636e <USB_EPStartXfer+0xd32>
 8006340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800634c:	b29a      	uxth	r2, r3
 800634e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e05b      	b.n	8006426 <USB_EPStartXfer+0xdea>
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	2b3e      	cmp	r3, #62	; 0x3e
 8006374:	d818      	bhi.n	80063a8 <USB_EPStartXfer+0xd6c>
 8006376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <USB_EPStartXfer+0xd5a>
 800638c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006390:	3301      	adds	r3, #1
 8006392:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800639a:	b29b      	uxth	r3, r3
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e03e      	b.n	8006426 <USB_EPStartXfer+0xdea>
 80063a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <USB_EPStartXfer+0xd8c>
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c2:	3b01      	subs	r3, #1
 80063c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	029b      	lsls	r3, r3, #10
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063da:	b29a      	uxth	r2, r3
 80063dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e020      	b.n	8006426 <USB_EPStartXfer+0xdea>
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d11b      	bne.n	8006426 <USB_EPStartXfer+0xdea>
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063fe:	4413      	add	r3, r2
 8006400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	011a      	lsls	r2, r3, #4
 800640c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006410:	4413      	add	r3, r2
 8006412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641e:	b29a      	uxth	r2, r3
 8006420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006424:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	895b      	ldrh	r3, [r3, #10]
 800642c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006430:	463b      	mov	r3, r7
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6959      	ldr	r1, [r3, #20]
 8006436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643a:	b29b      	uxth	r3, r3
 800643c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006440:	1d38      	adds	r0, r7, #4
 8006442:	6800      	ldr	r0, [r0, #0]
 8006444:	f000 fd2f 	bl	8006ea6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f107 020a 	add.w	r2, r7, #10
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006466:	8013      	strh	r3, [r2, #0]
 8006468:	f107 030a 	add.w	r3, r7, #10
 800646c:	f107 020a 	add.w	r2, r7, #10
 8006470:	8812      	ldrh	r2, [r2, #0]
 8006472:	f082 0210 	eor.w	r2, r2, #16
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	f107 030a 	add.w	r3, r7, #10
 800647c:	f107 020a 	add.w	r2, r7, #10
 8006480:	8812      	ldrh	r2, [r2, #0]
 8006482:	f082 0220 	eor.w	r2, r2, #32
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	463b      	mov	r3, r7
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	441a      	add	r2, r3
 8006496:	f107 030a 	add.w	r3, r7, #10
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8013      	strh	r3, [r2, #0]
 80064b0:	e3b5      	b.n	8006c1e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80064b2:	463b      	mov	r3, r7
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8090 	bne.w	80065de <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80064be:	463b      	mov	r3, r7
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	463b      	mov	r3, r7
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d90e      	bls.n	80064ec <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e2:	1ad2      	subs	r2, r2, r3
 80064e4:	463b      	mov	r3, r7
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	619a      	str	r2, [r3, #24]
 80064ea:	e008      	b.n	80064fe <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80064f6:	463b      	mov	r3, r7
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006516:	4413      	add	r3, r2
 8006518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	011a      	lsls	r2, r3, #4
 8006524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006528:	4413      	add	r3, r2
 800652a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800652e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d116      	bne.n	8006568 <USB_EPStartXfer+0xf2c>
 800653a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e32c      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	2b3e      	cmp	r3, #62	; 0x3e
 800656e:	d818      	bhi.n	80065a2 <USB_EPStartXfer+0xf66>
 8006570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800657a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <USB_EPStartXfer+0xf54>
 8006586:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800658a:	3301      	adds	r3, #1
 800658c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006594:	b29b      	uxth	r3, r3
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e30f      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <USB_EPStartXfer+0xf86>
 80065b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065bc:	3b01      	subs	r3, #1
 80065be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	029b      	lsls	r3, r3, #10
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e2f1      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80065de:	463b      	mov	r3, r7
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	f040 818f 	bne.w	8006908 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80065ea:	463b      	mov	r3, r7
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d175      	bne.n	80066e0 <USB_EPStartXfer+0x10a4>
 80065f4:	1d3b      	adds	r3, r7, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800660c:	4413      	add	r3, r2
 800660e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	011a      	lsls	r2, r3, #4
 800661a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800661e:	4413      	add	r3, r2
 8006620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d116      	bne.n	8006660 <USB_EPStartXfer+0x1024>
 8006632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e065      	b.n	800672c <USB_EPStartXfer+0x10f0>
 8006660:	463b      	mov	r3, r7
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b3e      	cmp	r3, #62	; 0x3e
 8006668:	d81a      	bhi.n	80066a0 <USB_EPStartXfer+0x1064>
 800666a:	463b      	mov	r3, r7
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006676:	463b      	mov	r3, r7
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <USB_EPStartXfer+0x1052>
 8006684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006688:	3301      	adds	r3, #1
 800668a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006692:	b29b      	uxth	r3, r3
 8006694:	029b      	lsls	r3, r3, #10
 8006696:	b29a      	uxth	r2, r3
 8006698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	e045      	b.n	800672c <USB_EPStartXfer+0x10f0>
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066ac:	463b      	mov	r3, r7
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <USB_EPStartXfer+0x1088>
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066be:	3b01      	subs	r3, #1
 80066c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e025      	b.n	800672c <USB_EPStartXfer+0x10f0>
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d120      	bne.n	800672c <USB_EPStartXfer+0x10f0>
 80066ea:	1d3b      	adds	r3, r7, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006702:	4413      	add	r3, r2
 8006704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	011a      	lsls	r2, r3, #4
 8006710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006714:	4413      	add	r3, r2
 8006716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800671a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800671e:	463b      	mov	r3, r7
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006734:	463b      	mov	r3, r7
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d175      	bne.n	800682a <USB_EPStartXfer+0x11ee>
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006756:	4413      	add	r3, r2
 8006758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800675c:	463b      	mov	r3, r7
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	011a      	lsls	r2, r3, #4
 8006764:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006768:	4413      	add	r3, r2
 800676a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800676e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006772:	463b      	mov	r3, r7
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d116      	bne.n	80067aa <USB_EPStartXfer+0x116e>
 800677c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006788:	b29a      	uxth	r2, r3
 800678a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800678e:	801a      	strh	r2, [r3, #0]
 8006790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e061      	b.n	800686e <USB_EPStartXfer+0x1232>
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b3e      	cmp	r3, #62	; 0x3e
 80067b2:	d81a      	bhi.n	80067ea <USB_EPStartXfer+0x11ae>
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <USB_EPStartXfer+0x119c>
 80067ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067d2:	3301      	adds	r3, #1
 80067d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	e041      	b.n	800686e <USB_EPStartXfer+0x1232>
 80067ea:	463b      	mov	r3, r7
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067f6:	463b      	mov	r3, r7
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <USB_EPStartXfer+0x11d2>
 8006804:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006808:	3b01      	subs	r3, #1
 800680a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800680e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006812:	b29b      	uxth	r3, r3
 8006814:	029b      	lsls	r3, r3, #10
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e021      	b.n	800686e <USB_EPStartXfer+0x1232>
 800682a:	463b      	mov	r3, r7
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d11c      	bne.n	800686e <USB_EPStartXfer+0x1232>
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683c:	b29b      	uxth	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006844:	4413      	add	r3, r2
 8006846:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800684a:	463b      	mov	r3, r7
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	011a      	lsls	r2, r3, #4
 8006852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006856:	4413      	add	r3, r2
 8006858:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800685c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800686c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800686e:	463b      	mov	r3, r7
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 81a4 	beq.w	8006bc2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	463b      	mov	r3, r7
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800688e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <USB_EPStartXfer+0x126a>
 800689a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10d      	bne.n	80068c2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f040 8187 	bne.w	8006bc2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80068b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 8180 	bne.w	8006bc2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	463b      	mov	r3, r7
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068dc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
 8006906:	e15c      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006908:	463b      	mov	r3, r7
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	78db      	ldrb	r3, [r3, #3]
 800690e:	2b01      	cmp	r3, #1
 8006910:	f040 8155 	bne.w	8006bbe <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d90e      	bls.n	8006942 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800692e:	463b      	mov	r3, r7
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	463b      	mov	r3, r7
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	619a      	str	r2, [r3, #24]
 8006940:	e008      	b.n	8006954 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006942:	463b      	mov	r3, r7
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2200      	movs	r2, #0
 8006952:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d16f      	bne.n	8006a3e <USB_EPStartXfer+0x1402>
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006976:	4413      	add	r3, r2
 8006978:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800697c:	463b      	mov	r3, r7
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	011a      	lsls	r2, r3, #4
 8006984:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006988:	4413      	add	r3, r2
 800698a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800698e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d116      	bne.n	80069c8 <USB_EPStartXfer+0x138c>
 800699a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	e05f      	b.n	8006a88 <USB_EPStartXfer+0x144c>
 80069c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069cc:	2b3e      	cmp	r3, #62	; 0x3e
 80069ce:	d818      	bhi.n	8006a02 <USB_EPStartXfer+0x13c6>
 80069d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <USB_EPStartXfer+0x13b4>
 80069e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ea:	3301      	adds	r3, #1
 80069ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	e042      	b.n	8006a88 <USB_EPStartXfer+0x144c>
 8006a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <USB_EPStartXfer+0x13e6>
 8006a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e024      	b.n	8006a88 <USB_EPStartXfer+0x144c>
 8006a3e:	463b      	mov	r3, r7
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d11f      	bne.n	8006a88 <USB_EPStartXfer+0x144c>
 8006a48:	1d3b      	adds	r3, r7, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a50:	1d3b      	adds	r3, r7, #4
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	4413      	add	r3, r2
 8006a62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a66:	463b      	mov	r3, r7
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	011a      	lsls	r2, r3, #4
 8006a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a72:	4413      	add	r3, r2
 8006a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	1d3b      	adds	r3, r7, #4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d16f      	bne.n	8006b7a <USB_EPStartXfer+0x153e>
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d116      	bne.n	8006b04 <USB_EPStartXfer+0x14c8>
 8006ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae8:	801a      	strh	r2, [r3, #0]
 8006aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e05e      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	2b3e      	cmp	r3, #62	; 0x3e
 8006b0a:	d818      	bhi.n	8006b3e <USB_EPStartXfer+0x1502>
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <USB_EPStartXfer+0x14f0>
 8006b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b26:	3301      	adds	r3, #1
 8006b28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e041      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
 8006b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4c:	f003 031f 	and.w	r3, r3, #31
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <USB_EPStartXfer+0x1522>
 8006b54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	e023      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d11e      	bne.n	8006bc2 <USB_EPStartXfer+0x1586>
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b94:	4413      	add	r3, r2
 8006b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	e001      	b.n	8006bc2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e02e      	b.n	8006c20 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006be0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bf4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d020      	beq.n	8006c7e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c52:	81bb      	strh	r3, [r7, #12]
 8006c54:	89bb      	ldrh	r3, [r7, #12]
 8006c56:	f083 0310 	eor.w	r3, r3, #16
 8006c5a:	81bb      	strh	r3, [r7, #12]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	441a      	add	r2, r3
 8006c66:	89bb      	ldrh	r3, [r7, #12]
 8006c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	8013      	strh	r3, [r2, #0]
 8006c7c:	e01f      	b.n	8006cbe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	81fb      	strh	r3, [r7, #14]
 8006c96:	89fb      	ldrh	r3, [r7, #14]
 8006c98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c9c:	81fb      	strh	r3, [r7, #14]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	441a      	add	r2, r3
 8006ca8:	89fb      	ldrh	r3, [r7, #14]
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr

08006cca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	7b1b      	ldrb	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 809d 	bne.w	8006e18 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d04c      	beq.n	8006d80 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	823b      	strh	r3, [r7, #16]
 8006cf4:	8a3b      	ldrh	r3, [r7, #16]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01b      	beq.n	8006d36 <USB_EPClearStall+0x6c>
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d14:	81fb      	strh	r3, [r7, #14]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	78db      	ldrb	r3, [r3, #3]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d06c      	beq.n	8006e18 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	81bb      	strh	r3, [r7, #12]
 8006d56:	89bb      	ldrh	r3, [r7, #12]
 8006d58:	f083 0320 	eor.w	r3, r3, #32
 8006d5c:	81bb      	strh	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	89bb      	ldrh	r3, [r7, #12]
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]
 8006d7e:	e04b      	b.n	8006e18 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	82fb      	strh	r3, [r7, #22]
 8006d8e:	8afb      	ldrh	r3, [r7, #22]
 8006d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01b      	beq.n	8006dd0 <USB_EPClearStall+0x106>
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	82bb      	strh	r3, [r7, #20]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8abb      	ldrh	r3, [r7, #20]
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	827b      	strh	r3, [r7, #18]
 8006de8:	8a7b      	ldrh	r3, [r7, #18]
 8006dea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dee:	827b      	strh	r3, [r7, #18]
 8006df0:	8a7b      	ldrh	r3, [r7, #18]
 8006df2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006df6:	827b      	strh	r3, [r7, #18]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	8a7b      	ldrh	r3, [r7, #18]
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr

08006e24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr

08006e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e84:	68fb      	ldr	r3, [r7, #12]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr

08006ea6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b08d      	sub	sp, #52	; 0x34
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	80fb      	strh	r3, [r7, #6]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ebc:	88bb      	ldrh	r3, [r7, #4]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	005a      	lsls	r2, r3, #1
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ede:	e01e      	b.n	8006f1e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	3301      	adds	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	3302      	adds	r3, #2
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	3302      	adds	r3, #2
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	3301      	adds	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1dd      	bne.n	8006ee0 <USB_WritePMA+0x3a>
  }
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	3734      	adds	r7, #52	; 0x34
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b08b      	sub	sp, #44	; 0x2c
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	460b      	mov	r3, r1
 8006f40:	80fb      	strh	r3, [r7, #6]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006f46:	88bb      	ldrh	r3, [r7, #4]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	005a      	lsls	r2, r3, #1
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f62:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
 8006f68:	e01b      	b.n	8006fa2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	3302      	adds	r3, #2
 8006f76:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	0a1b      	lsrs	r3, r3, #8
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	3301      	adds	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	3302      	adds	r3, #2
 8006f9a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e0      	bne.n	8006f6a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006fa8:	88bb      	ldrh	r3, [r7, #4]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	701a      	strb	r2, [r3, #0]
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	372c      	adds	r7, #44	; 0x2c
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr

08006fce <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006fda:	2304      	movs	r3, #4
 8006fdc:	2203      	movs	r2, #3
 8006fde:	2181      	movs	r1, #129	; 0x81
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fc84 	bl	80088ee <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006fec:	2010      	movs	r0, #16
 8006fee:	f001 fd93 	bl	8008b18 <USBD_static_malloc>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007004:	2302      	movs	r3, #2
 8007006:	e005      	b.n	8007014 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700e:	2200      	movs	r2, #0
 8007010:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007028:	2181      	movs	r1, #129	; 0x81
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fc85 	bl	800893a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007046:	4618      	mov	r0, r3
 8007048:	f001 fd72 	bl	8008b30 <USBD_static_free>
    pdev->pClassData = NULL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800708a:	2b00      	cmp	r3, #0
 800708c:	d045      	beq.n	800711a <USBD_HID_Setup+0xba>
 800708e:	2b20      	cmp	r3, #32
 8007090:	f040 80d3 	bne.w	800723a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	3b02      	subs	r3, #2
 800709a:	2b09      	cmp	r3, #9
 800709c:	d835      	bhi.n	800710a <USBD_HID_Setup+0xaa>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <USBD_HID_Setup+0x44>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070fb 	.word	0x080070fb
 80070a8:	080070db 	.word	0x080070db
 80070ac:	0800710b 	.word	0x0800710b
 80070b0:	0800710b 	.word	0x0800710b
 80070b4:	0800710b 	.word	0x0800710b
 80070b8:	0800710b 	.word	0x0800710b
 80070bc:	0800710b 	.word	0x0800710b
 80070c0:	0800710b 	.word	0x0800710b
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070cd 	.word	0x080070cd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	461a      	mov	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	601a      	str	r2, [r3, #0]
          break;
 80070d8:	e01e      	b.n	8007118 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2201      	movs	r2, #1
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f944 	bl	800836e <USBD_CtlSendData>
          break;
 80070e6:	e017      	b.n	8007118 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	885b      	ldrh	r3, [r3, #2]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	605a      	str	r2, [r3, #4]
          break;
 80070f8:	e00e      	b.n	8007118 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3304      	adds	r3, #4
 80070fe:	2201      	movs	r2, #1
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f933 	bl	800836e <USBD_CtlSendData>
          break;
 8007108:	e006      	b.n	8007118 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f001 f8c4 	bl	800829a <USBD_CtlError>
          ret = USBD_FAIL;
 8007112:	2302      	movs	r3, #2
 8007114:	75fb      	strb	r3, [r7, #23]
          break;
 8007116:	bf00      	nop
      }
      break;
 8007118:	e096      	b.n	8007248 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b0b      	cmp	r3, #11
 8007120:	f200 8083 	bhi.w	800722a <USBD_HID_Setup+0x1ca>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_HID_Setup+0xcc>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800715d 	.word	0x0800715d
 8007130:	0800722b 	.word	0x0800722b
 8007134:	0800722b 	.word	0x0800722b
 8007138:	0800722b 	.word	0x0800722b
 800713c:	0800722b 	.word	0x0800722b
 8007140:	0800722b 	.word	0x0800722b
 8007144:	08007185 	.word	0x08007185
 8007148:	0800722b 	.word	0x0800722b
 800714c:	0800722b 	.word	0x0800722b
 8007150:	0800722b 	.word	0x0800722b
 8007154:	080071dd 	.word	0x080071dd
 8007158:	08007205 	.word	0x08007205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007162:	2b03      	cmp	r3, #3
 8007164:	d107      	bne.n	8007176 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007166:	f107 030e 	add.w	r3, r7, #14
 800716a:	2202      	movs	r2, #2
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 f8fd 	bl	800836e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007174:	e060      	b.n	8007238 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f88e 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 800717e:	2302      	movs	r3, #2
 8007180:	75fb      	strb	r3, [r7, #23]
          break;
 8007182:	e059      	b.n	8007238 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	885b      	ldrh	r3, [r3, #2]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b22      	cmp	r3, #34	; 0x22
 800718e:	d108      	bne.n	80071a2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	2b4a      	cmp	r3, #74	; 0x4a
 8007196:	bf28      	it	cs
 8007198:	234a      	movcs	r3, #74	; 0x4a
 800719a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800719c:	4b2d      	ldr	r3, [pc, #180]	; (8007254 <USBD_HID_Setup+0x1f4>)
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	e015      	b.n	80071ce <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b21      	cmp	r3, #33	; 0x21
 80071ac:	d108      	bne.n	80071c0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80071ae:	4b2a      	ldr	r3, [pc, #168]	; (8007258 <USBD_HID_Setup+0x1f8>)
 80071b0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	88db      	ldrh	r3, [r3, #6]
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	bf28      	it	cs
 80071ba:	2309      	movcs	r3, #9
 80071bc:	83fb      	strh	r3, [r7, #30]
 80071be:	e006      	b.n	80071ce <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 f869 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 80071c8:	2302      	movs	r3, #2
 80071ca:	75fb      	strb	r3, [r7, #23]
            break;
 80071cc:	e034      	b.n	8007238 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80071ce:	8bfb      	ldrh	r3, [r7, #30]
 80071d0:	461a      	mov	r2, r3
 80071d2:	69b9      	ldr	r1, [r7, #24]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f8ca 	bl	800836e <USBD_CtlSendData>
          break;
 80071da:	e02d      	b.n	8007238 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d107      	bne.n	80071f6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	3308      	adds	r3, #8
 80071ea:	2201      	movs	r2, #1
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 f8bd 	bl	800836e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071f4:	e020      	b.n	8007238 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 f84e 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 80071fe:	2302      	movs	r3, #2
 8007200:	75fb      	strb	r3, [r7, #23]
          break;
 8007202:	e019      	b.n	8007238 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	2b03      	cmp	r3, #3
 800720c:	d106      	bne.n	800721c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800721a:	e00d      	b.n	8007238 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 f83b 	bl	800829a <USBD_CtlError>
            ret = USBD_FAIL;
 8007224:	2302      	movs	r3, #2
 8007226:	75fb      	strb	r3, [r7, #23]
          break;
 8007228:	e006      	b.n	8007238 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f834 	bl	800829a <USBD_CtlError>
          ret = USBD_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	75fb      	strb	r3, [r7, #23]
          break;
 8007236:	bf00      	nop
      }
      break;
 8007238:	e006      	b.n	8007248 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f82c 	bl	800829a <USBD_CtlError>
      ret = USBD_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	75fb      	strb	r3, [r7, #23]
      break;
 8007246:	bf00      	nop
  }

  return ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200000c8 	.word	0x200000c8
 8007258:	200000b0 	.word	0x200000b0

0800725c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007270:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	2b03      	cmp	r3, #3
 800727a:	d10c      	bne.n	8007296 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	7b1b      	ldrb	r3, [r3, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d108      	bne.n	8007296 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2201      	movs	r2, #1
 8007288:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	2181      	movs	r1, #129	; 0x81
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 fbfa 	bl	8008a8a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2222      	movs	r2, #34	; 0x22
 80072ac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80072ae:	4b03      	ldr	r3, [pc, #12]	; (80072bc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000044 	.word	0x20000044

080072c0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2222      	movs	r2, #34	; 0x22
 80072cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80072ce:	4b03      	ldr	r3, [pc, #12]	; (80072dc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000068 	.word	0x20000068

080072e0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2222      	movs	r2, #34	; 0x22
 80072ec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80072ee:	4b03      	ldr	r3, [pc, #12]	; (80072fc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	2000008c 	.word	0x2000008c

08007300 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	2200      	movs	r2, #0
 8007314:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
	...

08007324 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	220a      	movs	r2, #10
 8007330:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007332:	4b03      	ldr	r3, [pc, #12]	; (8007340 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	200000bc 	.word	0x200000bc

08007344 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4613      	mov	r3, r2
 8007350:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007358:	2302      	movs	r3, #2
 800735a:	e01a      	b.n	8007392 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	79fa      	ldrb	r2, [r7, #7]
 8007388:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f001 fa4c 	bl	8008828 <USBD_LL_Init>

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d006      	beq.n	80073bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e001      	b.n	80073c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073bc:	2302      	movs	r3, #2
 80073be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 fa6f 	bl	80088b8 <USBD_LL_Start>

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00c      	beq.n	800742c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	4611      	mov	r1, r2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	460b      	mov	r3, r1
 8007440:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	78fa      	ldrb	r2, [r7, #3]
 800744c:	4611      	mov	r1, r2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fed7 	bl	8008222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	2b02      	cmp	r3, #2
 8007496:	d016      	beq.n	80074c6 <USBD_LL_SetupStage+0x6a>
 8007498:	2b02      	cmp	r3, #2
 800749a:	d81c      	bhi.n	80074d6 <USBD_LL_SetupStage+0x7a>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <USBD_LL_SetupStage+0x4a>
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d008      	beq.n	80074b6 <USBD_LL_SetupStage+0x5a>
 80074a4:	e017      	b.n	80074d6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9ca 	bl	8007848 <USBD_StdDevReq>
      break;
 80074b4:	e01a      	b.n	80074ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa2c 	bl	800791c <USBD_StdItfReq>
      break;
 80074c4:	e012      	b.n	80074ec <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa6c 	bl	80079ac <USBD_StdEPReq>
      break;
 80074d4:	e00a      	b.n	80074ec <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 fa47 	bl	8008978 <USBD_LL_StallEP>
      break;
 80074ea:	bf00      	nop
  }

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b086      	sub	sp, #24
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	460b      	mov	r3, r1
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d14b      	bne.n	80075a2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007510:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007518:	2b03      	cmp	r3, #3
 800751a:	d134      	bne.n	8007586 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	d919      	bls.n	800755c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	1ad2      	subs	r2, r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800753e:	429a      	cmp	r2, r3
 8007540:	d203      	bcs.n	800754a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007546:	b29b      	uxth	r3, r3
 8007548:	e002      	b.n	8007550 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 ff38 	bl	80083ca <USBD_CtlContinueRx>
 800755a:	e038      	b.n	80075ce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800756e:	2b03      	cmp	r3, #3
 8007570:	d105      	bne.n	800757e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 ff35 	bl	80083ee <USBD_CtlSendStatus>
 8007584:	e023      	b.n	80075ce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800758c:	2b05      	cmp	r3, #5
 800758e:	d11e      	bne.n	80075ce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 f9ec 	bl	8008978 <USBD_LL_StallEP>
 80075a0:	e015      	b.n	80075ce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d108      	bne.n	80075ca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	7afa      	ldrb	r2, [r7, #11]
 80075c2:	4611      	mov	r1, r2
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	4798      	blx	r3
 80075c8:	e001      	b.n	80075ce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075ca:	2302      	movs	r3, #2
 80075cc:	e000      	b.n	80075d0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	460b      	mov	r3, r1
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d17f      	bne.n	80076ec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3314      	adds	r3, #20
 80075f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d15c      	bne.n	80076b6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	429a      	cmp	r2, r3
 8007606:	d915      	bls.n	8007634 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	1ad2      	subs	r2, r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	b29b      	uxth	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fec0 	bl	80083a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007626:	2300      	movs	r3, #0
 8007628:	2200      	movs	r2, #0
 800762a:	2100      	movs	r1, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f001 fa4f 	bl	8008ad0 <USBD_LL_PrepareReceive>
 8007632:	e04e      	b.n	80076d2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	6912      	ldr	r2, [r2, #16]
 800763c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007640:	fb02 f201 	mul.w	r2, r2, r1
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11c      	bne.n	8007684 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007652:	429a      	cmp	r2, r3
 8007654:	d316      	bcc.n	8007684 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007660:	429a      	cmp	r2, r3
 8007662:	d20f      	bcs.n	8007684 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007664:	2200      	movs	r2, #0
 8007666:	2100      	movs	r1, #0
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fe9c 	bl	80083a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007676:	2300      	movs	r3, #0
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f001 fa27 	bl	8008ad0 <USBD_LL_PrepareReceive>
 8007682:	e026      	b.n	80076d2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007696:	2b03      	cmp	r3, #3
 8007698:	d105      	bne.n	80076a6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076a6:	2180      	movs	r1, #128	; 0x80
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f001 f965 	bl	8008978 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 feb0 	bl	8008414 <USBD_CtlReceiveStatus>
 80076b4:	e00d      	b.n	80076d2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d004      	beq.n	80076ca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076ca:	2180      	movs	r1, #128	; 0x80
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f001 f953 	bl	8008978 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d11d      	bne.n	8007718 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff fe81 	bl	80073e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80076ea:	e015      	b.n	8007718 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00d      	beq.n	8007714 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d108      	bne.n	8007714 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	7afa      	ldrb	r2, [r7, #11]
 800770c:	4611      	mov	r1, r2
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	4798      	blx	r3
 8007712:	e001      	b.n	8007718 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007714:	2302      	movs	r3, #2
 8007716:	e000      	b.n	800771a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800772a:	2340      	movs	r3, #64	; 0x40
 800772c:	2200      	movs	r2, #0
 800772e:	2100      	movs	r1, #0
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f8dc 	bl	80088ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2240      	movs	r2, #64	; 0x40
 8007742:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007746:	2340      	movs	r3, #64	; 0x40
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 f8ce 	bl	80088ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2240      	movs	r2, #64	; 0x40
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6852      	ldr	r2, [r2, #4]
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	4611      	mov	r1, r2
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
  }

  return USBD_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2204      	movs	r2, #4
 80077da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr

080077ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d105      	bne.n	8007808 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr

08007814 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007822:	2b03      	cmp	r3, #3
 8007824:	d10b      	bne.n	800783e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d005      	beq.n	800786e <USBD_StdDevReq+0x26>
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d84f      	bhi.n	8007906 <USBD_StdDevReq+0xbe>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <USBD_StdDevReq+0x36>
 800786a:	2b20      	cmp	r3, #32
 800786c:	d14b      	bne.n	8007906 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
      break;
 800787c:	e048      	b.n	8007910 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	785b      	ldrb	r3, [r3, #1]
 8007882:	2b09      	cmp	r3, #9
 8007884:	d839      	bhi.n	80078fa <USBD_StdDevReq+0xb2>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <USBD_StdDevReq+0x44>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078dd 	.word	0x080078dd
 8007890:	080078f1 	.word	0x080078f1
 8007894:	080078fb 	.word	0x080078fb
 8007898:	080078e7 	.word	0x080078e7
 800789c:	080078fb 	.word	0x080078fb
 80078a0:	080078bf 	.word	0x080078bf
 80078a4:	080078b5 	.word	0x080078b5
 80078a8:	080078fb 	.word	0x080078fb
 80078ac:	080078d3 	.word	0x080078d3
 80078b0:	080078c9 	.word	0x080078c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9dc 	bl	8007c74 <USBD_GetDescriptor>
          break;
 80078bc:	e022      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb3f 	bl	8007f44 <USBD_SetAddress>
          break;
 80078c6:	e01d      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fb7e 	bl	8007fcc <USBD_SetConfig>
          break;
 80078d0:	e018      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc07 	bl	80080e8 <USBD_GetConfig>
          break;
 80078da:	e013      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc37 	bl	8008152 <USBD_GetStatus>
          break;
 80078e4:	e00e      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc65 	bl	80081b8 <USBD_SetFeature>
          break;
 80078ee:	e009      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fc74 	bl	80081e0 <USBD_ClrFeature>
          break;
 80078f8:	e004      	b.n	8007904 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fccc 	bl	800829a <USBD_CtlError>
          break;
 8007902:	bf00      	nop
      }
      break;
 8007904:	e004      	b.n	8007910 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fcc6 	bl	800829a <USBD_CtlError>
      break;
 800790e:	bf00      	nop
  }

  return ret;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007932:	2b40      	cmp	r3, #64	; 0x40
 8007934:	d005      	beq.n	8007942 <USBD_StdItfReq+0x26>
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d82e      	bhi.n	8007998 <USBD_StdItfReq+0x7c>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <USBD_StdItfReq+0x26>
 800793e:	2b20      	cmp	r3, #32
 8007940:	d12a      	bne.n	8007998 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007948:	3b01      	subs	r3, #1
 800794a:	2b02      	cmp	r3, #2
 800794c:	d81d      	bhi.n	800798a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	889b      	ldrh	r3, [r3, #4]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d813      	bhi.n	8007980 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	88db      	ldrh	r3, [r3, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d110      	bne.n	8007994 <USBD_StdItfReq+0x78>
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fd38 	bl	80083ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800797e:	e009      	b.n	8007994 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fc89 	bl	800829a <USBD_CtlError>
          break;
 8007988:	e004      	b.n	8007994 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc84 	bl	800829a <USBD_CtlError>
          break;
 8007992:	e000      	b.n	8007996 <USBD_StdItfReq+0x7a>
          break;
 8007994:	bf00      	nop
      }
      break;
 8007996:	e004      	b.n	80079a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc7d 	bl	800829a <USBD_CtlError>
      break;
 80079a0:	bf00      	nop
  }

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d007      	beq.n	80079dc <USBD_StdEPReq+0x30>
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	f200 8146 	bhi.w	8007c5e <USBD_StdEPReq+0x2b2>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <USBD_StdEPReq+0x40>
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	f040 8141 	bne.w	8007c5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
      break;
 80079ea:	e13d      	b.n	8007c68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d10a      	bne.n	8007a0e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	e12d      	b.n	8007c6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d007      	beq.n	8007a26 <USBD_StdEPReq+0x7a>
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	f300 811b 	bgt.w	8007c52 <USBD_StdEPReq+0x2a6>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d072      	beq.n	8007b06 <USBD_StdEPReq+0x15a>
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d03a      	beq.n	8007a9a <USBD_StdEPReq+0xee>
 8007a24:	e115      	b.n	8007c52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d002      	beq.n	8007a36 <USBD_StdEPReq+0x8a>
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d015      	beq.n	8007a60 <USBD_StdEPReq+0xb4>
 8007a34:	e02b      	b.n	8007a8e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <USBD_StdEPReq+0xaa>
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b80      	cmp	r3, #128	; 0x80
 8007a40:	d009      	beq.n	8007a56 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 ff96 	bl	8008978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a4c:	2180      	movs	r1, #128	; 0x80
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 ff92 	bl	8008978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a54:	e020      	b.n	8007a98 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc1e 	bl	800829a <USBD_CtlError>
              break;
 8007a5e:	e01b      	b.n	8007a98 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10e      	bne.n	8007a86 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <USBD_StdEPReq+0xda>
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b80      	cmp	r3, #128	; 0x80
 8007a72:	d008      	beq.n	8007a86 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	88db      	ldrh	r3, [r3, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 ff79 	bl	8008978 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fcb1 	bl	80083ee <USBD_CtlSendStatus>

              break;
 8007a8c:	e004      	b.n	8007a98 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc02 	bl	800829a <USBD_CtlError>
              break;
 8007a96:	bf00      	nop
          }
          break;
 8007a98:	e0e0      	b.n	8007c5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d002      	beq.n	8007aaa <USBD_StdEPReq+0xfe>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d015      	beq.n	8007ad4 <USBD_StdEPReq+0x128>
 8007aa8:	e026      	b.n	8007af8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00c      	beq.n	8007aca <USBD_StdEPReq+0x11e>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d009      	beq.n	8007aca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 ff5c 	bl	8008978 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ac0:	2180      	movs	r1, #128	; 0x80
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 ff58 	bl	8008978 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac8:	e01c      	b.n	8007b04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fbe4 	bl	800829a <USBD_CtlError>
              break;
 8007ad2:	e017      	b.n	8007b04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	885b      	ldrh	r3, [r3, #2]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d112      	bne.n	8007b02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 ff63 	bl	80089b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fc7c 	bl	80083ee <USBD_CtlSendStatus>
              }
              break;
 8007af6:	e004      	b.n	8007b02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fbcd 	bl	800829a <USBD_CtlError>
              break;
 8007b00:	e000      	b.n	8007b04 <USBD_StdEPReq+0x158>
              break;
 8007b02:	bf00      	nop
          }
          break;
 8007b04:	e0aa      	b.n	8007c5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d002      	beq.n	8007b16 <USBD_StdEPReq+0x16a>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d032      	beq.n	8007b7a <USBD_StdEPReq+0x1ce>
 8007b14:	e097      	b.n	8007c46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <USBD_StdEPReq+0x180>
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b80      	cmp	r3, #128	; 0x80
 8007b20:	d004      	beq.n	8007b2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fbb8 	bl	800829a <USBD_CtlError>
                break;
 8007b2a:	e091      	b.n	8007c50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da0b      	bge.n	8007b4c <USBD_StdEPReq+0x1a0>
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	3310      	adds	r3, #16
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	3304      	adds	r3, #4
 8007b4a:	e00b      	b.n	8007b64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fbfb 	bl	800836e <USBD_CtlSendData>
              break;
 8007b78:	e06a      	b.n	8007c50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da11      	bge.n	8007ba6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	f003 020f 	and.w	r2, r3, #15
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3318      	adds	r3, #24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d117      	bne.n	8007bcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb7b 	bl	800829a <USBD_CtlError>
                  break;
 8007ba4:	e054      	b.n	8007c50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	f003 020f 	and.w	r2, r3, #15
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fb68 	bl	800829a <USBD_CtlError>
                  break;
 8007bca:	e041      	b.n	8007c50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da0b      	bge.n	8007bec <USBD_StdEPReq+0x240>
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	3310      	adds	r3, #16
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	e00b      	b.n	8007c04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <USBD_StdEPReq+0x266>
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b80      	cmp	r3, #128	; 0x80
 8007c10:	d103      	bne.n	8007c1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	e00e      	b.n	8007c38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fee8 	bl	80089f4 <USBD_LL_IsStallEP>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e002      	b.n	8007c38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb95 	bl	800836e <USBD_CtlSendData>
              break;
 8007c44:	e004      	b.n	8007c50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb26 	bl	800829a <USBD_CtlError>
              break;
 8007c4e:	bf00      	nop
          }
          break;
 8007c50:	e004      	b.n	8007c5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fb20 	bl	800829a <USBD_CtlError>
          break;
 8007c5a:	bf00      	nop
      }
      break;
 8007c5c:	e004      	b.n	8007c68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fb1a 	bl	800829a <USBD_CtlError>
      break;
 8007c66:	bf00      	nop
  }

  return ret;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	885b      	ldrh	r3, [r3, #2]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b06      	cmp	r3, #6
 8007c96:	f200 8128 	bhi.w	8007eea <USBD_GetDescriptor+0x276>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USBD_GetDescriptor+0x2c>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007d15 	.word	0x08007d15
 8007cac:	08007eeb 	.word	0x08007eeb
 8007cb0:	08007eeb 	.word	0x08007eeb
 8007cb4:	08007e8b 	.word	0x08007e8b
 8007cb8:	08007eb7 	.word	0x08007eb7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
      break;
 8007cd2:	e112      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7c1b      	ldrb	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10d      	bne.n	8007cf8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f107 0208 	add.w	r2, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cf6:	e100      	b.n	8007efa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	f107 0208 	add.w	r2, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	2202      	movs	r2, #2
 8007d10:	701a      	strb	r2, [r3, #0]
      break;
 8007d12:	e0f2      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	885b      	ldrh	r3, [r3, #2]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	f200 80ac 	bhi.w	8007e78 <USBD_GetDescriptor+0x204>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBD_GetDescriptor+0xb4>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d75 	.word	0x08007d75
 8007d30:	08007da9 	.word	0x08007da9
 8007d34:	08007ddd 	.word	0x08007ddd
 8007d38:	08007e11 	.word	0x08007e11
 8007d3c:	08007e45 	.word	0x08007e45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d62:	e091      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa97 	bl	800829a <USBD_CtlError>
            err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
          break;
 8007d72:	e089      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d96:	e077      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa7d 	bl	800829a <USBD_CtlError>
            err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
          break;
 8007da6:	e06f      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dca:	e05d      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa63 	bl	800829a <USBD_CtlError>
            err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dda:	e055      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e043      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa49 	bl	800829a <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e03b      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e029      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa2f 	bl	800829a <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e021      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e00f      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa15 	bl	800829a <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e007      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa0d 	bl	800829a <USBD_CtlError>
          err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e86:	e038      	b.n	8007efa <USBD_GetDescriptor+0x286>
 8007e88:	e037      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7c1b      	ldrb	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	f107 0208 	add.w	r2, r7, #8
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	4798      	blx	r3
 8007ea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ea4:	e029      	b.n	8007efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9f6 	bl	800829a <USBD_CtlError>
        err++;
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007eb4:	e021      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7c1b      	ldrb	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	f107 0208 	add.w	r2, r7, #8
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
 8007ece:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	2207      	movs	r2, #7
 8007ed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed8:	e00f      	b.n	8007efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f9dc 	bl	800829a <USBD_CtlError>
        err++;
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee8:	e007      	b.n	8007efa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f9d4 	bl	800829a <USBD_CtlError>
      err++;
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef8:	bf00      	nop
  }

  if (err != 0U)
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11c      	bne.n	8007f3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f00:	893b      	ldrh	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d011      	beq.n	8007f2a <USBD_GetDescriptor+0x2b6>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	88db      	ldrh	r3, [r3, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00d      	beq.n	8007f2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88da      	ldrh	r2, [r3, #6]
 8007f12:	893b      	ldrh	r3, [r7, #8]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bf28      	it	cs
 8007f18:	4613      	movcs	r3, r2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f1e:	893b      	ldrh	r3, [r7, #8]
 8007f20:	461a      	mov	r2, r3
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa22 	bl	800836e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	88db      	ldrh	r3, [r3, #6]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa5b 	bl	80083ee <USBD_CtlSendStatus>
 8007f38:	e000      	b.n	8007f3c <USBD_GetDescriptor+0x2c8>
    return;
 8007f3a:	bf00      	nop
    }
  }
}
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop

08007f44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d130      	bne.n	8007fb8 <USBD_SetAddress+0x74>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	88db      	ldrh	r3, [r3, #6]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d12c      	bne.n	8007fb8 <USBD_SetAddress+0x74>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	2b7f      	cmp	r3, #127	; 0x7f
 8007f64:	d828      	bhi.n	8007fb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d104      	bne.n	8007f86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f98b 	bl	800829a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f84:	e01d      	b.n	8007fc2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7bfa      	ldrb	r2, [r7, #15]
 8007f8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fd5a 	bl	8008a4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa28 	bl	80083ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fac:	e009      	b.n	8007fc2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	e004      	b.n	8007fc2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f96d 	bl	800829a <USBD_CtlError>
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	4b41      	ldr	r3, [pc, #260]	; (80080e4 <USBD_SetConfig+0x118>)
 8007fde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fe0:	4b40      	ldr	r3, [pc, #256]	; (80080e4 <USBD_SetConfig+0x118>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d904      	bls.n	8007ff2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f955 	bl	800829a <USBD_CtlError>
 8007ff0:	e075      	b.n	80080de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d002      	beq.n	8008002 <USBD_SetConfig+0x36>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d023      	beq.n	8008048 <USBD_SetConfig+0x7c>
 8008000:	e062      	b.n	80080c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008002:	4b38      	ldr	r3, [pc, #224]	; (80080e4 <USBD_SetConfig+0x118>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01a      	beq.n	8008040 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800800a:	4b36      	ldr	r3, [pc, #216]	; (80080e4 <USBD_SetConfig+0x118>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2203      	movs	r2, #3
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800801c:	4b31      	ldr	r3, [pc, #196]	; (80080e4 <USBD_SetConfig+0x118>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff f9e8 	bl	80073f8 <USBD_SetClassConfig>
 8008028:	4603      	mov	r3, r0
 800802a:	2b02      	cmp	r3, #2
 800802c:	d104      	bne.n	8008038 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f932 	bl	800829a <USBD_CtlError>
            return;
 8008036:	e052      	b.n	80080de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9d8 	bl	80083ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800803e:	e04e      	b.n	80080de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f9d4 	bl	80083ee <USBD_CtlSendStatus>
        break;
 8008046:	e04a      	b.n	80080de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008048:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <USBD_SetConfig+0x118>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d112      	bne.n	8008076 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008058:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <USBD_SetConfig+0x118>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008062:	4b20      	ldr	r3, [pc, #128]	; (80080e4 <USBD_SetConfig+0x118>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff f9e4 	bl	8007436 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f9bd 	bl	80083ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008074:	e033      	b.n	80080de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008076:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <USBD_SetConfig+0x118>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d01d      	beq.n	80080c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f9d2 	bl	8007436 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008092:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <USBD_SetConfig+0x118>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <USBD_SetConfig+0x118>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff f9a8 	bl	80073f8 <USBD_SetClassConfig>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d104      	bne.n	80080b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f8f2 	bl	800829a <USBD_CtlError>
            return;
 80080b6:	e012      	b.n	80080de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f998 	bl	80083ee <USBD_CtlSendStatus>
        break;
 80080be:	e00e      	b.n	80080de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f994 	bl	80083ee <USBD_CtlSendStatus>
        break;
 80080c6:	e00a      	b.n	80080de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8e5 	bl	800829a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <USBD_SetConfig+0x118>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff f9ad 	bl	8007436 <USBD_ClrClassConfig>
        break;
 80080dc:	bf00      	nop
    }
  }
}
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	2000019c 	.word	0x2000019c

080080e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d004      	beq.n	8008104 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f8cc 	bl	800829a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008102:	e022      	b.n	800814a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810a:	2b02      	cmp	r3, #2
 800810c:	dc02      	bgt.n	8008114 <USBD_GetConfig+0x2c>
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc03      	bgt.n	800811a <USBD_GetConfig+0x32>
 8008112:	e015      	b.n	8008140 <USBD_GetConfig+0x58>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d00b      	beq.n	8008130 <USBD_GetConfig+0x48>
 8008118:	e012      	b.n	8008140 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3308      	adds	r3, #8
 8008124:	2201      	movs	r2, #1
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f920 	bl	800836e <USBD_CtlSendData>
        break;
 800812e:	e00c      	b.n	800814a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	2201      	movs	r2, #1
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f918 	bl	800836e <USBD_CtlSendData>
        break;
 800813e:	e004      	b.n	800814a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f8a9 	bl	800829a <USBD_CtlError>
        break;
 8008148:	bf00      	nop
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	3b01      	subs	r3, #1
 8008164:	2b02      	cmp	r3, #2
 8008166:	d81e      	bhi.n	80081a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	88db      	ldrh	r3, [r3, #6]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d004      	beq.n	800817a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f891 	bl	800829a <USBD_CtlError>
        break;
 8008178:	e01a      	b.n	80081b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f043 0202 	orr.w	r2, r3, #2
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	330c      	adds	r3, #12
 800819a:	2202      	movs	r2, #2
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8e5 	bl	800836e <USBD_CtlSendData>
      break;
 80081a4:	e004      	b.n	80081b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f876 	bl	800829a <USBD_CtlError>
      break;
 80081ae:	bf00      	nop
  }
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d106      	bne.n	80081d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f90b 	bl	80083ee <USBD_CtlSendStatus>
  }
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f0:	3b01      	subs	r3, #1
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d80b      	bhi.n	800820e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d10c      	bne.n	8008218 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8f1 	bl	80083ee <USBD_CtlSendStatus>
      }
      break;
 800820c:	e004      	b.n	8008218 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f842 	bl	800829a <USBD_CtlError>
      break;
 8008216:	e000      	b.n	800821a <USBD_ClrFeature+0x3a>
      break;
 8008218:	bf00      	nop
  }
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	785a      	ldrb	r2, [r3, #1]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3302      	adds	r3, #2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	b29a      	uxth	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	3303      	adds	r3, #3
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	b29b      	uxth	r3, r3
 8008250:	4413      	add	r3, r2
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3304      	adds	r3, #4
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b29a      	uxth	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3305      	adds	r3, #5
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	b29b      	uxth	r3, r3
 800826c:	4413      	add	r3, r2
 800826e:	b29a      	uxth	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	3306      	adds	r3, #6
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29a      	uxth	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	3307      	adds	r3, #7
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	b29b      	uxth	r3, r3
 8008288:	4413      	add	r3, r2
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	80da      	strh	r2, [r3, #6]

}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fb66 	bl	8008978 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082ac:	2100      	movs	r1, #0
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fb62 	bl	8008978 <USBD_LL_StallEP>
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d032      	beq.n	8008338 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f834 	bl	8008340 <USBD_GetLen>
 80082d8:	4603      	mov	r3, r0
 80082da:	3301      	adds	r3, #1
 80082dc:	b29b      	uxth	r3, r3
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	75fa      	strb	r2, [r7, #23]
 80082ec:	461a      	mov	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	7812      	ldrb	r2, [r2, #0]
 80082f6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	75fa      	strb	r2, [r7, #23]
 80082fe:	461a      	mov	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4413      	add	r3, r2
 8008304:	2203      	movs	r2, #3
 8008306:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008308:	e012      	b.n	8008330 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	60fa      	str	r2, [r7, #12]
 8008310:	7dfa      	ldrb	r2, [r7, #23]
 8008312:	1c51      	adds	r1, r2, #1
 8008314:	75f9      	strb	r1, [r7, #23]
 8008316:	4611      	mov	r1, r2
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	440a      	add	r2, r1
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	75fa      	strb	r2, [r7, #23]
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	4413      	add	r3, r2
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e8      	bne.n	800830a <USBD_GetString+0x4e>
    }
  }
}
 8008338:	bf00      	nop
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800834c:	e005      	b.n	800835a <USBD_GetLen+0x1a>
  {
    len++;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	3301      	adds	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3301      	adds	r3, #1
 8008358:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f5      	bne.n	800834e <USBD_GetLen+0xe>
  }

  return len;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr

0800836e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	4613      	mov	r3, r2
 800837a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2202      	movs	r2, #2
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	2100      	movs	r1, #0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fb77 	bl	8008a8a <USBD_LL_Transmit>

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	4613      	mov	r3, r2
 80083b2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	2100      	movs	r1, #0
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 fb65 	bl	8008a8a <USBD_LL_Transmit>

  return USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	2100      	movs	r1, #0
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 fb76 	bl	8008ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2204      	movs	r2, #4
 80083fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083fe:	2300      	movs	r3, #0
 8008400:	2200      	movs	r2, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fb40 	bl	8008a8a <USBD_LL_Transmit>

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2205      	movs	r2, #5
 8008420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008424:	2300      	movs	r3, #0
 8008426:	2200      	movs	r2, #0
 8008428:	2100      	movs	r1, #0
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fb50 	bl	8008ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008440:	2200      	movs	r2, #0
 8008442:	490e      	ldr	r1, [pc, #56]	; (800847c <MX_USB_DEVICE_Init+0x40>)
 8008444:	480e      	ldr	r0, [pc, #56]	; (8008480 <MX_USB_DEVICE_Init+0x44>)
 8008446:	f7fe ff7d 	bl	8007344 <USBD_Init>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008450:	f7f8 fd8c 	bl	8000f6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008454:	490b      	ldr	r1, [pc, #44]	; (8008484 <MX_USB_DEVICE_Init+0x48>)
 8008456:	480a      	ldr	r0, [pc, #40]	; (8008480 <MX_USB_DEVICE_Init+0x44>)
 8008458:	f7fe ff9f 	bl	800739a <USBD_RegisterClass>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008462:	f7f8 fd83 	bl	8000f6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008466:	4806      	ldr	r0, [pc, #24]	; (8008480 <MX_USB_DEVICE_Init+0x44>)
 8008468:	f7fe ffb0 	bl	80073cc <USBD_Start>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008472:	f7f8 fd7b 	bl	8000f6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008476:	bf00      	nop
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000114 	.word	0x20000114
 8008480:	20000224 	.word	0x20000224
 8008484:	2000000c 	.word	0x2000000c

08008488 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2212      	movs	r2, #18
 8008498:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800849a:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800849c:	4618      	mov	r0, r3
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000130 	.word	0x20000130

080084ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2204      	movs	r2, #4
 80084bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084be:	4b03      	ldr	r3, [pc, #12]	; (80084cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000144 	.word	0x20000144

080084d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	6039      	str	r1, [r7, #0]
 80084da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4907      	ldr	r1, [pc, #28]	; (8008504 <USBD_FS_ProductStrDescriptor+0x34>)
 80084e6:	4808      	ldr	r0, [pc, #32]	; (8008508 <USBD_FS_ProductStrDescriptor+0x38>)
 80084e8:	f7ff fee8 	bl	80082bc <USBD_GetString>
 80084ec:	e004      	b.n	80084f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	4904      	ldr	r1, [pc, #16]	; (8008504 <USBD_FS_ProductStrDescriptor+0x34>)
 80084f2:	4805      	ldr	r0, [pc, #20]	; (8008508 <USBD_FS_ProductStrDescriptor+0x38>)
 80084f4:	f7ff fee2 	bl	80082bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f8:	4b02      	ldr	r3, [pc, #8]	; (8008504 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200004e8 	.word	0x200004e8
 8008508:	08008c30 	.word	0x08008c30

0800850c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4904      	ldr	r1, [pc, #16]	; (800852c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800851c:	4804      	ldr	r0, [pc, #16]	; (8008530 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800851e:	f7ff fecd 	bl	80082bc <USBD_GetString>
  return USBD_StrDesc;
 8008522:	4b02      	ldr	r3, [pc, #8]	; (800852c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	200004e8 	.word	0x200004e8
 8008530:	08008c48 	.word	0x08008c48

08008534 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	221a      	movs	r2, #26
 8008544:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008546:	f000 f843 	bl	80085d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800854a:	4b02      	ldr	r3, [pc, #8]	; (8008554 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000148 	.word	0x20000148

08008558 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4907      	ldr	r1, [pc, #28]	; (800858c <USBD_FS_ConfigStrDescriptor+0x34>)
 800856e:	4808      	ldr	r0, [pc, #32]	; (8008590 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008570:	f7ff fea4 	bl	80082bc <USBD_GetString>
 8008574:	e004      	b.n	8008580 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4904      	ldr	r1, [pc, #16]	; (800858c <USBD_FS_ConfigStrDescriptor+0x34>)
 800857a:	4805      	ldr	r0, [pc, #20]	; (8008590 <USBD_FS_ConfigStrDescriptor+0x38>)
 800857c:	f7ff fe9e 	bl	80082bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008580:	4b02      	ldr	r3, [pc, #8]	; (800858c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	200004e8 	.word	0x200004e8
 8008590:	08008c5c 	.word	0x08008c5c

08008594 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	4603      	mov	r3, r0
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4907      	ldr	r1, [pc, #28]	; (80085c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085ac:	f7ff fe86 	bl	80082bc <USBD_GetString>
 80085b0:	e004      	b.n	80085bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085b6:	4805      	ldr	r0, [pc, #20]	; (80085cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085b8:	f7ff fe80 	bl	80082bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200004e8 	.word	0x200004e8
 80085cc:	08008c68 	.word	0x08008c68

080085d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <Get_SerialNum+0x44>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085dc:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <Get_SerialNum+0x48>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <Get_SerialNum+0x4c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4413      	add	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80085f6:	2208      	movs	r2, #8
 80085f8:	4909      	ldr	r1, [pc, #36]	; (8008620 <Get_SerialNum+0x50>)
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f814 	bl	8008628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008600:	2204      	movs	r2, #4
 8008602:	4908      	ldr	r1, [pc, #32]	; (8008624 <Get_SerialNum+0x54>)
 8008604:	68b8      	ldr	r0, [r7, #8]
 8008606:	f000 f80f 	bl	8008628 <IntToUnicode>
  }
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	1ffff7e8 	.word	0x1ffff7e8
 8008618:	1ffff7ec 	.word	0x1ffff7ec
 800861c:	1ffff7f0 	.word	0x1ffff7f0
 8008620:	2000014a 	.word	0x2000014a
 8008624:	2000015a 	.word	0x2000015a

08008628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
 800863e:	e027      	b.n	8008690 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	0f1b      	lsrs	r3, r3, #28
 8008644:	2b09      	cmp	r3, #9
 8008646:	d80b      	bhi.n	8008660 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	0f1b      	lsrs	r3, r3, #28
 800864c:	b2da      	uxtb	r2, r3
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	4619      	mov	r1, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	440b      	add	r3, r1
 8008658:	3230      	adds	r2, #48	; 0x30
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e00a      	b.n	8008676 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	0f1b      	lsrs	r3, r3, #28
 8008664:	b2da      	uxtb	r2, r3
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4619      	mov	r1, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	440b      	add	r3, r1
 8008670:	3237      	adds	r2, #55	; 0x37
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	3301      	adds	r3, #1
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	4413      	add	r3, r2
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	3301      	adds	r3, #1
 800868e:	75fb      	strb	r3, [r7, #23]
 8008690:	7dfa      	ldrb	r2, [r7, #23]
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	429a      	cmp	r2, r3
 8008696:	d3d3      	bcc.n	8008640 <IntToUnicode+0x18>
  }
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0d      	ldr	r2, [pc, #52]	; (80086e8 <HAL_PCD_MspInit+0x44>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d113      	bne.n	80086de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <HAL_PCD_MspInit+0x48>)
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <HAL_PCD_MspInit+0x48>)
 80086bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086c0:	61d3      	str	r3, [r2, #28]
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <HAL_PCD_MspInit+0x48>)
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80086ce:	2200      	movs	r2, #0
 80086d0:	2100      	movs	r1, #0
 80086d2:	2014      	movs	r0, #20
 80086d4:	f7f8 fe83 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80086d8:	2014      	movs	r0, #20
 80086da:	f7f8 fe9c 	bl	8001416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40005c00 	.word	0x40005c00
 80086ec:	40021000 	.word	0x40021000

080086f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fea8 	bl	800745c <USBD_LL_SetupStage>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	440b      	add	r3, r1
 8008734:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	4619      	mov	r1, r3
 800873e:	f7fe feda 	bl	80074f6 <USBD_LL_DataOutStage>
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	440b      	add	r3, r1
 800876a:	333c      	adds	r3, #60	; 0x3c
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	4619      	mov	r1, r3
 8008772:	f7fe ff31 	bl	80075d8 <USBD_LL_DataInStage>
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff f841 	bl	8007814 <USBD_LL_SOF>
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087a2:	2301      	movs	r3, #1
 80087a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d001      	beq.n	80087b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80087ae:	f7f8 fbdd 	bl	8000f6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087b8:	7bfa      	ldrb	r2, [r7, #15]
 80087ba:	4611      	mov	r1, r2
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fff1 	bl	80077a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe ffaa 	bl	8007722 <USBD_LL_Reset>
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe ffeb 	bl	80077c2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <HAL_PCD_SuspendCallback+0x30>)
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	4a03      	ldr	r2, [pc, #12]	; (8008808 <HAL_PCD_SuspendCallback+0x30>)
 80087fa:	f043 0306 	orr.w	r3, r3, #6
 80087fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	e000ed00 	.word	0xe000ed00

0800880c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe ffe5 	bl	80077ea <USBD_LL_Resume>
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008830:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <USBD_LL_Init+0x88>)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a1d      	ldr	r2, [pc, #116]	; (80088b0 <USBD_LL_Init+0x88>)
 800883c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008840:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <USBD_LL_Init+0x88>)
 8008842:	4a1c      	ldr	r2, [pc, #112]	; (80088b4 <USBD_LL_Init+0x8c>)
 8008844:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <USBD_LL_Init+0x88>)
 8008848:	2208      	movs	r2, #8
 800884a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <USBD_LL_Init+0x88>)
 800884e:	2202      	movs	r2, #2
 8008850:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <USBD_LL_Init+0x88>)
 8008854:	2200      	movs	r2, #0
 8008856:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008858:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <USBD_LL_Init+0x88>)
 800885a:	2200      	movs	r2, #0
 800885c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800885e:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <USBD_LL_Init+0x88>)
 8008860:	2200      	movs	r2, #0
 8008862:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008864:	4812      	ldr	r0, [pc, #72]	; (80088b0 <USBD_LL_Init+0x88>)
 8008866:	f7f9 ffbd 	bl	80027e4 <HAL_PCD_Init>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008870:	f7f8 fb7c 	bl	8000f6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800887a:	2318      	movs	r3, #24
 800887c:	2200      	movs	r2, #0
 800887e:	2100      	movs	r1, #0
 8008880:	f7fb fc1c 	bl	80040bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800888a:	2358      	movs	r3, #88	; 0x58
 800888c:	2200      	movs	r2, #0
 800888e:	2180      	movs	r1, #128	; 0x80
 8008890:	f7fb fc14 	bl	80040bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800889a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800889e:	2200      	movs	r2, #0
 80088a0:	2181      	movs	r1, #129	; 0x81
 80088a2:	f7fb fc0b 	bl	80040bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	200006e8 	.word	0x200006e8
 80088b4:	40005c00 	.word	0x40005c00

080088b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fa f893 	bl	80029fa <HAL_PCD_Start>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f93c 	bl	8008b58 <USBD_Get_USB_Status>
 80088e0:	4603      	mov	r3, r0
 80088e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	4608      	mov	r0, r1
 80088f8:	4611      	mov	r1, r2
 80088fa:	461a      	mov	r2, r3
 80088fc:	4603      	mov	r3, r0
 80088fe:	70fb      	strb	r3, [r7, #3]
 8008900:	460b      	mov	r3, r1
 8008902:	70bb      	strb	r3, [r7, #2]
 8008904:	4613      	mov	r3, r2
 8008906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008916:	78bb      	ldrb	r3, [r7, #2]
 8008918:	883a      	ldrh	r2, [r7, #0]
 800891a:	78f9      	ldrb	r1, [r7, #3]
 800891c:	f7fa fa0d 	bl	8002d3a <HAL_PCD_EP_Open>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f916 	bl	8008b58 <USBD_Get_USB_Status>
 800892c:	4603      	mov	r3, r0
 800892e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008930:	7bbb      	ldrb	r3, [r7, #14]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	4611      	mov	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7fa fa54 	bl	8002e06 <HAL_PCD_EP_Close>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 f8f7 	bl	8008b58 <USBD_Get_USB_Status>
 800896a:	4603      	mov	r3, r0
 800896c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fa fafd 	bl	8002f96 <HAL_PCD_EP_SetStall>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f8d8 	bl	8008b58 <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089d0:	78fa      	ldrb	r2, [r7, #3]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fa fb3e 	bl	8003056 <HAL_PCD_EP_ClrStall>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 f8b9 	bl	8008b58 <USBD_Get_USB_Status>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da0c      	bge.n	8008a2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	440b      	add	r3, r1
 8008a24:	3302      	adds	r3, #2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	e00b      	b.n	8008a42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a30:	68f9      	ldr	r1, [r7, #12]
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	440b      	add	r3, r1
 8008a3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008a40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr

08008a4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fa f940 	bl	8002cf0 <HAL_PCD_SetAddress>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f86e 	bl	8008b58 <USBD_Get_USB_Status>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	461a      	mov	r2, r3
 8008a96:	460b      	mov	r3, r1
 8008a98:	72fb      	strb	r3, [r7, #11]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aac:	893b      	ldrh	r3, [r7, #8]
 8008aae:	7af9      	ldrb	r1, [r7, #11]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	f7fa fa2d 	bl	8002f10 <HAL_PCD_EP_Transmit>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f84b 	bl	8008b58 <USBD_Get_USB_Status>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ac6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	461a      	mov	r2, r3
 8008adc:	460b      	mov	r3, r1
 8008ade:	72fb      	strb	r3, [r7, #11]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008af2:	893b      	ldrh	r3, [r7, #8]
 8008af4:	7af9      	ldrb	r1, [r7, #11]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	f7fa f9cd 	bl	8002e96 <HAL_PCD_EP_Receive>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 f828 	bl	8008b58 <USBD_Get_USB_Status>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
	...

08008b18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b20:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <USBD_static_malloc+0x14>)
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	200001a0 	.word	0x200001a0

08008b30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr

08008b42 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	2b03      	cmp	r3, #3
 8008b6a:	d817      	bhi.n	8008b9c <USBD_Get_USB_Status+0x44>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <USBD_Get_USB_Status+0x1c>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008b85 	.word	0x08008b85
 8008b78:	08008b8b 	.word	0x08008b8b
 8008b7c:	08008b91 	.word	0x08008b91
 8008b80:	08008b97 	.word	0x08008b97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
    break;
 8008b88:	e00b      	b.n	8008ba2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8e:	e008      	b.n	8008ba2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]
    break;
 8008b94:	e005      	b.n	8008ba2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b96:	2302      	movs	r3, #2
 8008b98:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9a:	e002      	b.n	8008ba2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba0:	bf00      	nop
  }
  return usb_status;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop

08008bb0 <__libc_init_array>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	4d0c      	ldr	r5, [pc, #48]	; (8008be8 <__libc_init_array+0x38>)
 8008bb6:	4c0d      	ldr	r4, [pc, #52]	; (8008bec <__libc_init_array+0x3c>)
 8008bb8:	1b64      	subs	r4, r4, r5
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	42a6      	cmp	r6, r4
 8008bbe:	d109      	bne.n	8008bd4 <__libc_init_array+0x24>
 8008bc0:	f000 f822 	bl	8008c08 <_init>
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	4d0a      	ldr	r5, [pc, #40]	; (8008bf0 <__libc_init_array+0x40>)
 8008bc8:	4c0a      	ldr	r4, [pc, #40]	; (8008bf4 <__libc_init_array+0x44>)
 8008bca:	1b64      	subs	r4, r4, r5
 8008bcc:	10a4      	asrs	r4, r4, #2
 8008bce:	42a6      	cmp	r6, r4
 8008bd0:	d105      	bne.n	8008bde <__libc_init_array+0x2e>
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd8:	4798      	blx	r3
 8008bda:	3601      	adds	r6, #1
 8008bdc:	e7ee      	b.n	8008bbc <__libc_init_array+0xc>
 8008bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be2:	4798      	blx	r3
 8008be4:	3601      	adds	r6, #1
 8008be6:	e7f2      	b.n	8008bce <__libc_init_array+0x1e>
 8008be8:	08008c90 	.word	0x08008c90
 8008bec:	08008c90 	.word	0x08008c90
 8008bf0:	08008c90 	.word	0x08008c90
 8008bf4:	08008c94 	.word	0x08008c94

08008bf8 <memset>:
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4402      	add	r2, r0
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d100      	bne.n	8008c02 <memset+0xa>
 8008c00:	4770      	bx	lr
 8008c02:	f803 1b01 	strb.w	r1, [r3], #1
 8008c06:	e7f9      	b.n	8008bfc <memset+0x4>

08008c08 <_init>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr

08008c14 <_fini>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr
