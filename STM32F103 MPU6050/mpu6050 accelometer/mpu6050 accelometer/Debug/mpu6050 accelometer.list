
mpu6050 accelometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e98  08008e98  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08008e98  08008e98  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e98  08008e98  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08008ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  20000188  08009028  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  08009028  00020a00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ff  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000298c  00000000  00000000  000328b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00035240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  00035f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970e  00000000  00000000  00036ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000face  00000000  00000000  000501ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087352  00000000  00000000  0005fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  000e706c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000188 	.word	0x20000188
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e0c 	.word	0x08008e0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000018c 	.word	0x2000018c
 800014c:	08008e0c 	.word	0x08008e0c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_f2iz>:
 8000ba8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bb0:	d30f      	bcc.n	8000bd2 <__aeabi_f2iz+0x2a>
 8000bb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_f2iz+0x30>
 8000bbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bcc:	bf18      	it	ne
 8000bce:	4240      	negne	r0, r0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr
 8000bd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bdc:	d101      	bne.n	8000be2 <__aeabi_f2iz+0x3a>
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	d105      	bne.n	8000bee <__aeabi_f2iz+0x46>
 8000be2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	bf08      	it	eq
 8000be8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2275      	movs	r2, #117	; 0x75
 8000c0c:	21d0      	movs	r1, #208	; 0xd0
 8000c0e:	4823      	ldr	r0, [pc, #140]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c10:	f001 f93e 	bl	8001e90 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b68      	cmp	r3, #104	; 0x68
 8000c18:	d13b      	bne.n	8000c92 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	226b      	movs	r2, #107	; 0x6b
 8000c30:	21d0      	movs	r1, #208	; 0xd0
 8000c32:	481a      	ldr	r0, [pc, #104]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c34:	f001 f832 	bl	8001c9c <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2219      	movs	r2, #25
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c52:	f001 f823 	bl	8001c9c <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	9302      	str	r3, [sp, #8]
 8000c60:	2301      	movs	r3, #1
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	221c      	movs	r2, #28
 8000c6c:	21d0      	movs	r1, #208	; 0xd0
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c70:	f001 f814 	bl	8001c9c <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	1dbb      	adds	r3, r7, #6
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2301      	movs	r3, #1
 8000c88:	221b      	movs	r2, #27
 8000c8a:	21d0      	movs	r1, #208	; 0xd0
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c8e:	f001 f805 	bl	8001c9c <HAL_I2C_Mem_Write>
	}

}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001e4 	.word	0x200001e4

08000ca0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2306      	movs	r3, #6
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	223b      	movs	r2, #59	; 0x3b
 8000cb8:	21d0      	movs	r1, #208	; 0xd0
 8000cba:	483f      	ldr	r0, [pc, #252]	; (8000db8 <MPU6050_Read_Accel+0x118>)
 8000cbc:	f001 f8e8 	bl	8001e90 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000cc0:	783b      	ldrb	r3, [r7, #0]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	787b      	ldrb	r3, [r7, #1]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <MPU6050_Read_Accel+0x11c>)
 8000cd0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000cd2:	78bb      	ldrb	r3, [r7, #2]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <MPU6050_Read_Accel+0x120>)
 8000ce2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ce4:	793b      	ldrb	r3, [r7, #4]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <MPU6050_Read_Accel+0x124>)
 8000cf4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW*9.8/16384.0;
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MPU6050_Read_Accel+0x11c>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fb79 	bl	80003f4 <__aeabi_i2d>
 8000d02:	a32b      	add	r3, pc, #172	; (adr r3, 8000db0 <MPU6050_Read_Accel+0x110>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fbde 	bl	80004c8 <__aeabi_dmul>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4618      	mov	r0, r3
 8000d12:	4621      	mov	r1, r4
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MPU6050_Read_Accel+0x128>)
 8000d1a:	f7ff fcff 	bl	800071c <__aeabi_ddiv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	4618      	mov	r0, r3
 8000d24:	4621      	mov	r1, r4
 8000d26:	f7ff fde1 	bl	80008ec <__aeabi_d2f>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <MPU6050_Read_Accel+0x12c>)
 8000d2e:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW*9.8/16384.0;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MPU6050_Read_Accel+0x120>)
 8000d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb5c 	bl	80003f4 <__aeabi_i2d>
 8000d3c:	a31c      	add	r3, pc, #112	; (adr r3, 8000db0 <MPU6050_Read_Accel+0x110>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fbc1 	bl	80004c8 <__aeabi_dmul>
 8000d46:	4603      	mov	r3, r0
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MPU6050_Read_Accel+0x128>)
 8000d54:	f7ff fce2 	bl	800071c <__aeabi_ddiv>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	4621      	mov	r1, r4
 8000d60:	f7ff fdc4 	bl	80008ec <__aeabi_d2f>
 8000d64:	4602      	mov	r2, r0
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MPU6050_Read_Accel+0x130>)
 8000d68:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW*9.8/16384.0;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MPU6050_Read_Accel+0x124>)
 8000d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb3f 	bl	80003f4 <__aeabi_i2d>
 8000d76:	a30e      	add	r3, pc, #56	; (adr r3, 8000db0 <MPU6050_Read_Accel+0x110>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fba4 	bl	80004c8 <__aeabi_dmul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	4618      	mov	r0, r3
 8000d86:	4621      	mov	r1, r4
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MPU6050_Read_Accel+0x128>)
 8000d8e:	f7ff fcc5 	bl	800071c <__aeabi_ddiv>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	4618      	mov	r0, r3
 8000d98:	4621      	mov	r1, r4
 8000d9a:	f7ff fda7 	bl	80008ec <__aeabi_d2f>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MPU6050_Read_Accel+0x134>)
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	f3af 8000 	nop.w
 8000db0:	9999999a 	.word	0x9999999a
 8000db4:	40239999 	.word	0x40239999
 8000db8:	200001e4 	.word	0x200001e4
 8000dbc:	200001bc 	.word	0x200001bc
 8000dc0:	200001be 	.word	0x200001be
 8000dc4:	200001c0 	.word	0x200001c0
 8000dc8:	40d00000 	.word	0x40d00000
 8000dcc:	20000240 	.word	0x20000240
 8000dd0:	20000238 	.word	0x20000238
 8000dd4:	20000244 	.word	0x20000244

08000dd8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2306      	movs	r3, #6
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	463b      	mov	r3, r7
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	2243      	movs	r2, #67	; 0x43
 8000df0:	21d0      	movs	r1, #208	; 0xd0
 8000df2:	482b      	ldr	r0, [pc, #172]	; (8000ea0 <MPU6050_Read_Gyro+0xc8>)
 8000df4:	f001 f84c 	bl	8001e90 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000df8:	783b      	ldrb	r3, [r7, #0]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MPU6050_Read_Gyro+0xcc>)
 8000e08:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000e0a:	78bb      	ldrb	r3, [r7, #2]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <MPU6050_Read_Gyro+0xd0>)
 8000e1a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MPU6050_Read_Gyro+0xd4>)
 8000e2c:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/
	Gx = (Gyro_X_RAW + 100)/divider[divider_level];
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MPU6050_Read_Gyro+0xcc>)
 8000e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e34:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MPU6050_Read_Gyro+0xd8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	491d      	ldr	r1, [pc, #116]	; (8000eb4 <MPU6050_Read_Gyro+0xdc>)
 8000e3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe5a 	bl	8000b00 <__aeabi_i2f>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MPU6050_Read_Gyro+0xe0>)
 8000e50:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW	/		divider[divider_level];
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MPU6050_Read_Gyro+0xd0>)
 8000e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MPU6050_Read_Gyro+0xd8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MPU6050_Read_Gyro+0xdc>)
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe49 	bl	8000b00 <__aeabi_i2f>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MPU6050_Read_Gyro+0xe4>)
 8000e72:	601a      	str	r2, [r3, #0]
	Gz = (Gyro_Z_RAW + 100)/divider[divider_level];
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MPU6050_Read_Gyro+0xd4>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MPU6050_Read_Gyro+0xd8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <MPU6050_Read_Gyro+0xdc>)
 8000e84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe37 	bl	8000b00 <__aeabi_i2f>
 8000e92:	4602      	mov	r2, r0
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MPU6050_Read_Gyro+0xe8>)
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001e4 	.word	0x200001e4
 8000ea4:	200001c2 	.word	0x200001c2
 8000ea8:	200001c4 	.word	0x200001c4
 8000eac:	200001c6 	.word	0x200001c6
 8000eb0:	20000020 	.word	0x20000020
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	200001e0 	.word	0x200001e0
 8000ebc:	2000023c 	.word	0x2000023c
 8000ec0:	20000248 	.word	0x20000248

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fa72 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f8a6 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f92c 	bl	800112c <MX_GPIO_Init>
  HAL_Delay (1000);//to solve the reset issue
 8000ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed8:	f000 facc 	bl	8001474 <HAL_Delay>
  MX_I2C1_Init();
 8000edc:	f000 f8f8 	bl	80010d0 <MX_I2C1_Init>
  HAL_Delay (100);//to solve the reset issue
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f000 fac7 	bl	8001474 <HAL_Delay>
  MX_USB_DEVICE_Init();
 8000ee6:	f007 fbab 	bl	8008640 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (100);//to solve the reset issue
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f000 fac2 	bl	8001474 <HAL_Delay>
  MPU6050_Init();
 8000ef0:	f7ff fe80 	bl	8000bf4 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel();
 8000ef4:	f7ff fed4 	bl	8000ca0 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000ef8:	f7ff ff6e 	bl	8000dd8 <MPU6050_Read_Gyro>

	mousehid.mouse_y = -Gz;
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <main+0x12c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe4f 	bl	8000ba8 <__aeabi_f2iz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b25a      	sxtb	r2, r3
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <main+0x130>)
 8000f10:	709a      	strb	r2, [r3, #2]
	mousehid.mouse_x = Gy;
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <main+0x134>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe46 	bl	8000ba8 <__aeabi_f2iz>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <main+0x130>)
 8000f22:	705a      	strb	r2, [r3, #1]

	buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000f24:	2120      	movs	r1, #32
 8000f26:	4835      	ldr	r0, [pc, #212]	; (8000ffc <main+0x138>)
 8000f28:	f000 fd2e 	bl	8001988 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b33      	ldr	r3, [pc, #204]	; (8001000 <main+0x13c>)
 8000f32:	601a      	str	r2, [r3, #0]
	right_click = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	4831      	ldr	r0, [pc, #196]	; (8000ffc <main+0x138>)
 8000f38:	f000 fd26 	bl	8001988 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <main+0x140>)
 8000f42:	601a      	str	r2, [r3, #0]
	thirdbutton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	482d      	ldr	r0, [pc, #180]	; (8000ffc <main+0x138>)
 8000f48:	f000 fd1e 	bl	8001988 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <main+0x144>)
 8000f52:	601a      	str	r2, [r3, #0]

	if (buttonstate != oldbuttonstate )
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <main+0x13c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <main+0x148>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d00e      	beq.n	8000f7e <main+0xba>
	{
	  mousehid.button = buttonstate;  // left click =1, right click =2
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <main+0x13c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <main+0x130>)
 8000f68:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	4921      	ldr	r1, [pc, #132]	; (8000ff4 <main+0x130>)
 8000f6e:	4828      	ldr	r0, [pc, #160]	; (8001010 <main+0x14c>)
 8000f70:	f006 fa84 	bl	800747c <USBD_HID_SendReport>
	  oldbuttonstate = buttonstate;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <main+0x13c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a24      	ldr	r2, [pc, #144]	; (800100c <main+0x148>)
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e033      	b.n	8000fe6 <main+0x122>
	}else if(right_click != oldright_click){
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <main+0x140>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <main+0x150>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d014      	beq.n	8000fb4 <main+0xf0>
		if(right_click ==1){
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <main+0x140>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d103      	bne.n	8000f9a <main+0xd6>
			mousehid.button = 2;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <main+0x130>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e002      	b.n	8000fa0 <main+0xdc>
		}else{
			mousehid.button = 0;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <main+0x130>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
		}
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <main+0x130>)
 8000fa4:	481a      	ldr	r0, [pc, #104]	; (8001010 <main+0x14c>)
 8000fa6:	f006 fa69 	bl	800747c <USBD_HID_SendReport>
		oldright_click =right_click;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <main+0x140>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a19      	ldr	r2, [pc, #100]	; (8001014 <main+0x150>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e018      	b.n	8000fe6 <main+0x122>
	}else if(thirdbutton){
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <main+0x144>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00f      	beq.n	8000fdc <main+0x118>
		divider_level = divider_level + 1;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <main+0x154>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <main+0x154>)
 8000fc4:	6013      	str	r3, [r2, #0]
		if(divider_level == 8){
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <main+0x154>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d102      	bne.n	8000fd4 <main+0x110>
			divider_level=0;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <main+0x154>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay (50);  // wait for a while
 8000fd4:	2032      	movs	r0, #50	; 0x32
 8000fd6:	f000 fa4d 	bl	8001474 <HAL_Delay>
 8000fda:	e004      	b.n	8000fe6 <main+0x122>
	}else{
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <main+0x130>)
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <main+0x14c>)
 8000fe2:	f006 fa4b 	bl	800747c <USBD_HID_SendReport>
	}


	HAL_Delay (10);  // wait for a while
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 fa44 	bl	8001474 <HAL_Delay>
	MPU6050_Read_Accel();
 8000fec:	e782      	b.n	8000ef4 <main+0x30>
 8000fee:	bf00      	nop
 8000ff0:	20000248 	.word	0x20000248
 8000ff4:	200001a4 	.word	0x200001a4
 8000ff8:	2000023c 	.word	0x2000023c
 8000ffc:	40010800 	.word	0x40010800
 8001000:	200001a8 	.word	0x200001a8
 8001004:	200001ac 	.word	0x200001ac
 8001008:	200001b0 	.word	0x200001b0
 800100c:	200001b4 	.word	0x200001b4
 8001010:	20000250 	.word	0x20000250
 8001014:	200001b8 	.word	0x200001b8
 8001018:	20000020 	.word	0x20000020

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	2228      	movs	r2, #40	; 0x28
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fee6 	bl	8008dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001068:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800106c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f974 	bl	8004360 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107e:	f000 f8b7 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001092:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fbde 	bl	8004860 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010aa:	f000 f8a1 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010ae:	2310      	movs	r3, #16
 80010b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fd59 	bl	8004b70 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80010c4:	f000 f894 	bl	80011f0 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3750      	adds	r7, #80	; 0x50
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C1_Init+0x50>)
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <MX_I2C1_Init+0x54>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C1_Init+0x50>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_I2C1_Init+0x58>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_I2C1_Init+0x50>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_I2C1_Init+0x50>)
 800110e:	f000 fc8d 	bl	8001a2c <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 f86a 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001e4 	.word	0x200001e4
 8001124:	40005400 	.word	0x40005400
 8001128:	000186a0 	.word	0x000186a0

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001146:	f043 0320 	orr.w	r3, r3, #32
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <MX_GPIO_Init+0xb4>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_GPIO_Init+0xb4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <MX_GPIO_Init+0xb4>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <MX_GPIO_Init+0xb4>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_GPIO_Init+0xb4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4815      	ldr	r0, [pc, #84]	; (80011e4 <MX_GPIO_Init+0xb8>)
 800118e:	f000 fc12 	bl	80019b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001192:	23e0      	movs	r3, #224	; 0xe0
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_GPIO_Init+0xbc>)
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_GPIO_Init+0xc0>)
 80011a6:	f000 fa95 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011aa:	2310      	movs	r3, #16
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_GPIO_Init+0xb8>)
 80011c2:	f000 fa87 	bl	80016d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2017      	movs	r0, #23
 80011cc:	f000 fa4b 	bl	8001666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011d0:	2017      	movs	r0, #23
 80011d2:	f000 fa64 	bl	800169e <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	10210000 	.word	0x10210000
 80011ec:	40010800 	.word	0x40010800

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <Error_Handler+0x6>

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_MspInit+0x5c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <HAL_MspInit+0x5c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6193      	str	r3, [r2, #24]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_MspInit+0x5c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_MspInit+0x5c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_MspInit+0x60>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_MspInit+0x60>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <HAL_I2C_MspInit+0x70>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d123      	bne.n	80012c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_I2C_MspInit+0x74>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <HAL_I2C_MspInit+0x74>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_I2C_MspInit+0x74>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001294:	23c0      	movs	r3, #192	; 0xc0
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <HAL_I2C_MspInit+0x78>)
 80012a8:	f000 fa14 	bl	80016d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_I2C_MspInit+0x74>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_I2C_MspInit+0x74>)
 80012b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b6:	61d3      	str	r3, [r2, #28]
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_I2C_MspInit+0x74>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40005400 	.word	0x40005400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131e:	f000 f88d 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800132e:	f001 fc9c 	bl	8002c6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000714 	.word	0x20000714

0800133c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001340:	2020      	movs	r0, #32
 8001342:	f000 fb51 	bl	80019e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001346:	2040      	movs	r0, #64	; 0x40
 8001348:	f000 fb4e 	bl	80019e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800134c:	2080      	movs	r0, #128	; 0x80
 800134e:	f000 fb4b 	bl	80019e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	; (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800138a:	f7ff ffe4 	bl	8001356 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f007 fd11 	bl	8008db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001392:	f7ff fd97 	bl	8000ec4 <main>
  bx lr
 8001396:	4770      	bx	lr
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80013a0:	08008ea0 	.word	0x08008ea0
  ldr r2, =_sbss
 80013a4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80013a8:	20000a00 	.word	0x20000a00

080013ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC1_2_IRQHandler>
	...

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_Init+0x28>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_Init+0x28>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c0:	2003      	movs	r0, #3
 80013c2:	f000 f945 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f000 f808 	bl	80013dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff ff14 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x54>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f95d 	bl	80016ba <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 f925 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x5c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000024 	.word	0x20000024
 8001434:	2000002c 	.word	0x2000002c
 8001438:	20000028 	.word	0x20000028

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a03      	ldr	r2, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000002c 	.word	0x2000002c
 800145c:	2000024c 	.word	0x2000024c

08001460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	2000024c 	.word	0x2000024c

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fff0 	bl	8001460 <HAL_GetTick>
 8001480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_Delay+0x40>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	bf00      	nop
 800149c:	f7ff ffe0 	bl	8001460 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000002c 	.word	0x2000002c

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4906      	ldr	r1, [pc, #24]	; (8001550 <__NVIC_EnableIRQ+0x34>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff90 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff2d 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff42 	bl	8001500 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff90 	bl	80015a8 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5f 	bl	8001554 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff35 	bl	800151c <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e127      	b.n	8001938 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e8:	2201      	movs	r2, #1
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8116 	bne.w	8001932 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b12      	cmp	r3, #18
 800170c:	d034      	beq.n	8001778 <HAL_GPIO_Init+0xa4>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d80d      	bhi.n	800172e <HAL_GPIO_Init+0x5a>
 8001712:	2b02      	cmp	r3, #2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x9a>
 8001716:	2b02      	cmp	r3, #2
 8001718:	d804      	bhi.n	8001724 <HAL_GPIO_Init+0x50>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d031      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d01c      	beq.n	800175c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001722:	e048      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001724:	2b03      	cmp	r3, #3
 8001726:	d043      	beq.n	80017b0 <HAL_GPIO_Init+0xdc>
 8001728:	2b11      	cmp	r3, #17
 800172a:	d01b      	beq.n	8001764 <HAL_GPIO_Init+0x90>
          break;
 800172c:	e043      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800172e:	4a89      	ldr	r2, [pc, #548]	; (8001954 <HAL_GPIO_Init+0x280>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d026      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 8001734:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_GPIO_Init+0x280>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d806      	bhi.n	8001748 <HAL_GPIO_Init+0x74>
 800173a:	4a87      	ldr	r2, [pc, #540]	; (8001958 <HAL_GPIO_Init+0x284>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d020      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 8001740:	4a86      	ldr	r2, [pc, #536]	; (800195c <HAL_GPIO_Init+0x288>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01d      	beq.n	8001782 <HAL_GPIO_Init+0xae>
          break;
 8001746:	e036      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001748:	4a85      	ldr	r2, [pc, #532]	; (8001960 <HAL_GPIO_Init+0x28c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d019      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 800174e:	4a85      	ldr	r2, [pc, #532]	; (8001964 <HAL_GPIO_Init+0x290>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d016      	beq.n	8001782 <HAL_GPIO_Init+0xae>
 8001754:	4a84      	ldr	r2, [pc, #528]	; (8001968 <HAL_GPIO_Init+0x294>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0xae>
          break;
 800175a:	e02c      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e028      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	3304      	adds	r3, #4
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e023      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	3308      	adds	r3, #8
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e01e      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	330c      	adds	r3, #12
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e019      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800178a:	2304      	movs	r3, #4
 800178c:	623b      	str	r3, [r7, #32]
          break;
 800178e:	e012      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	611a      	str	r2, [r3, #16]
          break;
 80017a2:	e008      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a4:	2308      	movs	r3, #8
 80017a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	615a      	str	r2, [r3, #20]
          break;
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
          break;
 80017b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2bff      	cmp	r3, #255	; 0xff
 80017ba:	d801      	bhi.n	80017c0 <HAL_GPIO_Init+0xec>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	e001      	b.n	80017c4 <HAL_GPIO_Init+0xf0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d802      	bhi.n	80017d2 <HAL_GPIO_Init+0xfe>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x104>
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	3b08      	subs	r3, #8
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	210f      	movs	r1, #15
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	401a      	ands	r2, r3
 80017ea:	6a39      	ldr	r1, [r7, #32]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	431a      	orrs	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8096 	beq.w	8001932 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_GPIO_Init+0x298>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_GPIO_Init+0x298>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_GPIO_Init+0x298>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800181e:	4a54      	ldr	r2, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x29c>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <HAL_GPIO_Init+0x2a0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x19e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4a      	ldr	r2, [pc, #296]	; (8001978 <HAL_GPIO_Init+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x19a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a49      	ldr	r2, [pc, #292]	; (800197c <HAL_GPIO_Init+0x2a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x196>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2ac>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x192>
 8001862:	2303      	movs	r3, #3
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 8001866:	2304      	movs	r3, #4
 8001868:	e004      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 800186a:	2302      	movs	r3, #2
 800186c:	e002      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x1a0>
 8001872:	2300      	movs	r3, #0
 8001874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001876:	f002 0203 	and.w	r2, r2, #3
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4093      	lsls	r3, r2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001884:	493a      	ldr	r1, [pc, #232]	; (8001970 <HAL_GPIO_Init+0x29c>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800189e:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4938      	ldr	r1, [pc, #224]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e006      	b.n	80018ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4933      	ldr	r1, [pc, #204]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	492e      	ldr	r1, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	43db      	mvns	r3, r3
 80018dc:	4929      	ldr	r1, [pc, #164]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018de:	4013      	ands	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ee:	4b25      	ldr	r3, [pc, #148]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	4924      	ldr	r1, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	491f      	ldr	r1, [pc, #124]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001906:	4013      	ands	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	491a      	ldr	r1, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	60cb      	str	r3, [r1, #12]
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	4915      	ldr	r1, [pc, #84]	; (8001984 <HAL_GPIO_Init+0x2b0>)
 800192e:	4013      	ands	r3, r2
 8001930:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3301      	adds	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f aed0 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 8001948:	bf00      	nop
 800194a:	372c      	adds	r7, #44	; 0x2c
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	10210000 	.word	0x10210000
 8001958:	10110000 	.word	0x10110000
 800195c:	10120000 	.word	0x10120000
 8001960:	10310000 	.word	0x10310000
 8001964:	10320000 	.word	0x10320000
 8001968:	10220000 	.word	0x10220000
 800196c:	40021000 	.word	0x40021000
 8001970:	40010000 	.word	0x40010000
 8001974:	40010800 	.word	0x40010800
 8001978:	40010c00 	.word	0x40010c00
 800197c:	40011000 	.word	0x40011000
 8001980:	40011400 	.word	0x40011400
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c6:	787b      	ldrb	r3, [r7, #1]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d2:	e003      	b.n	80019dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	041a      	lsls	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f806 	bl	8001a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e11f      	b.n	8001c7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fc02 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a90:	f003 f83c 	bl	8004b0c <HAL_RCC_GetPCLK1Freq>
 8001a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a7b      	ldr	r2, [pc, #492]	; (8001c88 <HAL_I2C_Init+0x25c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d807      	bhi.n	8001ab0 <HAL_I2C_Init+0x84>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_I2C_Init+0x260>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e006      	b.n	8001abe <HAL_I2C_Init+0x92>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a77      	ldr	r2, [pc, #476]	; (8001c90 <HAL_I2C_Init+0x264>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	bf94      	ite	ls
 8001ab8:	2301      	movls	r3, #1
 8001aba:	2300      	movhi	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0db      	b.n	8001c7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4a72      	ldr	r2, [pc, #456]	; (8001c94 <HAL_I2C_Init+0x268>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a64      	ldr	r2, [pc, #400]	; (8001c88 <HAL_I2C_Init+0x25c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d802      	bhi.n	8001b00 <HAL_I2C_Init+0xd4>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	e009      	b.n	8001b14 <HAL_I2C_Init+0xe8>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	4a63      	ldr	r2, [pc, #396]	; (8001c98 <HAL_I2C_Init+0x26c>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	3301      	adds	r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4956      	ldr	r1, [pc, #344]	; (8001c88 <HAL_I2C_Init+0x25c>)
 8001b30:	428b      	cmp	r3, r1
 8001b32:	d80d      	bhi.n	8001b50 <HAL_I2C_Init+0x124>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e59      	subs	r1, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	bf38      	it	cc
 8001b4c:	2304      	movcc	r3, #4
 8001b4e:	e04f      	b.n	8001bf0 <HAL_I2C_Init+0x1c4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d111      	bne.n	8001b7c <HAL_I2C_Init+0x150>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e58      	subs	r0, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	440b      	add	r3, r1
 8001b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e012      	b.n	8001ba2 <HAL_I2C_Init+0x176>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e58      	subs	r0, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	0099      	lsls	r1, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Init+0x17e>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e022      	b.n	8001bf0 <HAL_I2C_Init+0x1c4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_I2C_Init+0x1a4>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1e58      	subs	r0, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	440b      	add	r3, r1
 8001bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bce:	e00f      	b.n	8001bf0 <HAL_I2C_Init+0x1c4>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	6809      	ldr	r1, [r1, #0]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69da      	ldr	r2, [r3, #28]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6911      	ldr	r1, [r2, #16]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68d2      	ldr	r2, [r2, #12]
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	000186a0 	.word	0x000186a0
 8001c8c:	001e847f 	.word	0x001e847f
 8001c90:	003d08ff 	.word	0x003d08ff
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cb6:	f7ff fbd3 	bl	8001460 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	f040 80d9 	bne.w	8001e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	496d      	ldr	r1, [pc, #436]	; (8001e88 <HAL_I2C_Mem_Write+0x1ec>)
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fcbb 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0cc      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Mem_Write+0x56>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e0c5      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2221      	movs	r2, #33	; 0x21
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_I2C_Mem_Write+0x1f0>)
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d5a:	88f8      	ldrh	r0, [r7, #6]
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4603      	mov	r3, r0
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 faf2 	bl	8002354 <I2C_RequestMemoryWrite>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d052      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e081      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fd3c 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00d      	beq.n	8001da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d107      	bne.n	8001da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06b      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d11b      	bne.n	8001e1c <HAL_I2C_Mem_Write+0x180>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1aa      	bne.n	8001d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 fd28 	bl	800287e <I2C_WaitOnBTFFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00d      	beq.n	8001e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d107      	bne.n	8001e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e016      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	00100002 	.word	0x00100002
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	817b      	strh	r3, [r7, #10]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	813b      	strh	r3, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eae:	f7ff fad7 	bl	8001460 <HAL_GetTick>
 8001eb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	f040 823d 	bne.w	800233c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2319      	movs	r3, #25
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4981      	ldr	r1, [pc, #516]	; (80020d0 <HAL_I2C_Mem_Read+0x240>)
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fbbf 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e230      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_I2C_Mem_Read+0x5a>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e229      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d007      	beq.n	8001f10 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2222      	movs	r2, #34	; 0x22
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <HAL_I2C_Mem_Read+0x244>)
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f52:	88f8      	ldrh	r0, [r7, #6]
 8001f54:	893a      	ldrh	r2, [r7, #8]
 8001f56:	8979      	ldrh	r1, [r7, #10]
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4603      	mov	r3, r0
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fa8c 	bl	8002480 <I2C_RequestMemoryRead>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1e5      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e1b9      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d11d      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fe2:	b662      	cpsie	i
 8001fe4:	e197      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d11d      	bne.n	800202a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002026:	b662      	cpsie	i
 8002028:	e175      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002038:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002050:	e161      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	2b03      	cmp	r3, #3
 8002058:	f200 811a 	bhi.w	8002290 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	2b01      	cmp	r3, #1
 8002062:	d123      	bne.n	80020ac <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fc49 	bl	8002900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e162      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020aa:	e134      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d150      	bne.n	8002156 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ba:	2200      	movs	r2, #0
 80020bc:	4906      	ldr	r1, [pc, #24]	; (80020d8 <HAL_I2C_Mem_Read+0x248>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fac6 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e137      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
 80020ce:	bf00      	nop
 80020d0:	00100002 	.word	0x00100002
 80020d4:	ffff0000 	.word	0xffff0000
 80020d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ec:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002120:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002154:	e0df      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	2200      	movs	r2, #0
 800215e:	497a      	ldr	r1, [pc, #488]	; (8002348 <HAL_I2C_Mem_Read+0x4b8>)
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fa75 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0e6      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021b4:	4b65      	ldr	r3, [pc, #404]	; (800234c <HAL_I2C_Mem_Read+0x4bc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <HAL_I2C_Mem_Read+0x4c0>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	0a1a      	lsrs	r2, r3, #8
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00da      	lsls	r2, r3, #3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d117      	bne.n	800220a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80021fc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e099      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d1da      	bne.n	80021ce <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800225a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800228e:	e042      	b.n	8002316 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fb33 	bl	8002900 <I2C_WaitOnRXNEFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e04c      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d118      	bne.n	8002316 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	f47f ae99 	bne.w	8002052 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	00010004 	.word	0x00010004
 800234c:	20000024 	.word	0x20000024
 8002350:	14f8b589 	.word	0x14f8b589

08002354 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	460b      	mov	r3, r1
 8002368:	813b      	strh	r3, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800237c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	2200      	movs	r2, #0
 8002386:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f960 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00d      	beq.n	80023b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a4:	d103      	bne.n	80023ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e05f      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	492d      	ldr	r1, [pc, #180]	; (800247c <I2C_RequestMemoryWrite+0x128>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f998 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e04c      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa02 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002414:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e02b      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d105      	bne.n	800242c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002420:	893b      	ldrh	r3, [r7, #8]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e021      	b.n	8002470 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800242c:	893b      	ldrh	r3, [r7, #8]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	b29b      	uxth	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f9dc 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b04      	cmp	r3, #4
 8002450:	d107      	bne.n	8002462 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002460:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e005      	b.n	8002472 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002466:	893b      	ldrh	r3, [r7, #8]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	00010002 	.word	0x00010002

08002480 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	460b      	mov	r3, r1
 8002494:	813b      	strh	r3, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f8c2 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e0:	d103      	bne.n	80024ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0aa      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	4952      	ldr	r1, [pc, #328]	; (800264c <I2C_RequestMemoryRead+0x1cc>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f8fa 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e097      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f964 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00d      	beq.n	8002556 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b04      	cmp	r3, #4
 8002540:	d107      	bne.n	8002552 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e076      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	611a      	str	r2, [r3, #16]
 8002566:	e021      	b.n	80025ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29b      	uxth	r3, r3
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	6a39      	ldr	r1, [r7, #32]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f93e 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00d      	beq.n	80025a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b04      	cmp	r3, #4
 800258c:	d107      	bne.n	800259e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e050      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f923 	bl	80027fc <I2C_WaitOnTXEFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d107      	bne.n	80025d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e035      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f82b 	bl	8002650 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260e:	d103      	bne.n	8002618 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e013      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800261c:	897b      	ldrh	r3, [r7, #10]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	4906      	ldr	r1, [pc, #24]	; (800264c <I2C_RequestMemoryRead+0x1cc>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f863 	bl	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	00010002 	.word	0x00010002

08002650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	e025      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d021      	beq.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe fef9 	bl	8001460 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d116      	bne.n	80026ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e023      	b.n	80026f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10d      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	e00c      	b.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d0b6      	beq.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800270c:	e051      	b.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d123      	bne.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002736:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0204 	orr.w	r2, r3, #4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e046      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d021      	beq.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276e:	f7fe fe77 	bl	8001460 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f043 0220 	orr.w	r2, r3, #32
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e020      	b.n	80027f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10c      	bne.n	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e00b      	b.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	43da      	mvns	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d18d      	bne.n	800270e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002808:	e02d      	b.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8ce 	bl	80029ac <I2C_IsAcknowledgeFailed>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02d      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d021      	beq.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7fe fe1d 	bl	8001460 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d116      	bne.n	8002866 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d1ca      	bne.n	800280a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800288a:	e02d      	b.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f88d 	bl	80029ac <I2C_IsAcknowledgeFailed>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e02d      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d021      	beq.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a4:	f7fe fddc 	bl	8001460 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d302      	bcc.n	80028ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e007      	b.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d1ca      	bne.n	800288c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800290c:	e042      	b.n	8002994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d119      	bne.n	8002950 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e029      	b.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002950:	f7fe fd86 	bl	8001460 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	d302      	bcc.n	8002966 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e007      	b.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d1b5      	bne.n	800290e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d11b      	bne.n	80029fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0a:	b08b      	sub	sp, #44	; 0x2c
 8002a0c:	af06      	add	r7, sp, #24
 8002a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0fd      	b.n	8002c16 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f005 ff3a 	bl	80088a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 f971 	bl	8004d28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	687e      	ldr	r6, [r7, #4]
 8002a4e:	466d      	mov	r5, sp
 8002a50:	f106 0410 	add.w	r4, r6, #16
 8002a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	1d33      	adds	r3, r6, #4
 8002a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a60:	6838      	ldr	r0, [r7, #0]
 8002a62:	f002 f93b 	bl	8004cdc <USB_CoreInit>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0ce      	b.n	8002c16 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 f96c 	bl	8004d5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e04c      	b.n	8002b24 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	b298      	uxth	r0, r3
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3336      	adds	r3, #54	; 0x36
 8002ac8:	4602      	mov	r2, r0
 8002aca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3303      	adds	r3, #3
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	3338      	adds	r3, #56	; 0x38
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	333c      	adds	r3, #60	; 0x3c
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	3340      	adds	r3, #64	; 0x40
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	3301      	adds	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3ad      	bcc.n	8002a8a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e044      	b.n	8002bbe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3b5      	bcc.n	8002b34 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	687e      	ldr	r6, [r7, #4]
 8002bd0:	466d      	mov	r5, sp
 8002bd2:	f106 0410 	add.w	r4, r6, #16
 8002bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	1d33      	adds	r3, r6, #4
 8002be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f002 f8c6 	bl	8004d74 <USB_DevInit>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00d      	b.n	8002c16 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fa37 	bl	8007082 <USB_DevDisconnect>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_Start+0x16>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e016      	b.n	8002c62 <HAL_PCD_Start+0x44>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 f85b 	bl	8004cfc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c46:	2101      	movs	r1, #1
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f006 f87c 	bl	8008d46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f004 fa0b 	bl	800706e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b088      	sub	sp, #32
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 fa0d 	bl	8007096 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c86:	d102      	bne.n	8002c8e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fb4a 	bl	8003322 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 f9ff 	bl	8007096 <USB_ReadInterrupts>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d112      	bne.n	8002cca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f005 fe6e 	bl	800899e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f925 	bl	8002f14 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 f9e1 	bl	8007096 <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cde:	d10b      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 f9ca 	bl	8007096 <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0c:	d10b      	bne.n	8002d26 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d20:	b292      	uxth	r2, r2
 8002d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 f9b3 	bl	8007096 <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3a:	d126      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0204 	bic.w	r2, r2, #4
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0208 	bic.w	r2, r2, #8
 8002d66:	b292      	uxth	r2, r2
 8002d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f005 fe4f 	bl	8008a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d84:	b292      	uxth	r2, r2
 8002d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 f981 	bl	8007096 <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9e:	f040 8084 	bne.w	8002eaa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e011      	b.n	8002dcc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	7ffb      	ldrb	r3, [r7, #31]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	7ffb      	ldrb	r3, [r7, #31]
 8002db6:	8812      	ldrh	r2, [r2, #0]
 8002db8:	b292      	uxth	r2, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	f107 0120 	add.w	r1, r7, #32
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	2b07      	cmp	r3, #7
 8002dd0:	d9ea      	bls.n	8002da8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	b292      	uxth	r2, r2
 8002de6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e02:	bf00      	nop
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f6      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e010      	b.n	8002e56 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	7ffa      	ldrb	r2, [r7, #31]
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	440a      	add	r2, r1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	f107 0120 	add.w	r1, r7, #32
 8002e48:	440b      	add	r3, r1
 8002e4a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002e4e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002e50:	7ffb      	ldrb	r3, [r7, #31]
 8002e52:	3301      	adds	r3, #1
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	2b07      	cmp	r3, #7
 8002e5a:	d9eb      	bls.n	8002e34 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e86:	b292      	uxth	r2, r2
 8002e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0204 	orr.w	r2, r2, #4
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f005 fd99 	bl	80089dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 f8f1 	bl	8007096 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebe:	d10e      	bne.n	8002ede <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f005 fd52 	bl	8008982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 f8d7 	bl	8007096 <USB_ReadInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef2:	d10b      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_SetAddress+0x1a>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e013      	b.n	8002f56 <HAL_PCD_SetAddress+0x42>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 f87e 	bl	8007048 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	4608      	mov	r0, r1
 8002f68:	4611      	mov	r1, r2
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	70fb      	strb	r3, [r7, #3]
 8002f70:	460b      	mov	r3, r1
 8002f72:	803b      	strh	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da0e      	bge.n	8002fa2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	705a      	strb	r2, [r3, #1]
 8002fa0:	e00e      	b.n	8002fc0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fcc:	883a      	ldrh	r2, [r7, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	78ba      	ldrb	r2, [r7, #2]
 8002fd6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	785b      	ldrb	r3, [r3, #1]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fea:	78bb      	ldrb	r3, [r7, #2]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d102      	bne.n	8002ff6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_PCD_EP_Open+0xa6>
 8003000:	2302      	movs	r3, #2
 8003002:	e00e      	b.n	8003022 <HAL_PCD_EP_Open+0xc4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fece 	bl	8004db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003020:	7afb      	ldrb	r3, [r7, #11]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303a:	2b00      	cmp	r3, #0
 800303c:	da0e      	bge.n	800305c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	705a      	strb	r2, [r3, #1]
 800305a:	e00e      	b.n	800307a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 0207 	and.w	r2, r3, #7
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_PCD_EP_Close+0x6a>
 8003090:	2302      	movs	r3, #2
 8003092:	e00e      	b.n	80030b2 <HAL_PCD_EP_Close+0x88>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 f9f0 	bl	8005488 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	460b      	mov	r3, r1
 80030c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	f003 0207 	and.w	r2, r3, #7
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	b2da      	uxtb	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6979      	ldr	r1, [r7, #20]
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fba2 	bl	8005860 <USB_EPStartXfer>
 800311c:	e005      	b.n	800312a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6979      	ldr	r1, [r7, #20]
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fb9b 	bl	8005860 <USB_EPStartXfer>
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	460b      	mov	r3, r1
 8003142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003144:	7afb      	ldrb	r3, [r7, #11]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2201      	movs	r2, #1
 800317e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003180:	7afb      	ldrb	r3, [r7, #11]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	b2da      	uxtb	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6979      	ldr	r1, [r7, #20]
 800319c:	4618      	mov	r0, r3
 800319e:	f002 fb5f 	bl	8005860 <USB_EPStartXfer>
 80031a2:	e005      	b.n	80031b0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6979      	ldr	r1, [r7, #20]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f002 fb58 	bl	8005860 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0207 	and.w	r2, r3, #7
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d901      	bls.n	80031d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e04c      	b.n	8003272 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0e      	bge.n	80031fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00c      	b.n	8003218 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	b2da      	uxtb	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_PCD_EP_SetStall+0x7e>
 8003234:	2302      	movs	r3, #2
 8003236:	e01c      	b.n	8003272 <HAL_PCD_EP_SetStall+0xb8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fe01 	bl	8006e4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	2b00      	cmp	r3, #0
 8003254:	d108      	bne.n	8003268 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f003 ff26 	bl	80070b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d901      	bls.n	8003298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e040      	b.n	800331a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0e      	bge.n	80032be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	705a      	strb	r2, [r3, #1]
 80032bc:	e00e      	b.n	80032dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 0207 	and.w	r2, r3, #7
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_EP_ClrStall+0x82>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e00e      	b.n	800331a <HAL_PCD_EP_ClrStall+0xa0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fdef 	bl	8006eee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08e      	sub	sp, #56	; 0x38
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800332a:	e2ec      	b.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003334:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003336:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003342:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 8161 	bne.w	800360e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800334c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d152      	bne.n	80033fc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003366:	81fb      	strh	r3, [r7, #14]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	89fb      	ldrh	r3, [r7, #14]
 800336e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003376:	b29b      	uxth	r3, r3
 8003378:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3328      	adds	r3, #40	; 0x28
 800337e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	3302      	adds	r3, #2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	441a      	add	r2, r3
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033ba:	2100      	movs	r1, #0
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f005 fac6 	bl	800894e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 829b 	beq.w	8003906 <PCD_EP_ISR_Handler+0x5e4>
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 8296 	bne.w	8003906 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b292      	uxth	r2, r2
 80033ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033fa:	e284      	b.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800340c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800340e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003412:	2b00      	cmp	r3, #0
 8003414:	d034      	beq.n	8003480 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	3306      	adds	r3, #6
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003454:	b29b      	uxth	r3, r3
 8003456:	f003 fe7c 	bl	8007152 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29a      	uxth	r2, r3
 8003462:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003466:	4013      	ands	r3, r2
 8003468:	823b      	strh	r3, [r7, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	8a3a      	ldrh	r2, [r7, #16]
 8003470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003474:	b292      	uxth	r2, r2
 8003476:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f005 fa3b 	bl	80088f4 <HAL_PCD_SetupStageCallback>
 800347e:	e242      	b.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003480:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003484:	2b00      	cmp	r3, #0
 8003486:	f280 823e 	bge.w	8003906 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29a      	uxth	r2, r3
 8003492:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003496:	4013      	ands	r3, r2
 8003498:	83bb      	strh	r3, [r7, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	8bba      	ldrh	r2, [r7, #28]
 80034a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a4:	b292      	uxth	r2, r2
 80034a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	3306      	adds	r3, #6
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d019      	beq.n	8003510 <PCD_EP_ISR_Handler+0x1ee>
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	6959      	ldr	r1, [r3, #20]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f003 fe2c 	bl	8007152 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	441a      	add	r2, r3
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f005 fa04 	bl	8008918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 81f2 	bne.w	8003906 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003530:	b29b      	uxth	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d112      	bne.n	8003570 <PCD_EP_ISR_Handler+0x24e>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003554:	b29a      	uxth	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	801a      	strh	r2, [r3, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003568:	b29a      	uxth	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	e02f      	b.n	80035d0 <PCD_EP_ISR_Handler+0x2ae>
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b3e      	cmp	r3, #62	; 0x3e
 8003576:	d813      	bhi.n	80035a0 <PCD_EP_ISR_Handler+0x27e>
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	633b      	str	r3, [r7, #48]	; 0x30
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <PCD_EP_ISR_Handler+0x270>
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	3301      	adds	r3, #1
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	b29b      	uxth	r3, r3
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	b29a      	uxth	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	e017      	b.n	80035d0 <PCD_EP_ISR_Handler+0x2ae>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <PCD_EP_ISR_Handler+0x298>
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	3b01      	subs	r3, #1
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	b29b      	uxth	r3, r3
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	827b      	strh	r3, [r7, #18]
 80035e2:	8a7b      	ldrh	r3, [r7, #18]
 80035e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035e8:	827b      	strh	r3, [r7, #18]
 80035ea:	8a7b      	ldrh	r3, [r7, #18]
 80035ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035f0:	827b      	strh	r3, [r7, #18]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	8a7b      	ldrh	r3, [r7, #18]
 80035f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]
 800360c:	e17b      	b.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003620:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003624:	2b00      	cmp	r3, #0
 8003626:	f280 80ea 	bge.w	80037fe <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29a      	uxth	r2, r3
 800363c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003640:	4013      	ands	r3, r2
 8003642:	853b      	strh	r3, [r7, #40]	; 0x28
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003658:	b292      	uxth	r2, r2
 800365a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800365c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	4413      	add	r3, r2
 8003670:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	7b1b      	ldrb	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d122      	bne.n	80036c0 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	3306      	adds	r3, #6
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80036a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8087 	beq.w	80037ba <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	6959      	ldr	r1, [r3, #20]
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	88da      	ldrh	r2, [r3, #6]
 80036b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ba:	f003 fd4a 	bl	8007152 <USB_ReadPMA>
 80036be:	e07c      	b.n	80037ba <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	78db      	ldrb	r3, [r3, #3]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d108      	bne.n	80036da <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80036c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ca:	461a      	mov	r2, r3
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f927 	bl	8003922 <HAL_PCD_EP_DB_Receive>
 80036d4:	4603      	mov	r3, r0
 80036d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036d8:	e06f      	b.n	80037ba <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	847b      	strh	r3, [r7, #34]	; 0x22
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	441a      	add	r2, r3
 8003704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003716:	b29b      	uxth	r3, r3
 8003718:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d021      	beq.n	8003778 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	3302      	adds	r3, #2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800375e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02a      	beq.n	80037ba <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	6959      	ldr	r1, [r3, #20]
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	891a      	ldrh	r2, [r3, #8]
 8003770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003772:	f003 fcee 	bl	8007152 <USB_ReadPMA>
 8003776:	e020      	b.n	80037ba <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	3306      	adds	r3, #6
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037a0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	6959      	ldr	r1, [r3, #20]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	895a      	ldrh	r2, [r3, #10]
 80037b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037b6:	f003 fccc 	bl	8007152 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037c0:	441a      	add	r2, r3
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037cc:	441a      	add	r2, r3
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <PCD_EP_ISR_Handler+0x4c2>
 80037da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d206      	bcs.n	80037f2 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 f894 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 80037f0:	e005      	b.n	80037fe <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 f831 	bl	8005860 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d07e      	beq.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003808:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	843b      	strh	r3, [r7, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	441a      	add	r2, r3
 8003846:	8c3b      	ldrh	r3, [r7, #32]
 8003848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800384c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003850:	b29b      	uxth	r3, r3
 8003852:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	78db      	ldrb	r3, [r3, #3]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d00c      	beq.n	8003876 <PCD_EP_ISR_Handler+0x554>
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	78db      	ldrb	r3, [r3, #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003868:	2b02      	cmp	r3, #2
 800386a:	d146      	bne.n	80038fa <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800386c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d141      	bne.n	80038fa <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	3302      	adds	r3, #2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	8bfb      	ldrh	r3, [r7, #30]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d906      	bls.n	80038b8 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	8bfb      	ldrh	r3, [r7, #30]
 80038b0:	1ad2      	subs	r2, r2, r3
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	619a      	str	r2, [r3, #24]
 80038b6:	e002      	b.n	80038be <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f005 f83e 	bl	800894e <HAL_PCD_DataInStageCallback>
 80038d2:	e018      	b.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	8bfb      	ldrh	r3, [r7, #30]
 80038da:	441a      	add	r2, r3
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	8bfb      	ldrh	r3, [r7, #30]
 80038e6:	441a      	add	r2, r3
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 ffb4 	bl	8005860 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80038f8:	e005      	b.n	8003906 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80038fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038fc:	461a      	mov	r2, r3
 80038fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f91b 	bl	8003b3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800390e:	b29b      	uxth	r3, r3
 8003910:	b21b      	sxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f6ff ad0a 	blt.w	800332c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3738      	adds	r7, #56	; 0x38
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b088      	sub	sp, #32
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d07e      	beq.n	8003a38 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	3302      	adds	r3, #2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003962:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	8b7b      	ldrh	r3, [r7, #26]
 800396a:	429a      	cmp	r2, r3
 800396c:	d306      	bcc.n	800397c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	8b7b      	ldrh	r3, [r7, #26]
 8003974:	1ad2      	subs	r2, r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	619a      	str	r2, [r3, #24]
 800397a:	e002      	b.n	8003982 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d123      	bne.n	80039d2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	833b      	strh	r3, [r7, #24]
 80039a6:	8b3b      	ldrh	r3, [r7, #24]
 80039a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039ac:	833b      	strh	r3, [r7, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	8b3b      	ldrh	r3, [r7, #24]
 80039be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01f      	beq.n	8003a1c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	82fb      	strh	r3, [r7, #22]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	441a      	add	r2, r3
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a1c:	8b7b      	ldrh	r3, [r7, #26]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8087 	beq.w	8003b32 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6959      	ldr	r1, [r3, #20]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	891a      	ldrh	r2, [r3, #8]
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	f003 fb8e 	bl	8007152 <USB_ReadPMA>
 8003a36:	e07c      	b.n	8003b32 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3306      	adds	r3, #6
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a60:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	8b7b      	ldrh	r3, [r7, #26]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d306      	bcc.n	8003a7a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	8b7b      	ldrh	r3, [r7, #26]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	619a      	str	r2, [r3, #24]
 8003a78:	e002      	b.n	8003a80 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d123      	bne.n	8003ad0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	83fb      	strh	r3, [r7, #30]
 8003aa4:	8bfb      	ldrh	r3, [r7, #30]
 8003aa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003aaa:	83fb      	strh	r3, [r7, #30]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	441a      	add	r2, r3
 8003aba:	8bfb      	ldrh	r3, [r7, #30]
 8003abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11f      	bne.n	8003b1a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af4:	83bb      	strh	r3, [r7, #28]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	8bbb      	ldrh	r3, [r7, #28]
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b1a:	8b7b      	ldrh	r3, [r7, #26]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6959      	ldr	r1, [r3, #20]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	895a      	ldrh	r2, [r3, #10]
 8003b2c:	8b7b      	ldrh	r3, [r7, #26]
 8003b2e:	f003 fb10 	bl	8007152 <USB_ReadPMA>
    }
  }

  return count;
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b0a2      	sub	sp, #136	; 0x88
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 81c7 	beq.w	8003ee4 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d907      	bls.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003b96:	1ad2      	subs	r2, r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	619a      	str	r2, [r3, #24]
 8003b9c:	e002      	b.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 80b9 	bne.w	8003d20 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d126      	bne.n	8003c04 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	4413      	add	r3, r2
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	011a      	lsls	r2, r3, #4
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	801a      	strh	r2, [r3, #0]
 8003c02:	e01a      	b.n	8003c3a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d116      	bne.n	8003c3a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	4413      	add	r3, r2
 8003c22:	633b      	str	r3, [r7, #48]	; 0x30
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	011a      	lsls	r2, r3, #4
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2200      	movs	r2, #0
 8003c38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d126      	bne.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	011a      	lsls	r2, r3, #4
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	801a      	strh	r2, [r3, #0]
 8003c94:	e017      	b.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d113      	bne.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	4413      	add	r3, r2
 8003cae:	623b      	str	r3, [r7, #32]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	011a      	lsls	r2, r3, #4
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f004 fe3e 	bl	800894e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 82d1 	beq.w	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	827b      	strh	r3, [r7, #18]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	8a7b      	ldrh	r3, [r7, #18]
 8003d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	8013      	strh	r3, [r2, #0]
 8003d1e:	e2af      	b.n	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d021      	beq.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	441a      	add	r2, r3
 8003d56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 8283 	bne.w	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d82:	441a      	add	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d90:	441a      	add	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d309      	bcc.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dae:	1ad2      	subs	r2, r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	621a      	str	r2, [r3, #32]
 8003db4:	e015      	b.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003dbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003dc2:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dcc:	e009      	b.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2200      	movs	r2, #0
 8003de0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d155      	bne.n	8003e96 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	4413      	add	r3, r2
 8003e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	011a      	lsls	r2, r3, #4
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
 8003e12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d112      	bne.n	8003e3e <HAL_PCD_EP_DB_Transmit+0x302>
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e047      	b.n	8003ece <HAL_PCD_EP_DB_Transmit+0x392>
 8003e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e40:	2b3e      	cmp	r3, #62	; 0x3e
 8003e42:	d811      	bhi.n	8003e68 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
 8003e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_PCD_EP_DB_Transmit+0x31e>
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	3301      	adds	r3, #1
 8003e58:	653b      	str	r3, [r7, #80]	; 0x50
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	029b      	lsls	r3, r3, #10
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	e032      	b.n	8003ece <HAL_PCD_EP_DB_Transmit+0x392>
 8003e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_PCD_EP_DB_Transmit+0x342>
 8003e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	e01b      	b.n	8003ece <HAL_PCD_EP_DB_Transmit+0x392>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	785b      	ldrb	r3, [r3, #1]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d117      	bne.n	8003ece <HAL_PCD_EP_DB_Transmit+0x392>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb2:	4413      	add	r3, r2
 8003eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	011a      	lsls	r2, r3, #4
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6959      	ldr	r1, [r3, #20]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	891a      	ldrh	r2, [r3, #8]
 8003eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f003 f8f4 	bl	80070ca <USB_WritePMA>
 8003ee2:	e1cd      	b.n	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3306      	adds	r3, #6
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d307      	bcc.n	8003f2c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003f24:	1ad2      	subs	r2, r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	619a      	str	r2, [r3, #24]
 8003f2a:	e002      	b.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 80c1 	bne.w	80040be <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d126      	bne.n	8003f92 <HAL_PCD_EP_DB_Transmit+0x456>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f58:	4413      	add	r3, r2
 8003f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	011a      	lsls	r2, r3, #4
 8003f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f64:	4413      	add	r3, r2
 8003f66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	e01a      	b.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d116      	bne.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fae:	4413      	add	r3, r2
 8003fb0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	011a      	lsls	r2, r3, #4
 8003fb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fba:	4413      	add	r3, r2
 8003fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d126      	bne.n	8004026 <HAL_PCD_EP_DB_Transmit+0x4ea>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fec:	4413      	add	r3, r2
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	011a      	lsls	r2, r3, #4
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800400a:	b29a      	uxth	r2, r3
 800400c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401e:	b29a      	uxth	r2, r3
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	e01c      	b.n	8004060 <HAL_PCD_EP_DB_Transmit+0x524>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d118      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x524>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800403e:	4413      	add	r3, r2
 8004040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	011a      	lsls	r2, r3, #4
 800404a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800404e:	4413      	add	r3, r2
 8004050:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800405c:	2200      	movs	r2, #0
 800405e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4619      	mov	r1, r3
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f004 fc71 	bl	800894e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 8104 	bne.w	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]
 80040bc:	e0e0      	b.n	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d121      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 80b4 	bne.w	8004280 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004120:	441a      	add	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800412e:	441a      	add	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d309      	bcc.n	8004154 <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800414c:	1ad2      	subs	r2, r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	621a      	str	r2, [r3, #32]
 8004152:	e015      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 800415c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004160:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800416a:	e009      	b.n	8004180 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	667b      	str	r3, [r7, #100]	; 0x64
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d155      	bne.n	800423a <HAL_PCD_EP_DB_Transmit+0x6fe>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419c:	b29b      	uxth	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a2:	4413      	add	r3, r2
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ae:	4413      	add	r3, r2
 80041b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80041b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d112      	bne.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x6a6>
 80041bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	e044      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x730>
 80041e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e4:	2b3e      	cmp	r3, #62	; 0x3e
 80041e6:	d811      	bhi.n	800420c <HAL_PCD_EP_DB_Transmit+0x6d0>
 80041e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	677b      	str	r3, [r7, #116]	; 0x74
 80041ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_PCD_EP_DB_Transmit+0x6c2>
 80041f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fa:	3301      	adds	r3, #1
 80041fc:	677b      	str	r3, [r7, #116]	; 0x74
 80041fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004200:	b29b      	uxth	r3, r3
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	b29a      	uxth	r2, r3
 8004206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	e02f      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x730>
 800420c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	677b      	str	r3, [r7, #116]	; 0x74
 8004212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <HAL_PCD_EP_DB_Transmit+0x6e6>
 800421c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421e:	3b01      	subs	r3, #1
 8004220:	677b      	str	r3, [r7, #116]	; 0x74
 8004222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004224:	b29b      	uxth	r3, r3
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	b29b      	uxth	r3, r3
 800422a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004232:	b29a      	uxth	r2, r3
 8004234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	e018      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x730>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d114      	bne.n	800426c <HAL_PCD_EP_DB_Transmit+0x730>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004250:	4413      	add	r3, r2
 8004252:	667b      	str	r3, [r7, #100]	; 0x64
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	011a      	lsls	r2, r3, #4
 800425a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800425c:	4413      	add	r3, r2
 800425e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004262:	663b      	str	r3, [r7, #96]	; 0x60
 8004264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004266:	b29a      	uxth	r2, r3
 8004268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800426a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6959      	ldr	r1, [r3, #20]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	895a      	ldrh	r2, [r3, #10]
 8004278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800427a:	b29b      	uxth	r3, r3
 800427c:	f002 ff25 	bl	80070ca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429a:	823b      	strh	r3, [r7, #16]
 800429c:	8a3b      	ldrh	r3, [r7, #16]
 800429e:	f083 0310 	eor.w	r3, r3, #16
 80042a2:	823b      	strh	r3, [r7, #16]
 80042a4:	8a3b      	ldrh	r3, [r7, #16]
 80042a6:	f083 0320 	eor.w	r3, r3, #32
 80042aa:	823b      	strh	r3, [r7, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	8a3b      	ldrh	r3, [r7, #16]
 80042bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3788      	adds	r7, #136	; 0x88
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042da:	b480      	push	{r7}
 80042dc:	b087      	sub	sp, #28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	817b      	strh	r3, [r7, #10]
 80042e8:	4613      	mov	r3, r2
 80042ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042ec:	897b      	ldrh	r3, [r7, #10]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f8:	897b      	ldrh	r3, [r7, #10]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e009      	b.n	8004324 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004310:	897a      	ldrh	r2, [r7, #10]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004324:	893b      	ldrh	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	b29a      	uxth	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	80da      	strh	r2, [r3, #6]
 8004338:	e00b      	b.n	8004352 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2201      	movs	r2, #1
 800433e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	b29a      	uxth	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	b29a      	uxth	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
	...

08004360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e26c      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8087 	beq.w	800448e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004380:	4b92      	ldr	r3, [pc, #584]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b04      	cmp	r3, #4
 800438a:	d00c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800438c:	4b8f      	ldr	r3, [pc, #572]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d112      	bne.n	80043be <HAL_RCC_OscConfig+0x5e>
 8004398:	4b8c      	ldr	r3, [pc, #560]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d10b      	bne.n	80043be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a6:	4b89      	ldr	r3, [pc, #548]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d06c      	beq.n	800448c <HAL_RCC_OscConfig+0x12c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d168      	bne.n	800448c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e246      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x76>
 80043c8:	4b80      	ldr	r3, [pc, #512]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a7f      	ldr	r2, [pc, #508]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e02e      	b.n	8004434 <HAL_RCC_OscConfig+0xd4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x98>
 80043de:	4b7b      	ldr	r3, [pc, #492]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7a      	ldr	r2, [pc, #488]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b78      	ldr	r3, [pc, #480]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a77      	ldr	r2, [pc, #476]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80043f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xd4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0xbc>
 8004402:	4b72      	ldr	r3, [pc, #456]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a71      	ldr	r2, [pc, #452]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xd4>
 800441c:	4b6b      	ldr	r3, [pc, #428]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6a      	ldr	r2, [pc, #424]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a67      	ldr	r2, [pc, #412]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd f810 	bl	8001460 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fd f80c 	bl	8001460 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1fa      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xe4>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fc fffc 	bl	8001460 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fc fff8 	bl	8001460 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1e6      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x10c>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800449a:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x18c>
 80044b2:	4b46      	ldr	r3, [pc, #280]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b43      	ldr	r3, [pc, #268]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x176>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1ba      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4939      	ldr	r1, [pc, #228]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fc ffb1 	bl	8001460 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004502:	f7fc ffad 	bl	8001460 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e19b      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4927      	ldr	r1, [pc, #156]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fc ff90 	bl	8001460 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004544:	f7fc ff8c 	bl	8001460 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e17a      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03a      	beq.n	80045e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d019      	beq.n	80045aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <HAL_RCC_OscConfig+0x274>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457c:	f7fc ff70 	bl	8001460 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fc ff6c 	bl	8001460 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e15a      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_RCC_OscConfig+0x26c>)
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045a2:	2001      	movs	r0, #1
 80045a4:	f000 fac6 	bl	8004b34 <RCC_Delay>
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <HAL_RCC_OscConfig+0x274>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b0:	f7fc ff56 	bl	8001460 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b6:	e00f      	b.n	80045d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fc ff52 	bl	8001460 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d908      	bls.n	80045d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e140      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	42420000 	.word	0x42420000
 80045d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	4b9e      	ldr	r3, [pc, #632]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e9      	bne.n	80045b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a6 	beq.w	800473e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b97      	ldr	r3, [pc, #604]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10d      	bne.n	800461e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b94      	ldr	r3, [pc, #592]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4a93      	ldr	r2, [pc, #588]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	61d3      	str	r3, [r2, #28]
 800460e:	4b91      	ldr	r3, [pc, #580]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b8e      	ldr	r3, [pc, #568]	; (8004858 <HAL_RCC_OscConfig+0x4f8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b8b      	ldr	r3, [pc, #556]	; (8004858 <HAL_RCC_OscConfig+0x4f8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a8a      	ldr	r2, [pc, #552]	; (8004858 <HAL_RCC_OscConfig+0x4f8>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fc ff13 	bl	8001460 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7fc ff0f 	bl	8001460 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b64      	cmp	r3, #100	; 0x64
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0fd      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_OscConfig+0x4f8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d106      	bne.n	8004672 <HAL_RCC_OscConfig+0x312>
 8004664:	4b7b      	ldr	r3, [pc, #492]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6213      	str	r3, [r2, #32]
 8004670:	e02d      	b.n	80046ce <HAL_RCC_OscConfig+0x36e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x334>
 800467a:	4b76      	ldr	r3, [pc, #472]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4a75      	ldr	r2, [pc, #468]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	6213      	str	r3, [r2, #32]
 8004686:	4b73      	ldr	r3, [pc, #460]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4a72      	ldr	r2, [pc, #456]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800468c:	f023 0304 	bic.w	r3, r3, #4
 8004690:	6213      	str	r3, [r2, #32]
 8004692:	e01c      	b.n	80046ce <HAL_RCC_OscConfig+0x36e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x356>
 800469c:	4b6d      	ldr	r3, [pc, #436]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a6c      	ldr	r2, [pc, #432]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046a2:	f043 0304 	orr.w	r3, r3, #4
 80046a6:	6213      	str	r3, [r2, #32]
 80046a8:	4b6a      	ldr	r3, [pc, #424]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	4a69      	ldr	r2, [pc, #420]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6213      	str	r3, [r2, #32]
 80046b4:	e00b      	b.n	80046ce <HAL_RCC_OscConfig+0x36e>
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4a66      	ldr	r2, [pc, #408]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6213      	str	r3, [r2, #32]
 80046c2:	4b64      	ldr	r3, [pc, #400]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4a63      	ldr	r2, [pc, #396]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d015      	beq.n	8004702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fc fec3 	bl	8001460 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fc febf 	bl	8001460 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0ab      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	4b57      	ldr	r3, [pc, #348]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ee      	beq.n	80046de <HAL_RCC_OscConfig+0x37e>
 8004700:	e014      	b.n	800472c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004702:	f7fc fead 	bl	8001460 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fc fea9 	bl	8001460 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e095      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004720:	4b4c      	ldr	r3, [pc, #304]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ee      	bne.n	800470a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4b48      	ldr	r3, [pc, #288]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4a47      	ldr	r2, [pc, #284]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8081 	beq.w	800484a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004748:	4b42      	ldr	r3, [pc, #264]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b08      	cmp	r3, #8
 8004752:	d061      	beq.n	8004818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d146      	bne.n	80047ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCC_OscConfig+0x4fc>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc fe7d 	bl	8001460 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7fc fe79 	bl	8001460 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e067      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477c:	4b35      	ldr	r3, [pc, #212]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004792:	4b30      	ldr	r3, [pc, #192]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	492d      	ldr	r1, [pc, #180]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a4:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a19      	ldr	r1, [r3, #32]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	430b      	orrs	r3, r1
 80047b6:	4927      	ldr	r1, [pc, #156]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b27      	ldr	r3, [pc, #156]	; (800485c <HAL_RCC_OscConfig+0x4fc>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fc fe4d 	bl	8001460 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fc fe49 	bl	8001460 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e037      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x46a>
 80047e8:	e02f      	b.n	800484a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b1c      	ldr	r3, [pc, #112]	; (800485c <HAL_RCC_OscConfig+0x4fc>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fc fe36 	bl	8001460 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fc fe32 	bl	8001460 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e020      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x498>
 8004816:	e018      	b.n	800484a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e013      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_OscConfig+0x4f4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	429a      	cmp	r2, r3
 8004836:	d106      	bne.n	8004846 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d001      	beq.n	800484a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	40007000 	.word	0x40007000
 800485c:	42420060 	.word	0x42420060

08004860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0d0      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004874:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d910      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b67      	ldr	r3, [pc, #412]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 0207 	bic.w	r2, r3, #7
 800488a:	4965      	ldr	r1, [pc, #404]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0b8      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a58      	ldr	r2, [pc, #352]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e0:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	494d      	ldr	r1, [pc, #308]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d040      	beq.n	8004980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d115      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e07f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e073      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06b      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4936      	ldr	r1, [pc, #216]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	4313      	orrs	r3, r2
 800494e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004950:	f7fc fd86 	bl	8001460 <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fc fd82 	bl	8001460 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e053      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004980:	4b27      	ldr	r3, [pc, #156]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d210      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4922      	ldr	r1, [pc, #136]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e032      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4916      	ldr	r1, [pc, #88]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	490e      	ldr	r1, [pc, #56]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ee:	f000 f821 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 80049f2:	4601      	mov	r1, r0
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a00:	5cd3      	ldrb	r3, [r2, r3]
 8004a02:	fa21 f303 	lsr.w	r3, r1, r3
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1cc>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1d0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc fce4 	bl	80013dc <HAL_InitTick>

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40021000 	.word	0x40021000
 8004a28:	08008e80 	.word	0x08008e80
 8004a2c:	20000024 	.word	0x20000024
 8004a30:	20000028 	.word	0x20000028

08004a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a34:	b490      	push	{r4, r7}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a3c:	1d3c      	adds	r4, r7, #4
 8004a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a5e:	4b23      	ldr	r3, [pc, #140]	; (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x40>
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0x46>
 8004a72:	e02d      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a76:	623b      	str	r3, [r7, #32]
      break;
 8004a78:	e02d      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	0c9b      	lsrs	r3, r3, #18
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a86:	4413      	add	r3, r2
 8004a88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0c5b      	lsrs	r3, r3, #17
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ab2:	fb02 f203 	mul.w	r2, r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
 8004abe:	e004      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	623b      	str	r3, [r7, #32]
      break;
 8004ace:	e002      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ad2:	623b      	str	r3, [r7, #32]
      break;
 8004ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc90      	pop	{r4, r7}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	08008e24 	.word	0x08008e24
 8004ae8:	08008e34 	.word	0x08008e34
 8004aec:	40021000 	.word	0x40021000
 8004af0:	007a1200 	.word	0x007a1200
 8004af4:	003d0900 	.word	0x003d0900

08004af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004afc:	4b02      	ldr	r3, [pc, #8]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	20000024 	.word	0x20000024

08004b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b10:	f7ff fff2 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b14:	4601      	mov	r1, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	08008e90 	.word	0x08008e90

08004b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <RCC_Delay+0x34>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <RCC_Delay+0x38>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0a5b      	lsrs	r3, r3, #9
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b50:	bf00      	nop
  }
  while (Delay --);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	60fa      	str	r2, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f9      	bne.n	8004b50 <RCC_Delay+0x1c>
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000024 	.word	0x20000024
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d07d      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b90:	4b4f      	ldr	r3, [pc, #316]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	4a4b      	ldr	r2, [pc, #300]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	61d3      	str	r3, [r2, #28]
 8004ba8:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d118      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc4:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a42      	ldr	r2, [pc, #264]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd0:	f7fc fc46 	bl	8001460 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd6:	e008      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd8:	f7fc fc42 	bl	8001460 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e06d      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bea:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf6:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02e      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d027      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c14:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c1e:	4b2e      	ldr	r3, [pc, #184]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c24:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c2a:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d014      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3a:	f7fc fc11 	bl	8001460 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c42:	f7fc fc0d 	bl	8001460 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e036      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ee      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4917      	ldr	r1, [pc, #92]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	490b      	ldr	r1, [pc, #44]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	42420440 	.word	0x42420440

08004cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cdc:	b084      	sub	sp, #16
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	f107 0014 	add.w	r0, r7, #20
 8004cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	b004      	add	sp, #16
 8004cfa:	4770      	bx	lr

08004cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	4013      	ands	r3, r2
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d74:	b084      	sub	sp, #16
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	f107 0014 	add.w	r0, r7, #20
 8004d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	b004      	add	sp, #16
 8004db2:	4770      	bx	lr

08004db4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b09b      	sub	sp, #108	; 0x6c
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	78db      	ldrb	r3, [r3, #3]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d81f      	bhi.n	8004e26 <USB_ActivateEndpoint+0x72>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <USB_ActivateEndpoint+0x38>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e2f 	.word	0x08004e2f
 8004df8:	08004e0b 	.word	0x08004e0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e08:	e012      	b.n	8004e30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e16:	e00b      	b.n	8004e30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e24:	e004      	b.n	8004e30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004e2c:	e000      	b.n	8004e30 <USB_ActivateEndpoint+0x7c>
      break;
 8004e2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	7b1b      	ldrb	r3, [r3, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f040 8149 	bne.w	8005134 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8084 	beq.w	8004fb4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	011a      	lsls	r2, r3, #4
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	88db      	ldrh	r3, [r3, #6]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	81fb      	strh	r3, [r7, #14]
 8004eee:	89fb      	ldrh	r3, [r7, #14]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01b      	beq.n	8004f30 <USB_ActivateEndpoint+0x17c>
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	81bb      	strh	r3, [r7, #12]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	89bb      	ldrh	r3, [r7, #12]
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d020      	beq.n	8004f7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4e:	813b      	strh	r3, [r7, #8]
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	f083 0320 	eor.w	r3, r3, #32
 8004f56:	813b      	strh	r3, [r7, #8]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	893b      	ldrh	r3, [r7, #8]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
 8004f78:	e27f      	b.n	800547a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f90:	817b      	strh	r3, [r7, #10]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	897b      	ldrh	r3, [r7, #10]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]
 8004fb2:	e262      	b.n	800547a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	4413      	add	r3, r2
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	88db      	ldrh	r3, [r3, #6]
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	4413      	add	r3, r2
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	011a      	lsls	r2, r3, #4
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	4413      	add	r3, r2
 8005006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d112      	bne.n	800503a <USB_ActivateEndpoint+0x286>
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800501e:	b29a      	uxth	r2, r3
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005032:	b29a      	uxth	r2, r3
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	e02f      	b.n	800509a <USB_ActivateEndpoint+0x2e6>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b3e      	cmp	r3, #62	; 0x3e
 8005040:	d813      	bhi.n	800506a <USB_ActivateEndpoint+0x2b6>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	085b      	lsrs	r3, r3, #1
 8005048:	663b      	str	r3, [r7, #96]	; 0x60
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <USB_ActivateEndpoint+0x2a8>
 8005056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005058:	3301      	adds	r3, #1
 800505a:	663b      	str	r3, [r7, #96]	; 0x60
 800505c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29a      	uxth	r2, r3
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e017      	b.n	800509a <USB_ActivateEndpoint+0x2e6>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	663b      	str	r3, [r7, #96]	; 0x60
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <USB_ActivateEndpoint+0x2d0>
 800507e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005080:	3b01      	subs	r3, #1
 8005082:	663b      	str	r3, [r7, #96]	; 0x60
 8005084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005086:	b29b      	uxth	r3, r3
 8005088:	029b      	lsls	r3, r3, #10
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	83fb      	strh	r3, [r7, #30]
 80050a8:	8bfb      	ldrh	r3, [r7, #30]
 80050aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01b      	beq.n	80050ea <USB_ActivateEndpoint+0x336>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	83bb      	strh	r3, [r7, #28]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	8bbb      	ldrh	r3, [r7, #28]
 80050d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	837b      	strh	r3, [r7, #26]
 8005102:	8b7b      	ldrh	r3, [r7, #26]
 8005104:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005108:	837b      	strh	r3, [r7, #26]
 800510a:	8b7b      	ldrh	r3, [r7, #26]
 800510c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005110:	837b      	strh	r3, [r7, #26]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8b7b      	ldrh	r3, [r7, #26]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
 8005132:	e1a2      	b.n	800547a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800515c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005164:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	b29b      	uxth	r3, r3
 800516e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	65bb      	str	r3, [r7, #88]	; 0x58
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005180:	4413      	add	r3, r2
 8005182:	65bb      	str	r3, [r7, #88]	; 0x58
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	011a      	lsls	r2, r3, #4
 800518a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518c:	4413      	add	r3, r2
 800518e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005192:	657b      	str	r3, [r7, #84]	; 0x54
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	891b      	ldrh	r3, [r3, #8]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	653b      	str	r3, [r7, #80]	; 0x50
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b4:	4413      	add	r3, r2
 80051b6:	653b      	str	r3, [r7, #80]	; 0x50
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	011a      	lsls	r2, r3, #4
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	895b      	ldrh	r3, [r3, #10]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	785b      	ldrb	r3, [r3, #1]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f040 8091 	bne.w	8005304 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01b      	beq.n	8005232 <USB_ActivateEndpoint+0x47e>
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005240:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01b      	beq.n	8005282 <USB_ActivateEndpoint+0x4ce>
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800526e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800527e:	b29b      	uxth	r3, r3
 8005280:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005298:	86bb      	strh	r3, [r7, #52]	; 0x34
 800529a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800529c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	b29b      	uxth	r3, r3
 8005300:	8013      	strh	r3, [r2, #0]
 8005302:	e0ba      	b.n	800547a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005314:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01d      	beq.n	800535c <USB_ActivateEndpoint+0x5a8>
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005358:	b29b      	uxth	r3, r3
 800535a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800536c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01d      	beq.n	80053b4 <USB_ActivateEndpoint+0x600>
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	78db      	ldrb	r3, [r3, #3]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d024      	beq.n	8005406 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053da:	f083 0320 	eor.w	r3, r3, #32
 80053de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]
 8005404:	e01d      	b.n	8005442 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005476:	b29b      	uxth	r3, r3
 8005478:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800547a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800547e:	4618      	mov	r0, r3
 8005480:	376c      	adds	r7, #108	; 0x6c
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b08d      	sub	sp, #52	; 0x34
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	7b1b      	ldrb	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 808e 	bne.w	80055b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d044      	beq.n	800552e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	81bb      	strh	r3, [r7, #12]
 80054b2:	89bb      	ldrh	r3, [r7, #12]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01b      	beq.n	80054f4 <USB_DeactivateEndpoint+0x6c>
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	817b      	strh	r3, [r7, #10]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550a:	813b      	strh	r3, [r7, #8]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	893b      	ldrh	r3, [r7, #8]
 8005518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	b29b      	uxth	r3, r3
 800552a:	8013      	strh	r3, [r2, #0]
 800552c:	e192      	b.n	8005854 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	827b      	strh	r3, [r7, #18]
 800553c:	8a7b      	ldrh	r3, [r7, #18]
 800553e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01b      	beq.n	800557e <USB_DeactivateEndpoint+0xf6>
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	823b      	strh	r3, [r7, #16]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	8a3b      	ldrh	r3, [r7, #16]
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	81fb      	strh	r3, [r7, #14]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
 80055b6:	e14d      	b.n	8005854 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f040 80a5 	bne.w	800570c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	843b      	strh	r3, [r7, #32]
 80055d0:	8c3b      	ldrh	r3, [r7, #32]
 80055d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01b      	beq.n	8005612 <USB_DeactivateEndpoint+0x18a>
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f0:	83fb      	strh	r3, [r7, #30]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8bfb      	ldrh	r3, [r7, #30]
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	83bb      	strh	r3, [r7, #28]
 8005620:	8bbb      	ldrh	r3, [r7, #28]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01b      	beq.n	8005662 <USB_DeactivateEndpoint+0x1da>
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	837b      	strh	r3, [r7, #26]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	8b7b      	ldrh	r3, [r7, #26]
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	833b      	strh	r3, [r7, #24]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	8b3b      	ldrh	r3, [r7, #24]
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	82fb      	strh	r3, [r7, #22]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	441a      	add	r2, r3
 80056bc:	8afb      	ldrh	r3, [r7, #22]
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e8:	82bb      	strh	r3, [r7, #20]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	441a      	add	r2, r3
 80056f4:	8abb      	ldrh	r3, [r7, #20]
 80056f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005706:	b29b      	uxth	r3, r3
 8005708:	8013      	strh	r3, [r2, #0]
 800570a:	e0a3      	b.n	8005854 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800571a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800571c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01b      	beq.n	800575c <USB_DeactivateEndpoint+0x2d4>
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	857b      	strh	r3, [r7, #42]	; 0x2a
 800576a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01b      	beq.n	80057ac <USB_DeactivateEndpoint+0x324>
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	853b      	strh	r3, [r7, #40]	; 0x28
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	847b      	strh	r3, [r7, #34]	; 0x22
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005850:	b29b      	uxth	r3, r3
 8005852:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3734      	adds	r7, #52	; 0x34
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b0cc      	sub	sp, #304	; 0x130
 8005864:	af00      	add	r7, sp, #0
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	463b      	mov	r3, r7
 800586c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	f040 872e 	bne.w	80066d6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	429a      	cmp	r2, r3
 8005888:	d905      	bls.n	8005896 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005894:	e004      	b.n	80058a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	7b1b      	ldrb	r3, [r3, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d134      	bne.n	8005914 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058aa:	463b      	mov	r3, r7
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6959      	ldr	r1, [r3, #20]
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	88da      	ldrh	r2, [r3, #6]
 80058b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	1d38      	adds	r0, r7, #4
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	f001 fc03 	bl	80070ca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058c4:	f107 0310 	add.w	r3, r7, #16
 80058c8:	1d3a      	adds	r2, r7, #4
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	f107 0310 	add.w	r3, r7, #16
 80058de:	f107 0210 	add.w	r2, r7, #16
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	440a      	add	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	463b      	mov	r3, r7
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	011a      	lsls	r2, r3, #4
 80058f0:	f107 0310 	add.w	r3, r7, #16
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4413      	add	r3, r2
 80058f8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058fc:	f107 030c 	add.w	r3, r7, #12
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005906:	b29a      	uxth	r2, r3
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	f000 beac 	b.w	800666c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b02      	cmp	r3, #2
 800591c:	f040 838c 	bne.w	8006038 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	463b      	mov	r3, r7
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	f240 8330 	bls.w	8005f92 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005932:	1d3b      	adds	r3, r7, #4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800596e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005972:	b29b      	uxth	r3, r3
 8005974:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	463b      	mov	r3, r7
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 819e 	beq.w	8005ce0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059a8:	1d3a      	adds	r2, r7, #4
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d17a      	bne.n	8005aae <USB_EPStartXfer+0x24e>
 80059b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059bc:	1d3a      	adds	r2, r7, #4
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	440a      	add	r2, r1
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	463b      	mov	r3, r7
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	011a      	lsls	r2, r3, #4
 80059e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d11a      	bne.n	8005a34 <USB_EPStartXfer+0x1d4>
 80059fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	801a      	strh	r2, [r3, #0]
 8005a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e062      	b.n	8005afa <USB_EPStartXfer+0x29a>
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	2b3e      	cmp	r3, #62	; 0x3e
 8005a3a:	d819      	bhi.n	8005a70 <USB_EPStartXfer+0x210>
 8005a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <USB_EPStartXfer+0x1fc>
 8005a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a56:	3301      	adds	r3, #1
 8005a58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e044      	b.n	8005afa <USB_EPStartXfer+0x29a>
 8005a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <USB_EPStartXfer+0x230>
 8005a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e025      	b.n	8005afa <USB_EPStartXfer+0x29a>
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d120      	bne.n	8005afa <USB_EPStartXfer+0x29a>
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ac8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	440a      	add	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	011a      	lsls	r2, r3, #4
 8005ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005afa:	463b      	mov	r3, r7
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	895b      	ldrh	r3, [r3, #10]
 8005b00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6959      	ldr	r1, [r3, #20]
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b14:	1d38      	adds	r0, r7, #4
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	f001 fad7 	bl	80070ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695a      	ldr	r2, [r3, #20]
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	441a      	add	r2, r3
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b2e:	463b      	mov	r3, r7
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	463b      	mov	r3, r7
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d909      	bls.n	8005b52 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	621a      	str	r2, [r3, #32]
 8005b50:	e008      	b.n	8005b64 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2200      	movs	r2, #0
 8005b62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d17a      	bne.n	8005c64 <USB_EPStartXfer+0x404>
 8005b6e:	f107 0318 	add.w	r3, r7, #24
 8005b72:	1d3a      	adds	r2, r7, #4
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	1d3b      	adds	r3, r7, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	f107 0318 	add.w	r3, r7, #24
 8005b88:	f107 0218 	add.w	r2, r7, #24
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	440a      	add	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	f107 0318 	add.w	r3, r7, #24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ba6:	f107 0314 	add.w	r3, r7, #20
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11a      	bne.n	8005bea <USB_EPStartXfer+0x38a>
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	f107 0314 	add.w	r3, r7, #20
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f107 0314 	add.w	r3, r7, #20
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	801a      	strh	r2, [r3, #0]
 8005be8:	e067      	b.n	8005cba <USB_EPStartXfer+0x45a>
 8005bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bee:	2b3e      	cmp	r3, #62	; 0x3e
 8005bf0:	d819      	bhi.n	8005c26 <USB_EPStartXfer+0x3c6>
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <USB_EPStartXfer+0x3b2>
 8005c08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	029b      	lsls	r3, r3, #10
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	f107 0314 	add.w	r3, r7, #20
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e049      	b.n	8005cba <USB_EPStartXfer+0x45a>
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <USB_EPStartXfer+0x3e6>
 8005c3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c40:	3b01      	subs	r3, #1
 8005c42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f107 0314 	add.w	r3, r7, #20
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e02a      	b.n	8005cba <USB_EPStartXfer+0x45a>
 8005c64:	463b      	mov	r3, r7
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d125      	bne.n	8005cba <USB_EPStartXfer+0x45a>
 8005c6e:	f107 0320 	add.w	r3, r7, #32
 8005c72:	1d3a      	adds	r2, r7, #4
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4619      	mov	r1, r3
 8005c84:	f107 0320 	add.w	r3, r7, #32
 8005c88:	f107 0220 	add.w	r2, r7, #32
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	440a      	add	r2, r1
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	f107 0320 	add.w	r3, r7, #32
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ca6:	f107 031c 	add.w	r3, r7, #28
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f107 031c 	add.w	r3, r7, #28
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	891b      	ldrh	r3, [r3, #8]
 8005cc0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6959      	ldr	r1, [r3, #20]
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cd4:	1d38      	adds	r0, r7, #4
 8005cd6:	6800      	ldr	r0, [r0, #0]
 8005cd8:	f001 f9f7 	bl	80070ca <USB_WritePMA>
 8005cdc:	f000 bcc6 	b.w	800666c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d164      	bne.n	8005db4 <USB_EPStartXfer+0x554>
 8005cea:	1d3b      	adds	r3, r7, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cf0:	1d3b      	adds	r3, r7, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfe:	4413      	add	r3, r2
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d02:	463b      	mov	r3, r7
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	011a      	lsls	r2, r3, #4
 8005d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
 8005d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d112      	bne.n	8005d42 <USB_EPStartXfer+0x4e2>
 8005d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e057      	b.n	8005df2 <USB_EPStartXfer+0x592>
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d46:	2b3e      	cmp	r3, #62	; 0x3e
 8005d48:	d817      	bhi.n	8005d7a <USB_EPStartXfer+0x51a>
 8005d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <USB_EPStartXfer+0x50a>
 8005d60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d64:	3301      	adds	r3, #1
 8005d66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	029b      	lsls	r3, r3, #10
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	e03b      	b.n	8005df2 <USB_EPStartXfer+0x592>
 8005d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <USB_EPStartXfer+0x53a>
 8005d90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d94:	3b01      	subs	r3, #1
 8005d96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e01e      	b.n	8005df2 <USB_EPStartXfer+0x592>
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d119      	bne.n	8005df2 <USB_EPStartXfer+0x592>
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd2:	4413      	add	r3, r2
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005df2:	463b      	mov	r3, r7
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	891b      	ldrh	r3, [r3, #8]
 8005df8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6959      	ldr	r1, [r3, #20]
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e0c:	1d38      	adds	r0, r7, #4
 8005e0e:	6800      	ldr	r0, [r0, #0]
 8005e10:	f001 f95b 	bl	80070ca <USB_WritePMA>
            ep->xfer_buff += len;
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695a      	ldr	r2, [r3, #20]
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1e:	441a      	add	r2, r3
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d909      	bls.n	8005e4a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	1ad2      	subs	r2, r2, r3
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	621a      	str	r2, [r3, #32]
 8005e48:	e008      	b.n	8005e5c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	643b      	str	r3, [r7, #64]	; 0x40
 8005e62:	463b      	mov	r3, r7
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d164      	bne.n	8005f36 <USB_EPStartXfer+0x6d6>
 8005e6c:	1d3b      	adds	r3, r7, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e72:	1d3b      	adds	r3, r7, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	4413      	add	r3, r2
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	011a      	lsls	r2, r3, #4
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	4413      	add	r3, r2
 8005e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
 8005e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d112      	bne.n	8005ec4 <USB_EPStartXfer+0x664>
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e054      	b.n	8005f6e <USB_EPStartXfer+0x70e>
 8005ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eca:	d817      	bhi.n	8005efc <USB_EPStartXfer+0x69c>
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <USB_EPStartXfer+0x68c>
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e038      	b.n	8005f6e <USB_EPStartXfer+0x70e>
 8005efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <USB_EPStartXfer+0x6bc>
 8005f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f16:	3b01      	subs	r3, #1
 8005f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	029b      	lsls	r3, r3, #10
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	e01b      	b.n	8005f6e <USB_EPStartXfer+0x70e>
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d116      	bne.n	8005f6e <USB_EPStartXfer+0x70e>
 8005f40:	1d3b      	adds	r3, r7, #4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4e:	4413      	add	r3, r2
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
 8005f52:	463b      	mov	r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	011a      	lsls	r2, r3, #4
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	895b      	ldrh	r3, [r3, #10]
 8005f74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6959      	ldr	r1, [r3, #20]
 8005f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f88:	1d38      	adds	r0, r7, #4
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	f001 f89d 	bl	80070ca <USB_WritePMA>
 8005f90:	e36c      	b.n	800666c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005f92:	463b      	mov	r3, r7
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005fba:	1d3b      	adds	r3, r7, #4
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fe0:	1d3b      	adds	r3, r7, #4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fe6:	1d3b      	adds	r3, r7, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff4:	4413      	add	r3, r2
 8005ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	011a      	lsls	r2, r3, #4
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	4413      	add	r3, r2
 8006004:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006008:	65bb      	str	r3, [r7, #88]	; 0x58
 800600a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600e:	b29a      	uxth	r2, r3
 8006010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006012:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006014:	463b      	mov	r3, r7
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	891b      	ldrh	r3, [r3, #8]
 800601a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800601e:	463b      	mov	r3, r7
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6959      	ldr	r1, [r3, #20]
 8006024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006028:	b29b      	uxth	r3, r3
 800602a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800602e:	1d38      	adds	r0, r7, #4
 8006030:	6800      	ldr	r0, [r0, #0]
 8006032:	f001 f84a 	bl	80070ca <USB_WritePMA>
 8006036:	e319      	b.n	800666c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006038:	1d3b      	adds	r3, r7, #4
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006070:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	b29b      	uxth	r3, r3
 800607a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6a1a      	ldr	r2, [r3, #32]
 8006082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800608e:	1d3b      	adds	r3, r7, #4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	463b      	mov	r3, r7
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8162 	beq.w	800636e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d164      	bne.n	8006186 <USB_EPStartXfer+0x926>
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80060c2:	1d3b      	adds	r3, r7, #4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060d0:	4413      	add	r3, r2
 80060d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80060d4:	463b      	mov	r3, r7
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	011a      	lsls	r2, r3, #4
 80060dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060de:	4413      	add	r3, r2
 80060e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060e4:	677b      	str	r3, [r7, #116]	; 0x74
 80060e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d112      	bne.n	8006114 <USB_EPStartXfer+0x8b4>
 80060ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610c:	b29a      	uxth	r2, r3
 800610e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e057      	b.n	80061c4 <USB_EPStartXfer+0x964>
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	2b3e      	cmp	r3, #62	; 0x3e
 800611a:	d817      	bhi.n	800614c <USB_EPStartXfer+0x8ec>
 800611c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <USB_EPStartXfer+0x8dc>
 8006132:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006136:	3301      	adds	r3, #1
 8006138:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800613c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29a      	uxth	r2, r3
 8006146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e03b      	b.n	80061c4 <USB_EPStartXfer+0x964>
 800614c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <USB_EPStartXfer+0x90c>
 8006162:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006166:	3b01      	subs	r3, #1
 8006168:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800616c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006170:	b29b      	uxth	r3, r3
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	b29b      	uxth	r3, r3
 8006176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617e:	b29a      	uxth	r2, r3
 8006180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e01e      	b.n	80061c4 <USB_EPStartXfer+0x964>
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d119      	bne.n	80061c4 <USB_EPStartXfer+0x964>
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006198:	b29b      	uxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061a0:	4413      	add	r3, r2
 80061a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	011a      	lsls	r2, r3, #4
 80061ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061c4:	463b      	mov	r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	895b      	ldrh	r3, [r3, #10]
 80061ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6959      	ldr	r1, [r3, #20]
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061de:	1d38      	adds	r0, r7, #4
 80061e0:	6800      	ldr	r0, [r0, #0]
 80061e2:	f000 ff72 	bl	80070ca <USB_WritePMA>
          ep->xfer_buff += len;
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	441a      	add	r2, r3
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	d909      	bls.n	800621c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	463b      	mov	r3, r7
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	621a      	str	r2, [r3, #32]
 800621a:	e008      	b.n	800622e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800622e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 821a 	beq.w	800666c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d164      	bne.n	800630c <USB_EPStartXfer+0xaac>
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	66bb      	str	r3, [r7, #104]	; 0x68
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006256:	4413      	add	r3, r2
 8006258:	66bb      	str	r3, [r7, #104]	; 0x68
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	011a      	lsls	r2, r3, #4
 8006262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006264:	4413      	add	r3, r2
 8006266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800626a:	667b      	str	r3, [r7, #100]	; 0x64
 800626c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d112      	bne.n	800629a <USB_EPStartXfer+0xa3a>
 8006274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800627e:	b29a      	uxth	r2, r3
 8006280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006292:	b29a      	uxth	r2, r3
 8006294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e057      	b.n	800634a <USB_EPStartXfer+0xaea>
 800629a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629e:	2b3e      	cmp	r3, #62	; 0x3e
 80062a0:	d817      	bhi.n	80062d2 <USB_EPStartXfer+0xa72>
 80062a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USB_EPStartXfer+0xa62>
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062bc:	3301      	adds	r3, #1
 80062be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	029b      	lsls	r3, r3, #10
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e03b      	b.n	800634a <USB_EPStartXfer+0xaea>
 80062d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <USB_EPStartXfer+0xa92>
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ec:	3b01      	subs	r3, #1
 80062ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	029b      	lsls	r3, r3, #10
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006304:	b29a      	uxth	r2, r3
 8006306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e01e      	b.n	800634a <USB_EPStartXfer+0xaea>
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d119      	bne.n	800634a <USB_EPStartXfer+0xaea>
 8006316:	1d3b      	adds	r3, r7, #4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	673b      	str	r3, [r7, #112]	; 0x70
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800632a:	4413      	add	r3, r2
 800632c:	673b      	str	r3, [r7, #112]	; 0x70
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	011a      	lsls	r2, r3, #4
 8006336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006338:	4413      	add	r3, r2
 800633a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800633e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006344:	b29a      	uxth	r2, r3
 8006346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800634a:	463b      	mov	r3, r7
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6959      	ldr	r1, [r3, #20]
 800635a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635e:	b29b      	uxth	r3, r3
 8006360:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006364:	1d38      	adds	r0, r7, #4
 8006366:	6800      	ldr	r0, [r0, #0]
 8006368:	f000 feaf 	bl	80070ca <USB_WritePMA>
 800636c:	e17e      	b.n	800666c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800636e:	463b      	mov	r3, r7
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d16f      	bne.n	8006458 <USB_EPStartXfer+0xbf8>
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006380:	1d3b      	adds	r3, r7, #4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006388:	b29b      	uxth	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006390:	4413      	add	r3, r2
 8006392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006396:	463b      	mov	r3, r7
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	011a      	lsls	r2, r3, #4
 800639e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a2:	4413      	add	r3, r2
 80063a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d116      	bne.n	80063e2 <USB_EPStartXfer+0xb82>
 80063b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e05f      	b.n	80064a2 <USB_EPStartXfer+0xc42>
 80063e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e6:	2b3e      	cmp	r3, #62	; 0x3e
 80063e8:	d818      	bhi.n	800641c <USB_EPStartXfer+0xbbc>
 80063ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80063f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <USB_EPStartXfer+0xbaa>
 8006400:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006404:	3301      	adds	r3, #1
 8006406:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800640a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800640e:	b29b      	uxth	r3, r3
 8006410:	029b      	lsls	r3, r3, #10
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e042      	b.n	80064a2 <USB_EPStartXfer+0xc42>
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <USB_EPStartXfer+0xbdc>
 8006432:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006436:	3b01      	subs	r3, #1
 8006438:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800643c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006440:	b29b      	uxth	r3, r3
 8006442:	029b      	lsls	r3, r3, #10
 8006444:	b29b      	uxth	r3, r3
 8006446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644e:	b29a      	uxth	r2, r3
 8006450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	e024      	b.n	80064a2 <USB_EPStartXfer+0xc42>
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d11f      	bne.n	80064a2 <USB_EPStartXfer+0xc42>
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800647a:	4413      	add	r3, r2
 800647c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800648c:	4413      	add	r3, r2
 800648e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649a:	b29a      	uxth	r2, r3
 800649c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	891b      	ldrh	r3, [r3, #8]
 80064a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064ac:	463b      	mov	r3, r7
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6959      	ldr	r1, [r3, #20]
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064bc:	1d38      	adds	r0, r7, #4
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	f000 fe03 	bl	80070ca <USB_WritePMA>
          ep->xfer_buff += len;
 80064c4:	463b      	mov	r3, r7
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ce:	441a      	add	r2, r3
 80064d0:	463b      	mov	r3, r7
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d909      	bls.n	80064fa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80064e6:	463b      	mov	r3, r7
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	621a      	str	r2, [r3, #32]
 80064f8:	e008      	b.n	800650c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80064fa:	463b      	mov	r3, r7
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80ab 	beq.w	800666c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	785b      	ldrb	r3, [r3, #1]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d16f      	bne.n	8006608 <USB_EPStartXfer+0xda8>
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006540:	4413      	add	r3, r2
 8006542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006552:	4413      	add	r3, r2
 8006554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800655c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d116      	bne.n	8006592 <USB_EPStartXfer+0xd32>
 8006564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e05b      	b.n	800664a <USB_EPStartXfer+0xdea>
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	2b3e      	cmp	r3, #62	; 0x3e
 8006598:	d818      	bhi.n	80065cc <USB_EPStartXfer+0xd6c>
 800659a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <USB_EPStartXfer+0xd5a>
 80065b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b4:	3301      	adds	r3, #1
 80065b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065be:	b29b      	uxth	r3, r3
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e03e      	b.n	800664a <USB_EPStartXfer+0xdea>
 80065cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065da:	f003 031f 	and.w	r3, r3, #31
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <USB_EPStartXfer+0xd8c>
 80065e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006604:	801a      	strh	r2, [r3, #0]
 8006606:	e020      	b.n	800664a <USB_EPStartXfer+0xdea>
 8006608:	463b      	mov	r3, r7
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d11b      	bne.n	800664a <USB_EPStartXfer+0xdea>
 8006612:	1d3b      	adds	r3, r7, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800661a:	b29b      	uxth	r3, r3
 800661c:	461a      	mov	r2, r3
 800661e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006622:	4413      	add	r3, r2
 8006624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	011a      	lsls	r2, r3, #4
 8006630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006634:	4413      	add	r3, r2
 8006636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800663a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800663e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800664a:	463b      	mov	r3, r7
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	895b      	ldrh	r3, [r3, #10]
 8006650:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006654:	463b      	mov	r3, r7
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6959      	ldr	r1, [r3, #20]
 800665a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665e:	b29b      	uxth	r3, r3
 8006660:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006664:	1d38      	adds	r0, r7, #4
 8006666:	6800      	ldr	r0, [r0, #0]
 8006668:	f000 fd2f 	bl	80070ca <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	463b      	mov	r3, r7
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f107 020a 	add.w	r2, r7, #10
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668a:	8013      	strh	r3, [r2, #0]
 800668c:	f107 030a 	add.w	r3, r7, #10
 8006690:	f107 020a 	add.w	r2, r7, #10
 8006694:	8812      	ldrh	r2, [r2, #0]
 8006696:	f082 0210 	eor.w	r2, r2, #16
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	f107 030a 	add.w	r3, r7, #10
 80066a0:	f107 020a 	add.w	r2, r7, #10
 80066a4:	8812      	ldrh	r2, [r2, #0]
 80066a6:	f082 0220 	eor.w	r2, r2, #32
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	1d3b      	adds	r3, r7, #4
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	f107 030a 	add.w	r3, r7, #10
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]
 80066d4:	e3b5      	b.n	8006e42 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066d6:	463b      	mov	r3, r7
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	7b1b      	ldrb	r3, [r3, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 8090 	bne.w	8006802 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699a      	ldr	r2, [r3, #24]
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d90e      	bls.n	8006710 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80066fc:	463b      	mov	r3, r7
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	463b      	mov	r3, r7
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	619a      	str	r2, [r3, #24]
 800670e:	e008      	b.n	8006722 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006732:	b29b      	uxth	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800673a:	4413      	add	r3, r2
 800673c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011a      	lsls	r2, r3, #4
 8006748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800674c:	4413      	add	r3, r2
 800674e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d116      	bne.n	800678c <USB_EPStartXfer+0xf2c>
 800675e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e32c      	b.n	8006de6 <USB_EPStartXfer+0x1586>
 800678c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006790:	2b3e      	cmp	r3, #62	; 0x3e
 8006792:	d818      	bhi.n	80067c6 <USB_EPStartXfer+0xf66>
 8006794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800679e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <USB_EPStartXfer+0xf54>
 80067aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ae:	3301      	adds	r3, #1
 80067b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	029b      	lsls	r3, r3, #10
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e30f      	b.n	8006de6 <USB_EPStartXfer+0x1586>
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USB_EPStartXfer+0xf86>
 80067dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067e0:	3b01      	subs	r3, #1
 80067e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e2f1      	b.n	8006de6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	78db      	ldrb	r3, [r3, #3]
 8006808:	2b02      	cmp	r3, #2
 800680a:	f040 818f 	bne.w	8006b2c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d175      	bne.n	8006904 <USB_EPStartXfer+0x10a4>
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006820:	1d3b      	adds	r3, r7, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006830:	4413      	add	r3, r2
 8006832:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	011a      	lsls	r2, r3, #4
 800683e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006842:	4413      	add	r3, r2
 8006844:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d116      	bne.n	8006884 <USB_EPStartXfer+0x1024>
 8006856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e065      	b.n	8006950 <USB_EPStartXfer+0x10f0>
 8006884:	463b      	mov	r3, r7
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b3e      	cmp	r3, #62	; 0x3e
 800688c:	d81a      	bhi.n	80068c4 <USB_EPStartXfer+0x1064>
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <USB_EPStartXfer+0x1052>
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ac:	3301      	adds	r3, #1
 80068ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e045      	b.n	8006950 <USB_EPStartXfer+0x10f0>
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <USB_EPStartXfer+0x1088>
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e2:	3b01      	subs	r3, #1
 80068e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	029b      	lsls	r3, r3, #10
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e025      	b.n	8006950 <USB_EPStartXfer+0x10f0>
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d120      	bne.n	8006950 <USB_EPStartXfer+0x10f0>
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006916:	1d3b      	adds	r3, r7, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006926:	4413      	add	r3, r2
 8006928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	011a      	lsls	r2, r3, #4
 8006934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006938:	4413      	add	r3, r2
 800693a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800693e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006942:	463b      	mov	r3, r7
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	b29a      	uxth	r2, r3
 800694a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800694e:	801a      	strh	r2, [r3, #0]
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006958:	463b      	mov	r3, r7
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d175      	bne.n	8006a4e <USB_EPStartXfer+0x11ee>
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006972:	b29b      	uxth	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800697a:	4413      	add	r3, r2
 800697c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	011a      	lsls	r2, r3, #4
 8006988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800698c:	4413      	add	r3, r2
 800698e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006992:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006996:	463b      	mov	r3, r7
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d116      	bne.n	80069ce <USB_EPStartXfer+0x116e>
 80069a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	e061      	b.n	8006a92 <USB_EPStartXfer+0x1232>
 80069ce:	463b      	mov	r3, r7
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b3e      	cmp	r3, #62	; 0x3e
 80069d6:	d81a      	bhi.n	8006a0e <USB_EPStartXfer+0x11ae>
 80069d8:	463b      	mov	r3, r7
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069e4:	463b      	mov	r3, r7
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d004      	beq.n	80069fc <USB_EPStartXfer+0x119c>
 80069f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069f6:	3301      	adds	r3, #1
 80069f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	029b      	lsls	r3, r3, #10
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e041      	b.n	8006a92 <USB_EPStartXfer+0x1232>
 8006a0e:	463b      	mov	r3, r7
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <USB_EPStartXfer+0x11d2>
 8006a28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	029b      	lsls	r3, r3, #10
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e021      	b.n	8006a92 <USB_EPStartXfer+0x1232>
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d11c      	bne.n	8006a92 <USB_EPStartXfer+0x1232>
 8006a58:	1d3b      	adds	r3, r7, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a68:	4413      	add	r3, r2
 8006a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	011a      	lsls	r2, r3, #4
 8006a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a84:	463b      	mov	r3, r7
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a90:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a92:	463b      	mov	r3, r7
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 81a4 	beq.w	8006de6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ab2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <USB_EPStartXfer+0x126a>
 8006abe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8187 	bne.w	8006de6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ad8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 8180 	bne.w	8006de6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006ae6:	1d3b      	adds	r3, r7, #4
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	463b      	mov	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b00:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006b04:	1d3b      	adds	r3, r7, #4
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	463b      	mov	r3, r7
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e15c      	b.n	8006de6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	78db      	ldrb	r3, [r3, #3]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	f040 8155 	bne.w	8006de2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b38:	463b      	mov	r3, r7
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d90e      	bls.n	8006b66 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006b48:	463b      	mov	r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006b52:	463b      	mov	r3, r7
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	463b      	mov	r3, r7
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	619a      	str	r2, [r3, #24]
 8006b64:	e008      	b.n	8006b78 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006b66:	463b      	mov	r3, r7
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2200      	movs	r2, #0
 8006b76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d16f      	bne.n	8006c62 <USB_EPStartXfer+0x1402>
 8006b82:	1d3b      	adds	r3, r7, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	461a      	mov	r2, r3
 8006b96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	011a      	lsls	r2, r3, #4
 8006ba8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bac:	4413      	add	r3, r2
 8006bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d116      	bne.n	8006bec <USB_EPStartXfer+0x138c>
 8006bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e05f      	b.n	8006cac <USB_EPStartXfer+0x144c>
 8006bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8006bf2:	d818      	bhi.n	8006c26 <USB_EPStartXfer+0x13c6>
 8006bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <USB_EPStartXfer+0x13b4>
 8006c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	029b      	lsls	r3, r3, #10
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e042      	b.n	8006cac <USB_EPStartXfer+0x144c>
 8006c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USB_EPStartXfer+0x13e6>
 8006c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e024      	b.n	8006cac <USB_EPStartXfer+0x144c>
 8006c62:	463b      	mov	r3, r7
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d11f      	bne.n	8006cac <USB_EPStartXfer+0x144c>
 8006c6c:	1d3b      	adds	r3, r7, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c74:	1d3b      	adds	r3, r7, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	4413      	add	r3, r2
 8006c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	011a      	lsls	r2, r3, #4
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	4413      	add	r3, r2
 8006c98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	1d3b      	adds	r3, r7, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d16f      	bne.n	8006d9e <USB_EPStartXfer+0x153e>
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cc6:	1d3b      	adds	r3, r7, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cdc:	463b      	mov	r3, r7
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	011a      	lsls	r2, r3, #4
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce8:	4413      	add	r3, r2
 8006cea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d116      	bne.n	8006d28 <USB_EPStartXfer+0x14c8>
 8006cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d24:	801a      	strh	r2, [r3, #0]
 8006d26:	e05e      	b.n	8006de6 <USB_EPStartXfer+0x1586>
 8006d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d2e:	d818      	bhi.n	8006d62 <USB_EPStartXfer+0x1502>
 8006d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d34:	085b      	lsrs	r3, r3, #1
 8006d36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <USB_EPStartXfer+0x14f0>
 8006d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	029b      	lsls	r3, r3, #10
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e041      	b.n	8006de6 <USB_EPStartXfer+0x1586>
 8006d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <USB_EPStartXfer+0x1522>
 8006d78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	029b      	lsls	r3, r3, #10
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e023      	b.n	8006de6 <USB_EPStartXfer+0x1586>
 8006d9e:	463b      	mov	r3, r7
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d11e      	bne.n	8006de6 <USB_EPStartXfer+0x1586>
 8006da8:	1d3b      	adds	r3, r7, #4
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	4413      	add	r3, r2
 8006dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	011a      	lsls	r2, r3, #4
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	4413      	add	r3, r2
 8006dcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e001      	b.n	8006de6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e02e      	b.n	8006e44 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	463b      	mov	r3, r7
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e00:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e0c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e18:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e1c:	1d3b      	adds	r3, r7, #4
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	463b      	mov	r3, r7
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	441a      	add	r2, r3
 8006e2a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d020      	beq.n	8006ea2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e76:	81bb      	strh	r3, [r7, #12]
 8006e78:	89bb      	ldrh	r3, [r7, #12]
 8006e7a:	f083 0310 	eor.w	r3, r3, #16
 8006e7e:	81bb      	strh	r3, [r7, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	441a      	add	r2, r3
 8006e8a:	89bb      	ldrh	r3, [r7, #12]
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
 8006ea0:	e01f      	b.n	8006ee2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	81fb      	strh	r3, [r7, #14]
 8006eba:	89fb      	ldrh	r3, [r7, #14]
 8006ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ec0:	81fb      	strh	r3, [r7, #14]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	89fb      	ldrh	r3, [r7, #14]
 8006ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b087      	sub	sp, #28
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	7b1b      	ldrb	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 809d 	bne.w	800703c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d04c      	beq.n	8006fa4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	823b      	strh	r3, [r7, #16]
 8006f18:	8a3b      	ldrh	r3, [r7, #16]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01b      	beq.n	8006f5a <USB_EPClearStall+0x6c>
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	81fb      	strh	r3, [r7, #14]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	89fb      	ldrh	r3, [r7, #14]
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d06c      	beq.n	800703c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f78:	81bb      	strh	r3, [r7, #12]
 8006f7a:	89bb      	ldrh	r3, [r7, #12]
 8006f7c:	f083 0320 	eor.w	r3, r3, #32
 8006f80:	81bb      	strh	r3, [r7, #12]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	89bb      	ldrh	r3, [r7, #12]
 8006f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	8013      	strh	r3, [r2, #0]
 8006fa2:	e04b      	b.n	800703c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	82fb      	strh	r3, [r7, #22]
 8006fb2:	8afb      	ldrh	r3, [r7, #22]
 8006fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <USB_EPClearStall+0x106>
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd2:	82bb      	strh	r3, [r7, #20]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	441a      	add	r2, r3
 8006fde:	8abb      	ldrh	r3, [r7, #20]
 8006fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	827b      	strh	r3, [r7, #18]
 800700c:	8a7b      	ldrh	r3, [r7, #18]
 800700e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007012:	827b      	strh	r3, [r7, #18]
 8007014:	8a7b      	ldrh	r3, [r7, #18]
 8007016:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800701a:	827b      	strh	r3, [r7, #18]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	8a7b      	ldrh	r3, [r7, #18]
 8007028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	b29b      	uxth	r3, r3
 800703a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2280      	movs	r2, #128	; 0x80
 800705e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr

08007082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b08d      	sub	sp, #52	; 0x34
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	4611      	mov	r1, r2
 80070d6:	461a      	mov	r2, r3
 80070d8:	460b      	mov	r3, r1
 80070da:	80fb      	strh	r3, [r7, #6]
 80070dc:	4613      	mov	r3, r2
 80070de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070e0:	88bb      	ldrh	r3, [r7, #4]
 80070e2:	3301      	adds	r3, #1
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	005a      	lsls	r2, r3, #1
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007102:	e01e      	b.n	8007142 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	3301      	adds	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	b29a      	uxth	r2, r3
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	3302      	adds	r3, #2
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	3302      	adds	r3, #2
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	3301      	adds	r3, #1
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	3b01      	subs	r3, #1
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1dd      	bne.n	8007104 <USB_WritePMA+0x3a>
  }
}
 8007148:	bf00      	nop
 800714a:	3734      	adds	r7, #52	; 0x34
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr

08007152 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007152:	b480      	push	{r7}
 8007154:	b08b      	sub	sp, #44	; 0x2c
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	4611      	mov	r1, r2
 800715e:	461a      	mov	r2, r3
 8007160:	460b      	mov	r3, r1
 8007162:	80fb      	strh	r3, [r7, #6]
 8007164:	4613      	mov	r3, r2
 8007166:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007168:	88bb      	ldrh	r3, [r7, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	b29b      	uxth	r3, r3
 800716e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	005a      	lsls	r2, r3, #1
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007184:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
 800718a:	e01b      	b.n	80071c4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	3302      	adds	r3, #2
 8007198:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3301      	adds	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3301      	adds	r3, #1
 80071b6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	3302      	adds	r3, #2
 80071bc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	3b01      	subs	r3, #1
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e0      	bne.n	800718c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80071ca:	88bb      	ldrh	r3, [r7, #4]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	701a      	strb	r2, [r3, #0]
  }
}
 80071e6:	bf00      	nop
 80071e8:	372c      	adds	r7, #44	; 0x2c
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80071fc:	2304      	movs	r3, #4
 80071fe:	2203      	movs	r2, #3
 8007200:	2181      	movs	r1, #129	; 0x81
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fc75 	bl	8008af2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800720e:	2010      	movs	r0, #16
 8007210:	f001 fd84 	bl	8008d1c <USBD_static_malloc>
 8007214:	4602      	mov	r2, r0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007226:	2302      	movs	r3, #2
 8007228:	e005      	b.n	8007236 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007230:	2200      	movs	r2, #0
 8007232:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800724a:	2181      	movs	r1, #129	; 0x81
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fc76 	bl	8008b3e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	4618      	mov	r0, r3
 800726a:	f001 fd63 	bl	8008d34 <USBD_static_free>
    pdev->pClassData = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d045      	beq.n	800733a <USBD_HID_Setup+0xba>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	f040 80d3 	bne.w	800745a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	785b      	ldrb	r3, [r3, #1]
 80072b8:	3b02      	subs	r3, #2
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	d835      	bhi.n	800732a <USBD_HID_Setup+0xaa>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <USBD_HID_Setup+0x44>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	0800731b 	.word	0x0800731b
 80072c8:	080072fb 	.word	0x080072fb
 80072cc:	0800732b 	.word	0x0800732b
 80072d0:	0800732b 	.word	0x0800732b
 80072d4:	0800732b 	.word	0x0800732b
 80072d8:	0800732b 	.word	0x0800732b
 80072dc:	0800732b 	.word	0x0800732b
 80072e0:	0800732b 	.word	0x0800732b
 80072e4:	08007309 	.word	0x08007309
 80072e8:	080072ed 	.word	0x080072ed
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	885b      	ldrh	r3, [r3, #2]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	601a      	str	r2, [r3, #0]
          break;
 80072f8:	e01e      	b.n	8007338 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2201      	movs	r2, #1
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f937 	bl	8008574 <USBD_CtlSendData>
          break;
 8007306:	e017      	b.n	8007338 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	885b      	ldrh	r3, [r3, #2]
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	b29b      	uxth	r3, r3
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]
          break;
 8007318:	e00e      	b.n	8007338 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	3304      	adds	r3, #4
 800731e:	2201      	movs	r2, #1
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f001 f926 	bl	8008574 <USBD_CtlSendData>
          break;
 8007328:	e006      	b.n	8007338 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f8b7 	bl	80084a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007332:	2302      	movs	r3, #2
 8007334:	75fb      	strb	r3, [r7, #23]
          break;
 8007336:	bf00      	nop
      }
      break;
 8007338:	e096      	b.n	8007468 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b0b      	cmp	r3, #11
 8007340:	f200 8083 	bhi.w	800744a <USBD_HID_Setup+0x1ca>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBD_HID_Setup+0xcc>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	0800737d 	.word	0x0800737d
 8007350:	0800744b 	.word	0x0800744b
 8007354:	0800744b 	.word	0x0800744b
 8007358:	0800744b 	.word	0x0800744b
 800735c:	0800744b 	.word	0x0800744b
 8007360:	0800744b 	.word	0x0800744b
 8007364:	080073a5 	.word	0x080073a5
 8007368:	0800744b 	.word	0x0800744b
 800736c:	0800744b 	.word	0x0800744b
 8007370:	0800744b 	.word	0x0800744b
 8007374:	080073fd 	.word	0x080073fd
 8007378:	08007425 	.word	0x08007425
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007382:	2b03      	cmp	r3, #3
 8007384:	d107      	bne.n	8007396 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007386:	f107 030e 	add.w	r3, r7, #14
 800738a:	2202      	movs	r2, #2
 800738c:	4619      	mov	r1, r3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 f8f0 	bl	8008574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007394:	e060      	b.n	8007458 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 f881 	bl	80084a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800739e:	2302      	movs	r3, #2
 80073a0:	75fb      	strb	r3, [r7, #23]
          break;
 80073a2:	e059      	b.n	8007458 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	885b      	ldrh	r3, [r3, #2]
 80073a8:	0a1b      	lsrs	r3, r3, #8
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b22      	cmp	r3, #34	; 0x22
 80073ae:	d108      	bne.n	80073c2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	88db      	ldrh	r3, [r3, #6]
 80073b4:	2b4a      	cmp	r3, #74	; 0x4a
 80073b6:	bf28      	it	cs
 80073b8:	234a      	movcs	r3, #74	; 0x4a
 80073ba:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80073bc:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <USBD_HID_Setup+0x1f4>)
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	e015      	b.n	80073ee <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b21      	cmp	r3, #33	; 0x21
 80073cc:	d108      	bne.n	80073e0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80073ce:	4b2a      	ldr	r3, [pc, #168]	; (8007478 <USBD_HID_Setup+0x1f8>)
 80073d0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88db      	ldrh	r3, [r3, #6]
 80073d6:	2b09      	cmp	r3, #9
 80073d8:	bf28      	it	cs
 80073da:	2309      	movcs	r3, #9
 80073dc:	83fb      	strh	r3, [r7, #30]
 80073de:	e006      	b.n	80073ee <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 f85c 	bl	80084a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e8:	2302      	movs	r3, #2
 80073ea:	75fb      	strb	r3, [r7, #23]
            break;
 80073ec:	e034      	b.n	8007458 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80073ee:	8bfb      	ldrh	r3, [r7, #30]
 80073f0:	461a      	mov	r2, r3
 80073f2:	69b9      	ldr	r1, [r7, #24]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f8bd 	bl	8008574 <USBD_CtlSendData>
          break;
 80073fa:	e02d      	b.n	8007458 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007402:	2b03      	cmp	r3, #3
 8007404:	d107      	bne.n	8007416 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3308      	adds	r3, #8
 800740a:	2201      	movs	r2, #1
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f8b0 	bl	8008574 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007414:	e020      	b.n	8007458 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f841 	bl	80084a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800741e:	2302      	movs	r3, #2
 8007420:	75fb      	strb	r3, [r7, #23]
          break;
 8007422:	e019      	b.n	8007458 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742a:	2b03      	cmp	r3, #3
 800742c:	d106      	bne.n	800743c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	885b      	ldrh	r3, [r3, #2]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	461a      	mov	r2, r3
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800743a:	e00d      	b.n	8007458 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 f82e 	bl	80084a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007444:	2302      	movs	r3, #2
 8007446:	75fb      	strb	r3, [r7, #23]
          break;
 8007448:	e006      	b.n	8007458 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 f827 	bl	80084a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007452:	2302      	movs	r3, #2
 8007454:	75fb      	strb	r3, [r7, #23]
          break;
 8007456:	bf00      	nop
      }
      break;
 8007458:	e006      	b.n	8007468 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 f81f 	bl	80084a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007462:	2302      	movs	r3, #2
 8007464:	75fb      	strb	r3, [r7, #23]
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200000ec 	.word	0x200000ec
 8007478:	200000d4 	.word	0x200000d4

0800747c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007498:	2b03      	cmp	r3, #3
 800749a:	d10c      	bne.n	80074b6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	7b1b      	ldrb	r3, [r3, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d108      	bne.n	80074b6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2201      	movs	r2, #1
 80074a8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	2181      	movs	r1, #129	; 0x81
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f001 fbec 	bl	8008c8e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2222      	movs	r2, #34	; 0x22
 80074cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80074ce:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20000068 	.word	0x20000068

080074e0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2222      	movs	r2, #34	; 0x22
 80074ec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	; (80074fc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	2000008c 	.word	0x2000008c

08007500 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2222      	movs	r2, #34	; 0x22
 800750c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	bc80      	pop	{r7}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	200000b0 	.word	0x200000b0

08007520 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	2200      	movs	r2, #0
 8007534:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
	...

08007544 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	220a      	movs	r2, #10
 8007550:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007552:	4b03      	ldr	r3, [pc, #12]	; (8007560 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	200000e0 	.word	0x200000e0

08007564 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007578:	2302      	movs	r3, #2
 800757a:	e01a      	b.n	80075b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	79fa      	ldrb	r2, [r7, #7]
 80075a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 fa3e 	bl	8008a2c <USBD_LL_Init>

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d006      	beq.n	80075dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
 80075da:	e001      	b.n	80075e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80075dc:	2302      	movs	r3, #2
 80075de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fa61 	bl	8008abc <USBD_LL_Start>

  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007624:	2302      	movs	r3, #2
 8007626:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00c      	beq.n	800764c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	4611      	mov	r1, r2
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	78fa      	ldrb	r2, [r7, #3]
 800766c:	4611      	mov	r1, r2
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3

  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 feca 	bl	8008428 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d00c      	beq.n	80076d2 <USBD_LL_SetupStage+0x56>
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d302      	bcc.n	80076c2 <USBD_LL_SetupStage+0x46>
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d010      	beq.n	80076e2 <USBD_LL_SetupStage+0x66>
 80076c0:	e017      	b.n	80076f2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9ca 	bl	8007a64 <USBD_StdDevReq>
      break;
 80076d0:	e01a      	b.n	8007708 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa2c 	bl	8007b38 <USBD_StdItfReq>
      break;
 80076e0:	e012      	b.n	8007708 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa6a 	bl	8007bc4 <USBD_StdEPReq>
      break;
 80076f0:	e00a      	b.n	8007708 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fa3b 	bl	8008b7c <USBD_LL_StallEP>
      break;
 8007706:	bf00      	nop
  }

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b086      	sub	sp, #24
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	460b      	mov	r3, r1
 800771c:	607a      	str	r2, [r7, #4]
 800771e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d14b      	bne.n	80077be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800772c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007734:	2b03      	cmp	r3, #3
 8007736:	d134      	bne.n	80077a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d919      	bls.n	8007778 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	1ad2      	subs	r2, r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800775a:	429a      	cmp	r2, r3
 800775c:	d203      	bcs.n	8007766 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007762:	b29b      	uxth	r3, r3
 8007764:	e002      	b.n	800776c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 ff2d 	bl	80085d0 <USBD_CtlContinueRx>
 8007776:	e038      	b.n	80077ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800778a:	2b03      	cmp	r3, #3
 800778c:	d105      	bne.n	800779a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 ff2a 	bl	80085f4 <USBD_CtlSendStatus>
 80077a0:	e023      	b.n	80077ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	d11e      	bne.n	80077ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80077b4:	2100      	movs	r1, #0
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f001 f9e0 	bl	8008b7c <USBD_LL_StallEP>
 80077bc:	e015      	b.n	80077ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d108      	bne.n	80077e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	7afa      	ldrb	r2, [r7, #11]
 80077de:	4611      	mov	r1, r2
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	4798      	blx	r3
 80077e4:	e001      	b.n	80077ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077e6:	2302      	movs	r3, #2
 80077e8:	e000      	b.n	80077ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	460b      	mov	r3, r1
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d17f      	bne.n	8007908 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3314      	adds	r3, #20
 800780c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007814:	2b02      	cmp	r3, #2
 8007816:	d15c      	bne.n	80078d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d915      	bls.n	8007850 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	1ad2      	subs	r2, r2, r3
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 feb5 	bl	80085ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007842:	2300      	movs	r3, #0
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f001 fa43 	bl	8008cd4 <USBD_LL_PrepareReceive>
 800784e:	e04e      	b.n	80078ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	6912      	ldr	r2, [r2, #16]
 8007858:	fbb3 f1f2 	udiv	r1, r3, r2
 800785c:	fb02 f201 	mul.w	r2, r2, r1
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d11c      	bne.n	80078a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800786e:	429a      	cmp	r2, r3
 8007870:	d316      	bcc.n	80078a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d20f      	bcs.n	80078a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fe91 	bl	80085ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007892:	2300      	movs	r3, #0
 8007894:	2200      	movs	r2, #0
 8007896:	2100      	movs	r1, #0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f001 fa1b 	bl	8008cd4 <USBD_LL_PrepareReceive>
 800789e:	e026      	b.n	80078ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d105      	bne.n	80078c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80078c2:	2180      	movs	r1, #128	; 0x80
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f001 f959 	bl	8008b7c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 fea5 	bl	800861a <USBD_CtlReceiveStatus>
 80078d0:	e00d      	b.n	80078ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d004      	beq.n	80078e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d103      	bne.n	80078ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80078e6:	2180      	movs	r1, #128	; 0x80
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f001 f947 	bl	8008b7c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d11d      	bne.n	8007934 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff fe83 	bl	8007604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007906:	e015      	b.n	8007934 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00d      	beq.n	8007930 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800791a:	2b03      	cmp	r3, #3
 800791c:	d108      	bne.n	8007930 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	7afa      	ldrb	r2, [r7, #11]
 8007928:	4611      	mov	r1, r2
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	4798      	blx	r3
 800792e:	e001      	b.n	8007934 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007930:	2302      	movs	r3, #2
 8007932:	e000      	b.n	8007936 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007946:	2340      	movs	r3, #64	; 0x40
 8007948:	2200      	movs	r2, #0
 800794a:	2100      	movs	r1, #0
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f8d0 	bl	8008af2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2240      	movs	r2, #64	; 0x40
 800795e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007962:	2340      	movs	r3, #64	; 0x40
 8007964:	2200      	movs	r2, #0
 8007966:	2180      	movs	r1, #128	; 0x80
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 f8c2 	bl	8008af2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2240      	movs	r2, #64	; 0x40
 8007978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6852      	ldr	r2, [r2, #4]
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	4611      	mov	r1, r2
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
  }

  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr

080079de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2204      	movs	r2, #4
 80079f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr

08007a06 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d105      	bne.n	8007a24 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d10b      	bne.n	8007a5a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d004      	beq.n	8007a88 <USBD_StdDevReq+0x24>
 8007a7e:	2b40      	cmp	r3, #64	; 0x40
 8007a80:	d002      	beq.n	8007a88 <USBD_StdDevReq+0x24>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <USBD_StdDevReq+0x34>
 8007a86:	e04c      	b.n	8007b22 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
      break;
 8007a96:	e049      	b.n	8007b2c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	2b09      	cmp	r3, #9
 8007a9e:	d83a      	bhi.n	8007b16 <USBD_StdDevReq+0xb2>
 8007aa0:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <USBD_StdDevReq+0x44>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007af9 	.word	0x08007af9
 8007aac:	08007b0d 	.word	0x08007b0d
 8007ab0:	08007b17 	.word	0x08007b17
 8007ab4:	08007b03 	.word	0x08007b03
 8007ab8:	08007b17 	.word	0x08007b17
 8007abc:	08007adb 	.word	0x08007adb
 8007ac0:	08007ad1 	.word	0x08007ad1
 8007ac4:	08007b17 	.word	0x08007b17
 8007ac8:	08007aef 	.word	0x08007aef
 8007acc:	08007ae5 	.word	0x08007ae5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f9d4 	bl	8007e80 <USBD_GetDescriptor>
          break;
 8007ad8:	e022      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fb37 	bl	8008150 <USBD_SetAddress>
          break;
 8007ae2:	e01d      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fb74 	bl	80081d4 <USBD_SetConfig>
          break;
 8007aec:	e018      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fbfd 	bl	80082f0 <USBD_GetConfig>
          break;
 8007af6:	e013      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fc2c 	bl	8008358 <USBD_GetStatus>
          break;
 8007b00:	e00e      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fc5a 	bl	80083be <USBD_SetFeature>
          break;
 8007b0a:	e009      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fc69 	bl	80083e6 <USBD_ClrFeature>
          break;
 8007b14:	e004      	b.n	8007b20 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fcc1 	bl	80084a0 <USBD_CtlError>
          break;
 8007b1e:	bf00      	nop
      }
      break;
 8007b20:	e004      	b.n	8007b2c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fcbb 	bl	80084a0 <USBD_CtlError>
      break;
 8007b2a:	bf00      	nop
  }

  return ret;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop

08007b38 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d003      	beq.n	8007b5a <USBD_StdItfReq+0x22>
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d001      	beq.n	8007b5a <USBD_StdItfReq+0x22>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d12a      	bne.n	8007bb0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	3b01      	subs	r3, #1
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d81d      	bhi.n	8007ba2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	889b      	ldrh	r3, [r3, #4]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d813      	bhi.n	8007b98 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	4798      	blx	r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	88db      	ldrh	r3, [r3, #6]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d110      	bne.n	8007bac <USBD_StdItfReq+0x74>
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10d      	bne.n	8007bac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fd2f 	bl	80085f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b96:	e009      	b.n	8007bac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007b98:	6839      	ldr	r1, [r7, #0]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fc80 	bl	80084a0 <USBD_CtlError>
          break;
 8007ba0:	e004      	b.n	8007bac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fc7b 	bl	80084a0 <USBD_CtlError>
          break;
 8007baa:	e000      	b.n	8007bae <USBD_StdItfReq+0x76>
          break;
 8007bac:	bf00      	nop
      }
      break;
 8007bae:	e004      	b.n	8007bba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc74 	bl	80084a0 <USBD_CtlError>
      break;
 8007bb8:	bf00      	nop
  }

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	889b      	ldrh	r3, [r3, #4]
 8007bd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d004      	beq.n	8007bee <USBD_StdEPReq+0x2a>
 8007be4:	2b40      	cmp	r3, #64	; 0x40
 8007be6:	d002      	beq.n	8007bee <USBD_StdEPReq+0x2a>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <USBD_StdEPReq+0x3a>
 8007bec:	e13d      	b.n	8007e6a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
      break;
 8007bfc:	e13a      	b.n	8007e74 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d10a      	bne.n	8007c20 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	4798      	blx	r3
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	e12a      	b.n	8007e76 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d03e      	beq.n	8007ca6 <USBD_StdEPReq+0xe2>
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d002      	beq.n	8007c32 <USBD_StdEPReq+0x6e>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d070      	beq.n	8007d12 <USBD_StdEPReq+0x14e>
 8007c30:	e115      	b.n	8007e5e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d002      	beq.n	8007c42 <USBD_StdEPReq+0x7e>
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d015      	beq.n	8007c6c <USBD_StdEPReq+0xa8>
 8007c40:	e02b      	b.n	8007c9a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00c      	beq.n	8007c62 <USBD_StdEPReq+0x9e>
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d009      	beq.n	8007c62 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 ff92 	bl	8008b7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007c58:	2180      	movs	r1, #128	; 0x80
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 ff8e 	bl	8008b7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c60:	e020      	b.n	8007ca4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fc1b 	bl	80084a0 <USBD_CtlError>
              break;
 8007c6a:	e01b      	b.n	8007ca4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10e      	bne.n	8007c92 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <USBD_StdEPReq+0xce>
 8007c7a:	7bbb      	ldrb	r3, [r7, #14]
 8007c7c:	2b80      	cmp	r3, #128	; 0x80
 8007c7e:	d008      	beq.n	8007c92 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	88db      	ldrh	r3, [r3, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 ff75 	bl	8008b7c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fcae 	bl	80085f4 <USBD_CtlSendStatus>

              break;
 8007c98:	e004      	b.n	8007ca4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fbff 	bl	80084a0 <USBD_CtlError>
              break;
 8007ca2:	bf00      	nop
          }
          break;
 8007ca4:	e0e0      	b.n	8007e68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d002      	beq.n	8007cb6 <USBD_StdEPReq+0xf2>
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d015      	beq.n	8007ce0 <USBD_StdEPReq+0x11c>
 8007cb4:	e026      	b.n	8007d04 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00c      	beq.n	8007cd6 <USBD_StdEPReq+0x112>
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	2b80      	cmp	r3, #128	; 0x80
 8007cc0:	d009      	beq.n	8007cd6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 ff58 	bl	8008b7c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ccc:	2180      	movs	r1, #128	; 0x80
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 ff54 	bl	8008b7c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cd4:	e01c      	b.n	8007d10 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fbe1 	bl	80084a0 <USBD_CtlError>
              break;
 8007cde:	e017      	b.n	8007d10 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	885b      	ldrh	r3, [r3, #2]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d112      	bne.n	8007d0e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 ff5f 	bl	8008bba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc79 	bl	80085f4 <USBD_CtlSendStatus>
              }
              break;
 8007d02:	e004      	b.n	8007d0e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fbca 	bl	80084a0 <USBD_CtlError>
              break;
 8007d0c:	e000      	b.n	8007d10 <USBD_StdEPReq+0x14c>
              break;
 8007d0e:	bf00      	nop
          }
          break;
 8007d10:	e0aa      	b.n	8007e68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d002      	beq.n	8007d22 <USBD_StdEPReq+0x15e>
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d032      	beq.n	8007d86 <USBD_StdEPReq+0x1c2>
 8007d20:	e097      	b.n	8007e52 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <USBD_StdEPReq+0x174>
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b80      	cmp	r3, #128	; 0x80
 8007d2c:	d004      	beq.n	8007d38 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fbb5 	bl	80084a0 <USBD_CtlError>
                break;
 8007d36:	e091      	b.n	8007e5c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da0b      	bge.n	8007d58 <USBD_StdEPReq+0x194>
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	3310      	adds	r3, #16
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	3304      	adds	r3, #4
 8007d56:	e00b      	b.n	8007d70 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3304      	adds	r3, #4
 8007d70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fbf8 	bl	8008574 <USBD_CtlSendData>
              break;
 8007d84:	e06a      	b.n	8007e5c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	da11      	bge.n	8007db2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	f003 020f 	and.w	r2, r3, #15
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	3318      	adds	r3, #24
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d117      	bne.n	8007dd8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb78 	bl	80084a0 <USBD_CtlError>
                  break;
 8007db0:	e054      	b.n	8007e5c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	f003 020f 	and.w	r2, r3, #15
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fb65 	bl	80084a0 <USBD_CtlError>
                  break;
 8007dd6:	e041      	b.n	8007e5c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	da0b      	bge.n	8007df8 <USBD_StdEPReq+0x234>
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	3310      	adds	r3, #16
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4413      	add	r3, r2
 8007df4:	3304      	adds	r3, #4
 8007df6:	e00b      	b.n	8007e10 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	3304      	adds	r3, #4
 8007e10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <USBD_StdEPReq+0x25a>
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d103      	bne.n	8007e26 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e00e      	b.n	8007e44 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fee4 	bl	8008bf8 <USBD_LL_IsStallEP>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	e002      	b.n	8007e44 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2202      	movs	r2, #2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fb92 	bl	8008574 <USBD_CtlSendData>
              break;
 8007e50:	e004      	b.n	8007e5c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb23 	bl	80084a0 <USBD_CtlError>
              break;
 8007e5a:	bf00      	nop
          }
          break;
 8007e5c:	e004      	b.n	8007e68 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fb1d 	bl	80084a0 <USBD_CtlError>
          break;
 8007e66:	bf00      	nop
      }
      break;
 8007e68:	e004      	b.n	8007e74 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fb17 	bl	80084a0 <USBD_CtlError>
      break;
 8007e72:	bf00      	nop
  }

  return ret;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	885b      	ldrh	r3, [r3, #2]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b06      	cmp	r3, #6
 8007ea2:	f200 8128 	bhi.w	80080f6 <USBD_GetDescriptor+0x276>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USBD_GetDescriptor+0x2c>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ec9 	.word	0x08007ec9
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007f21 	.word	0x08007f21
 8007eb8:	080080f7 	.word	0x080080f7
 8007ebc:	080080f7 	.word	0x080080f7
 8007ec0:	08008097 	.word	0x08008097
 8007ec4:	080080c3 	.word	0x080080c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
      break;
 8007ede:	e112      	b.n	8008106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7c1b      	ldrb	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10d      	bne.n	8007f04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	f107 0208 	add.w	r2, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f02:	e100      	b.n	8008106 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	f107 0208 	add.w	r2, r7, #8
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	701a      	strb	r2, [r3, #0]
      break;
 8007f1e:	e0f2      	b.n	8008106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	885b      	ldrh	r3, [r3, #2]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b05      	cmp	r3, #5
 8007f28:	f200 80ac 	bhi.w	8008084 <USBD_GetDescriptor+0x204>
 8007f2c:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <USBD_GetDescriptor+0xb4>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f4d 	.word	0x08007f4d
 8007f38:	08007f81 	.word	0x08007f81
 8007f3c:	08007fb5 	.word	0x08007fb5
 8007f40:	08007fe9 	.word	0x08007fe9
 8007f44:	0800801d 	.word	0x0800801d
 8007f48:	08008051 	.word	0x08008051
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	7c12      	ldrb	r2, [r2, #16]
 8007f64:	f107 0108 	add.w	r1, r7, #8
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f6e:	e091      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa94 	bl	80084a0 <USBD_CtlError>
            err++;
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f7e:	e089      	b.n	8008094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	7c12      	ldrb	r2, [r2, #16]
 8007f98:	f107 0108 	add.w	r1, r7, #8
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fa2:	e077      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa7a 	bl	80084a0 <USBD_CtlError>
            err++;
 8007fac:	7afb      	ldrb	r3, [r7, #11]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fb2:	e06f      	b.n	8008094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	7c12      	ldrb	r2, [r2, #16]
 8007fcc:	f107 0108 	add.w	r1, r7, #8
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fd6:	e05d      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa60 	bl	80084a0 <USBD_CtlError>
            err++;
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fe6:	e055      	b.n	8008094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	7c12      	ldrb	r2, [r2, #16]
 8008000:	f107 0108 	add.w	r1, r7, #8
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
 8008008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800800a:	e043      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa46 	bl	80084a0 <USBD_CtlError>
            err++;
 8008014:	7afb      	ldrb	r3, [r7, #11]
 8008016:	3301      	adds	r3, #1
 8008018:	72fb      	strb	r3, [r7, #11]
          break;
 800801a:	e03b      	b.n	8008094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	7c12      	ldrb	r2, [r2, #16]
 8008034:	f107 0108 	add.w	r1, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800803e:	e029      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa2c 	bl	80084a0 <USBD_CtlError>
            err++;
 8008048:	7afb      	ldrb	r3, [r7, #11]
 800804a:	3301      	adds	r3, #1
 800804c:	72fb      	strb	r3, [r7, #11]
          break;
 800804e:	e021      	b.n	8008094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	7c12      	ldrb	r2, [r2, #16]
 8008068:	f107 0108 	add.w	r1, r7, #8
 800806c:	4610      	mov	r0, r2
 800806e:	4798      	blx	r3
 8008070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008072:	e00f      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa12 	bl	80084a0 <USBD_CtlError>
            err++;
 800807c:	7afb      	ldrb	r3, [r7, #11]
 800807e:	3301      	adds	r3, #1
 8008080:	72fb      	strb	r3, [r7, #11]
          break;
 8008082:	e007      	b.n	8008094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fa0a 	bl	80084a0 <USBD_CtlError>
          err++;
 800808c:	7afb      	ldrb	r3, [r7, #11]
 800808e:	3301      	adds	r3, #1
 8008090:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008092:	e038      	b.n	8008106 <USBD_GetDescriptor+0x286>
 8008094:	e037      	b.n	8008106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7c1b      	ldrb	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d109      	bne.n	80080b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a6:	f107 0208 	add.w	r2, r7, #8
 80080aa:	4610      	mov	r0, r2
 80080ac:	4798      	blx	r3
 80080ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080b0:	e029      	b.n	8008106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9f3 	bl	80084a0 <USBD_CtlError>
        err++;
 80080ba:	7afb      	ldrb	r3, [r7, #11]
 80080bc:	3301      	adds	r3, #1
 80080be:	72fb      	strb	r3, [r7, #11]
      break;
 80080c0:	e021      	b.n	8008106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7c1b      	ldrb	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10d      	bne.n	80080e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f107 0208 	add.w	r2, r7, #8
 80080d6:	4610      	mov	r0, r2
 80080d8:	4798      	blx	r3
 80080da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3301      	adds	r3, #1
 80080e0:	2207      	movs	r2, #7
 80080e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080e4:	e00f      	b.n	8008106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9d9 	bl	80084a0 <USBD_CtlError>
        err++;
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	3301      	adds	r3, #1
 80080f2:	72fb      	strb	r3, [r7, #11]
      break;
 80080f4:	e007      	b.n	8008106 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f9d1 	bl	80084a0 <USBD_CtlError>
      err++;
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	3301      	adds	r3, #1
 8008102:	72fb      	strb	r3, [r7, #11]
      break;
 8008104:	bf00      	nop
  }

  if (err != 0U)
 8008106:	7afb      	ldrb	r3, [r7, #11]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11c      	bne.n	8008146 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800810c:	893b      	ldrh	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d011      	beq.n	8008136 <USBD_GetDescriptor+0x2b6>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	88db      	ldrh	r3, [r3, #6]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	88da      	ldrh	r2, [r3, #6]
 800811e:	893b      	ldrh	r3, [r7, #8]
 8008120:	4293      	cmp	r3, r2
 8008122:	bf28      	it	cs
 8008124:	4613      	movcs	r3, r2
 8008126:	b29b      	uxth	r3, r3
 8008128:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800812a:	893b      	ldrh	r3, [r7, #8]
 800812c:	461a      	mov	r2, r3
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa1f 	bl	8008574 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa58 	bl	80085f4 <USBD_CtlSendStatus>
 8008144:	e000      	b.n	8008148 <USBD_GetDescriptor+0x2c8>
    return;
 8008146:	bf00      	nop
    }
  }
}
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop

08008150 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	889b      	ldrh	r3, [r3, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d130      	bne.n	80081c4 <USBD_SetAddress+0x74>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	88db      	ldrh	r3, [r3, #6]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d12c      	bne.n	80081c4 <USBD_SetAddress+0x74>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	2b7f      	cmp	r3, #127	; 0x7f
 8008170:	d828      	bhi.n	80081c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	2b03      	cmp	r3, #3
 8008186:	d104      	bne.n	8008192 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f988 	bl	80084a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008190:	e01c      	b.n	80081cc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7bfa      	ldrb	r2, [r7, #15]
 8008196:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fd56 	bl	8008c50 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fa25 	bl	80085f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b8:	e008      	b.n	80081cc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c2:	e003      	b.n	80081cc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f96a 	bl	80084a0 <USBD_CtlError>
  }
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	885b      	ldrh	r3, [r3, #2]
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	4b41      	ldr	r3, [pc, #260]	; (80082ec <USBD_SetConfig+0x118>)
 80081e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80081e8:	4b40      	ldr	r3, [pc, #256]	; (80082ec <USBD_SetConfig+0x118>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d904      	bls.n	80081fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f954 	bl	80084a0 <USBD_CtlError>
 80081f8:	e075      	b.n	80082e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008200:	2b02      	cmp	r3, #2
 8008202:	d002      	beq.n	800820a <USBD_SetConfig+0x36>
 8008204:	2b03      	cmp	r3, #3
 8008206:	d023      	beq.n	8008250 <USBD_SetConfig+0x7c>
 8008208:	e062      	b.n	80082d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800820a:	4b38      	ldr	r3, [pc, #224]	; (80082ec <USBD_SetConfig+0x118>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01a      	beq.n	8008248 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008212:	4b36      	ldr	r3, [pc, #216]	; (80082ec <USBD_SetConfig+0x118>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2203      	movs	r2, #3
 8008220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008224:	4b31      	ldr	r3, [pc, #196]	; (80082ec <USBD_SetConfig+0x118>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7ff f9f4 	bl	8007618 <USBD_SetClassConfig>
 8008230:	4603      	mov	r3, r0
 8008232:	2b02      	cmp	r3, #2
 8008234:	d104      	bne.n	8008240 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f931 	bl	80084a0 <USBD_CtlError>
            return;
 800823e:	e052      	b.n	80082e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f9d7 	bl	80085f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008246:	e04e      	b.n	80082e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9d3 	bl	80085f4 <USBD_CtlSendStatus>
        break;
 800824e:	e04a      	b.n	80082e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008250:	4b26      	ldr	r3, [pc, #152]	; (80082ec <USBD_SetConfig+0x118>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d112      	bne.n	800827e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008260:	4b22      	ldr	r3, [pc, #136]	; (80082ec <USBD_SetConfig+0x118>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <USBD_SetConfig+0x118>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff f9f0 	bl	8007656 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f9bc 	bl	80085f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800827c:	e033      	b.n	80082e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800827e:	4b1b      	ldr	r3, [pc, #108]	; (80082ec <USBD_SetConfig+0x118>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d01d      	beq.n	80082c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff f9de 	bl	8007656 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800829a:	4b14      	ldr	r3, [pc, #80]	; (80082ec <USBD_SetConfig+0x118>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <USBD_SetConfig+0x118>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff f9b4 	bl	8007618 <USBD_SetClassConfig>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d104      	bne.n	80082c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8f1 	bl	80084a0 <USBD_CtlError>
            return;
 80082be:	e012      	b.n	80082e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f997 	bl	80085f4 <USBD_CtlSendStatus>
        break;
 80082c6:	e00e      	b.n	80082e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f993 	bl	80085f4 <USBD_CtlSendStatus>
        break;
 80082ce:	e00a      	b.n	80082e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f8e4 	bl	80084a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <USBD_SetConfig+0x118>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff f9b9 	bl	8007656 <USBD_ClrClassConfig>
        break;
 80082e4:	bf00      	nop
    }
  }
}
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200001c8 	.word	0x200001c8

080082f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	88db      	ldrh	r3, [r3, #6]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d004      	beq.n	800830c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f8cb 	bl	80084a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800830a:	e021      	b.n	8008350 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008312:	2b01      	cmp	r3, #1
 8008314:	db17      	blt.n	8008346 <USBD_GetConfig+0x56>
 8008316:	2b02      	cmp	r3, #2
 8008318:	dd02      	ble.n	8008320 <USBD_GetConfig+0x30>
 800831a:	2b03      	cmp	r3, #3
 800831c:	d00b      	beq.n	8008336 <USBD_GetConfig+0x46>
 800831e:	e012      	b.n	8008346 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3308      	adds	r3, #8
 800832a:	2201      	movs	r2, #1
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f920 	bl	8008574 <USBD_CtlSendData>
        break;
 8008334:	e00c      	b.n	8008350 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3304      	adds	r3, #4
 800833a:	2201      	movs	r2, #1
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f918 	bl	8008574 <USBD_CtlSendData>
        break;
 8008344:	e004      	b.n	8008350 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f8a9 	bl	80084a0 <USBD_CtlError>
        break;
 800834e:	bf00      	nop
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008368:	3b01      	subs	r3, #1
 800836a:	2b02      	cmp	r3, #2
 800836c:	d81e      	bhi.n	80083ac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d004      	beq.n	8008380 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f891 	bl	80084a0 <USBD_CtlError>
        break;
 800837e:	e01a      	b.n	80083b6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f043 0202 	orr.w	r2, r3, #2
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	330c      	adds	r3, #12
 80083a0:	2202      	movs	r2, #2
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f8e5 	bl	8008574 <USBD_CtlSendData>
      break;
 80083aa:	e004      	b.n	80083b6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f876 	bl	80084a0 <USBD_CtlError>
      break;
 80083b4:	bf00      	nop
  }
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	885b      	ldrh	r3, [r3, #2]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d106      	bne.n	80083de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f90b 	bl	80085f4 <USBD_CtlSendStatus>
  }
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f6:	3b01      	subs	r3, #1
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d80b      	bhi.n	8008414 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	885b      	ldrh	r3, [r3, #2]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d10c      	bne.n	800841e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f8f1 	bl	80085f4 <USBD_CtlSendStatus>
      }
      break;
 8008412:	e004      	b.n	800841e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f842 	bl	80084a0 <USBD_CtlError>
      break;
 800841c:	e000      	b.n	8008420 <USBD_ClrFeature+0x3a>
      break;
 800841e:	bf00      	nop
  }
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781a      	ldrb	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	785a      	ldrb	r2, [r3, #1]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	3302      	adds	r3, #2
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b29a      	uxth	r2, r3
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	3303      	adds	r3, #3
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	b29b      	uxth	r3, r3
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	b29b      	uxth	r3, r3
 8008456:	4413      	add	r3, r2
 8008458:	b29a      	uxth	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	b29a      	uxth	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	3305      	adds	r3, #5
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b29b      	uxth	r3, r3
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b29b      	uxth	r3, r3
 8008472:	4413      	add	r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	3306      	adds	r3, #6
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	b29a      	uxth	r2, r3
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	3307      	adds	r3, #7
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	b29b      	uxth	r3, r3
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	b29b      	uxth	r3, r3
 800848e:	4413      	add	r3, r2
 8008490:	b29a      	uxth	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	80da      	strh	r2, [r3, #6]

}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80084aa:	2180      	movs	r1, #128	; 0x80
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb65 	bl	8008b7c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80084b2:	2100      	movs	r1, #0
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fb61 	bl	8008b7c <USBD_LL_StallEP>
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d032      	beq.n	800853e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f834 	bl	8008546 <USBD_GetLen>
 80084de:	4603      	mov	r3, r0
 80084e0:	3301      	adds	r3, #1
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80084ec:	7dfb      	ldrb	r3, [r7, #23]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	75fa      	strb	r2, [r7, #23]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4413      	add	r3, r2
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	7812      	ldrb	r2, [r2, #0]
 80084fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	75fa      	strb	r2, [r7, #23]
 8008504:	461a      	mov	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	4413      	add	r3, r2
 800850a:	2203      	movs	r2, #3
 800850c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800850e:	e012      	b.n	8008536 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	60fa      	str	r2, [r7, #12]
 8008516:	7dfa      	ldrb	r2, [r7, #23]
 8008518:	1c51      	adds	r1, r2, #1
 800851a:	75f9      	strb	r1, [r7, #23]
 800851c:	4611      	mov	r1, r2
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	440a      	add	r2, r1
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	75fa      	strb	r2, [r7, #23]
 800852c:	461a      	mov	r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	2200      	movs	r2, #0
 8008534:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e8      	bne.n	8008510 <USBD_GetString+0x4e>
    }
  }
}
 800853e:	bf00      	nop
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008552:	e005      	b.n	8008560 <USBD_GetLen+0x1a>
  {
    len++;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	3301      	adds	r3, #1
 8008558:	73fb      	strb	r3, [r7, #15]
    buf++;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3301      	adds	r3, #1
 800855e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1f5      	bne.n	8008554 <USBD_GetLen+0xe>
  }

  return len;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr

08008574 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2202      	movs	r2, #2
 8008586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008590:	88fa      	ldrh	r2, [r7, #6]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008596:	88fb      	ldrh	r3, [r7, #6]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	2100      	movs	r1, #0
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fb76 	bl	8008c8e <USBD_LL_Transmit>

  return USBD_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4613      	mov	r3, r2
 80085b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	2100      	movs	r1, #0
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fb64 	bl	8008c8e <USBD_LL_Transmit>

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	2100      	movs	r1, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fb75 	bl	8008cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2204      	movs	r2, #4
 8008600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008604:	2300      	movs	r3, #0
 8008606:	2200      	movs	r2, #0
 8008608:	2100      	movs	r1, #0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fb3f 	bl	8008c8e <USBD_LL_Transmit>

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2205      	movs	r2, #5
 8008626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800862a:	2300      	movs	r3, #0
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb4f 	bl	8008cd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008644:	2200      	movs	r2, #0
 8008646:	490e      	ldr	r1, [pc, #56]	; (8008680 <MX_USB_DEVICE_Init+0x40>)
 8008648:	480e      	ldr	r0, [pc, #56]	; (8008684 <MX_USB_DEVICE_Init+0x44>)
 800864a:	f7fe ff8b 	bl	8007564 <USBD_Init>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008654:	f7f8 fdcc 	bl	80011f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008658:	490b      	ldr	r1, [pc, #44]	; (8008688 <MX_USB_DEVICE_Init+0x48>)
 800865a:	480a      	ldr	r0, [pc, #40]	; (8008684 <MX_USB_DEVICE_Init+0x44>)
 800865c:	f7fe ffad 	bl	80075ba <USBD_RegisterClass>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008666:	f7f8 fdc3 	bl	80011f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800866a:	4806      	ldr	r0, [pc, #24]	; (8008684 <MX_USB_DEVICE_Init+0x44>)
 800866c:	f7fe ffbe 	bl	80075ec <USBD_Start>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008676:	f7f8 fdbb 	bl	80011f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800867a:	bf00      	nop
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000138 	.word	0x20000138
 8008684:	20000250 	.word	0x20000250
 8008688:	20000030 	.word	0x20000030

0800868c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2212      	movs	r2, #18
 800869c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800869e:	4b03      	ldr	r3, [pc, #12]	; (80086ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20000154 	.word	0x20000154

080086b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2204      	movs	r2, #4
 80086c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086c2:	4b03      	ldr	r3, [pc, #12]	; (80086d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	20000168 	.word	0x20000168

080086d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4907      	ldr	r1, [pc, #28]	; (8008708 <USBD_FS_ProductStrDescriptor+0x34>)
 80086ea:	4808      	ldr	r0, [pc, #32]	; (800870c <USBD_FS_ProductStrDescriptor+0x38>)
 80086ec:	f7ff fee9 	bl	80084c2 <USBD_GetString>
 80086f0:	e004      	b.n	80086fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	4904      	ldr	r1, [pc, #16]	; (8008708 <USBD_FS_ProductStrDescriptor+0x34>)
 80086f6:	4805      	ldr	r0, [pc, #20]	; (800870c <USBD_FS_ProductStrDescriptor+0x38>)
 80086f8:	f7ff fee3 	bl	80084c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000514 	.word	0x20000514
 800870c:	08008e38 	.word	0x08008e38

08008710 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	4904      	ldr	r1, [pc, #16]	; (8008730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008720:	4804      	ldr	r0, [pc, #16]	; (8008734 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008722:	f7ff fece 	bl	80084c2 <USBD_GetString>
  return USBD_StrDesc;
 8008726:	4b02      	ldr	r3, [pc, #8]	; (8008730 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20000514 	.word	0x20000514
 8008734:	08008e50 	.word	0x08008e50

08008738 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	6039      	str	r1, [r7, #0]
 8008742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	221a      	movs	r2, #26
 8008748:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800874a:	f000 f843 	bl	80087d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800874e:	4b02      	ldr	r3, [pc, #8]	; (8008758 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	2000016c 	.word	0x2000016c

0800875c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4907      	ldr	r1, [pc, #28]	; (8008790 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008772:	4808      	ldr	r0, [pc, #32]	; (8008794 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008774:	f7ff fea5 	bl	80084c2 <USBD_GetString>
 8008778:	e004      	b.n	8008784 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_ConfigStrDescriptor+0x34>)
 800877e:	4805      	ldr	r0, [pc, #20]	; (8008794 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008780:	f7ff fe9f 	bl	80084c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000514 	.word	0x20000514
 8008794:	08008e64 	.word	0x08008e64

08008798 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d105      	bne.n	80087b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4907      	ldr	r1, [pc, #28]	; (80087cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ae:	4808      	ldr	r0, [pc, #32]	; (80087d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087b0:	f7ff fe87 	bl	80084c2 <USBD_GetString>
 80087b4:	e004      	b.n	80087c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4904      	ldr	r1, [pc, #16]	; (80087cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ba:	4805      	ldr	r0, [pc, #20]	; (80087d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087bc:	f7ff fe81 	bl	80084c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c0:	4b02      	ldr	r3, [pc, #8]	; (80087cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000514 	.word	0x20000514
 80087d0:	08008e70 	.word	0x08008e70

080087d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80087da:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <Get_SerialNum+0x44>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087e0:	4b0e      	ldr	r3, [pc, #56]	; (800881c <Get_SerialNum+0x48>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087e6:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <Get_SerialNum+0x4c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4413      	add	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087fa:	2208      	movs	r2, #8
 80087fc:	4909      	ldr	r1, [pc, #36]	; (8008824 <Get_SerialNum+0x50>)
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 f814 	bl	800882c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008804:	2204      	movs	r2, #4
 8008806:	4908      	ldr	r1, [pc, #32]	; (8008828 <Get_SerialNum+0x54>)
 8008808:	68b8      	ldr	r0, [r7, #8]
 800880a:	f000 f80f 	bl	800882c <IntToUnicode>
  }
}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	1ffff7e8 	.word	0x1ffff7e8
 800881c:	1ffff7ec 	.word	0x1ffff7ec
 8008820:	1ffff7f0 	.word	0x1ffff7f0
 8008824:	2000016e 	.word	0x2000016e
 8008828:	2000017e 	.word	0x2000017e

0800882c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800883e:	2300      	movs	r3, #0
 8008840:	75fb      	strb	r3, [r7, #23]
 8008842:	e027      	b.n	8008894 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	0f1b      	lsrs	r3, r3, #28
 8008848:	2b09      	cmp	r3, #9
 800884a:	d80b      	bhi.n	8008864 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	0f1b      	lsrs	r3, r3, #28
 8008850:	b2da      	uxtb	r2, r3
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	4619      	mov	r1, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	440b      	add	r3, r1
 800885c:	3230      	adds	r2, #48	; 0x30
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e00a      	b.n	800887a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	0f1b      	lsrs	r3, r3, #28
 8008868:	b2da      	uxtb	r2, r3
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	4619      	mov	r1, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	440b      	add	r3, r1
 8008874:	3237      	adds	r2, #55	; 0x37
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	3301      	adds	r3, #1
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	4413      	add	r3, r2
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	3301      	adds	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
 8008894:	7dfa      	ldrb	r2, [r7, #23]
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3d3      	bcc.n	8008844 <IntToUnicode+0x18>
  }
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr
	...

080088a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a0d      	ldr	r2, [pc, #52]	; (80088ec <HAL_PCD_MspInit+0x44>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d113      	bne.n	80088e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80088ba:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <HAL_PCD_MspInit+0x48>)
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	4a0c      	ldr	r2, [pc, #48]	; (80088f0 <HAL_PCD_MspInit+0x48>)
 80088c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088c4:	61d3      	str	r3, [r2, #28]
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <HAL_PCD_MspInit+0x48>)
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	2014      	movs	r0, #20
 80088d8:	f7f8 fec5 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80088dc:	2014      	movs	r0, #20
 80088de:	f7f8 fede 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	40005c00 	.word	0x40005c00
 80088f0:	40021000 	.word	0x40021000

080088f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe feb6 	bl	800767c <USBD_LL_SetupStage>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	440b      	add	r3, r1
 8008938:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	4619      	mov	r1, r3
 8008942:	f7fe fee6 	bl	8007712 <USBD_LL_DataOutStage>
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	440b      	add	r3, r1
 800896e:	333c      	adds	r3, #60	; 0x3c
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	4619      	mov	r1, r3
 8008976:	f7fe ff3d 	bl	80077f4 <USBD_LL_DataInStage>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff f84d 	bl	8007a30 <USBD_LL_SOF>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d001      	beq.n	80089b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089b2:	f7f8 fc1d 	bl	80011f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089bc:	7bfa      	ldrb	r2, [r7, #15]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fffd 	bl	80079c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe ffb6 	bl	800793e <USBD_LL_Reset>
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fff7 	bl	80079de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089f8:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <HAL_PCD_SuspendCallback+0x30>)
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	4a03      	ldr	r2, [pc, #12]	; (8008a0c <HAL_PCD_SuspendCallback+0x30>)
 80089fe:	f043 0306 	orr.w	r3, r3, #6
 8008a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	e000ed00 	.word	0xe000ed00

08008a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fff1 	bl	8007a06 <USBD_LL_Resume>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a34:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a44:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a46:	4a1c      	ldr	r2, [pc, #112]	; (8008ab8 <USBD_LL_Init+0x8c>)
 8008a48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a4a:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a4c:	2208      	movs	r2, #8
 8008a4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a50:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a52:	2202      	movs	r2, #2
 8008a54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a56:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a5c:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a62:	4b14      	ldr	r3, [pc, #80]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a68:	4812      	ldr	r0, [pc, #72]	; (8008ab4 <USBD_LL_Init+0x88>)
 8008a6a:	f7f9 ffcd 	bl	8002a08 <HAL_PCD_Init>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a74:	f7f8 fbbc 	bl	80011f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a7e:	2318      	movs	r3, #24
 8008a80:	2200      	movs	r2, #0
 8008a82:	2100      	movs	r1, #0
 8008a84:	f7fb fc29 	bl	80042da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a8e:	2358      	movs	r3, #88	; 0x58
 8008a90:	2200      	movs	r2, #0
 8008a92:	2180      	movs	r1, #128	; 0x80
 8008a94:	f7fb fc21 	bl	80042da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2181      	movs	r1, #129	; 0x81
 8008aa6:	f7fb fc18 	bl	80042da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	20000714 	.word	0x20000714
 8008ab8:	40005c00 	.word	0x40005c00

08008abc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fa f8a3 	bl	8002c1e <HAL_PCD_Start>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f93c 	bl	8008d5c <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	4603      	mov	r3, r0
 8008b02:	70fb      	strb	r3, [r7, #3]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70bb      	strb	r3, [r7, #2]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b1a:	78bb      	ldrb	r3, [r7, #2]
 8008b1c:	883a      	ldrh	r2, [r7, #0]
 8008b1e:	78f9      	ldrb	r1, [r7, #3]
 8008b20:	f7fa fa1d 	bl	8002f5e <HAL_PCD_EP_Open>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f916 	bl	8008d5c <USBD_Get_USB_Status>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b58:	78fa      	ldrb	r2, [r7, #3]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7fa fa64 	bl	800302a <HAL_PCD_EP_Close>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 f8f7 	bl	8008d5c <USBD_Get_USB_Status>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fa fb0d 	bl	80031ba <HAL_PCD_EP_SetStall>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f8d8 	bl	8008d5c <USBD_Get_USB_Status>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd4:	78fa      	ldrb	r2, [r7, #3]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fa fb4e 	bl	800327a <HAL_PCD_EP_ClrStall>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f8b9 	bl	8008d5c <USBD_Get_USB_Status>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	da0c      	bge.n	8008c2e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	440b      	add	r3, r1
 8008c28:	3302      	adds	r3, #2
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	e00b      	b.n	8008c46 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	440b      	add	r3, r1
 8008c40:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c44:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr

08008c50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fa f950 	bl	8002f14 <HAL_PCD_SetAddress>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f86e 	bl	8008d5c <USBD_Get_USB_Status>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	72fb      	strb	r3, [r7, #11]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cb0:	893b      	ldrh	r3, [r7, #8]
 8008cb2:	7af9      	ldrb	r1, [r7, #11]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	f7fa fa3d 	bl	8003134 <HAL_PCD_EP_Transmit>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f84b 	bl	8008d5c <USBD_Get_USB_Status>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cca:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	607a      	str	r2, [r7, #4]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	72fb      	strb	r3, [r7, #11]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cf6:	893b      	ldrh	r3, [r7, #8]
 8008cf8:	7af9      	ldrb	r1, [r7, #11]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	f7fa f9dd 	bl	80030ba <HAL_PCD_EP_Receive>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 f828 	bl	8008d5c <USBD_Get_USB_Status>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_static_malloc+0x14>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr
 8008d30:	200001cc 	.word	0x200001cc

08008d34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bc80      	pop	{r7}
 8008d44:	4770      	bx	lr

08008d46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d817      	bhi.n	8008da0 <USBD_Get_USB_Status+0x44>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBD_Get_USB_Status+0x1c>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d89 	.word	0x08008d89
 8008d7c:	08008d8f 	.word	0x08008d8f
 8008d80:	08008d95 	.word	0x08008d95
 8008d84:	08008d9b 	.word	0x08008d9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e00b      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e008      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e005      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e002      	b.n	8008da6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008da0:	2302      	movs	r3, #2
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	bf00      	nop
  }
  return usb_status;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop

08008db4 <__libc_init_array>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	2500      	movs	r5, #0
 8008db8:	4e0c      	ldr	r6, [pc, #48]	; (8008dec <__libc_init_array+0x38>)
 8008dba:	4c0d      	ldr	r4, [pc, #52]	; (8008df0 <__libc_init_array+0x3c>)
 8008dbc:	1ba4      	subs	r4, r4, r6
 8008dbe:	10a4      	asrs	r4, r4, #2
 8008dc0:	42a5      	cmp	r5, r4
 8008dc2:	d109      	bne.n	8008dd8 <__libc_init_array+0x24>
 8008dc4:	f000 f822 	bl	8008e0c <_init>
 8008dc8:	2500      	movs	r5, #0
 8008dca:	4e0a      	ldr	r6, [pc, #40]	; (8008df4 <__libc_init_array+0x40>)
 8008dcc:	4c0a      	ldr	r4, [pc, #40]	; (8008df8 <__libc_init_array+0x44>)
 8008dce:	1ba4      	subs	r4, r4, r6
 8008dd0:	10a4      	asrs	r4, r4, #2
 8008dd2:	42a5      	cmp	r5, r4
 8008dd4:	d105      	bne.n	8008de2 <__libc_init_array+0x2e>
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ddc:	4798      	blx	r3
 8008dde:	3501      	adds	r5, #1
 8008de0:	e7ee      	b.n	8008dc0 <__libc_init_array+0xc>
 8008de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008de6:	4798      	blx	r3
 8008de8:	3501      	adds	r5, #1
 8008dea:	e7f2      	b.n	8008dd2 <__libc_init_array+0x1e>
 8008dec:	08008e98 	.word	0x08008e98
 8008df0:	08008e98 	.word	0x08008e98
 8008df4:	08008e98 	.word	0x08008e98
 8008df8:	08008e9c 	.word	0x08008e9c

08008dfc <memset>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4402      	add	r2, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d100      	bne.n	8008e06 <memset+0xa>
 8008e04:	4770      	bx	lr
 8008e06:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0a:	e7f9      	b.n	8008e00 <memset+0x4>

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
