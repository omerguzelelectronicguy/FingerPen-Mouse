
mpu6050 accelometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f70  08008f70  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08008f70  08008f70  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f70  08008f70  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f70  08008f70  00018f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000184  080090fc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a00  080090fc  00020a00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012710  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000298c  00000000  00000000  000328bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  00035f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970e  00000000  00000000  00036ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faef  00000000  00000000  000501de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008735d  00000000  00000000  0005fccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e702a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  000e70a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000184 	.word	0x20000184
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ee4 	.word	0x08008ee4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000188 	.word	0x20000188
 800014c:	08008ee4 	.word	0x08008ee4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_f2iz>:
 8000ba8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bb0:	d30f      	bcc.n	8000bd2 <__aeabi_f2iz+0x2a>
 8000bb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_f2iz+0x30>
 8000bbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bcc:	bf18      	it	ne
 8000bce:	4240      	negne	r0, r0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr
 8000bd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bdc:	d101      	bne.n	8000be2 <__aeabi_f2iz+0x3a>
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	d105      	bne.n	8000bee <__aeabi_f2iz+0x46>
 8000be2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	bf08      	it	eq
 8000be8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <MPU6050_Init>:

float Ax, Ay, Az, Gx, Gy, Gz;


void MPU6050_Init (void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2275      	movs	r2, #117	; 0x75
 8000c0c:	21d0      	movs	r1, #208	; 0xd0
 8000c0e:	4823      	ldr	r0, [pc, #140]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c10:	f001 f9aa 	bl	8001f68 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b68      	cmp	r3, #104	; 0x68
 8000c18:	d13b      	bne.n	8000c92 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	226b      	movs	r2, #107	; 0x6b
 8000c30:	21d0      	movs	r1, #208	; 0xd0
 8000c32:	481a      	ldr	r0, [pc, #104]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c34:	f001 f89e 	bl	8001d74 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	1dbb      	adds	r3, r7, #6
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2219      	movs	r2, #25
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c52:	f001 f88f 	bl	8001d74 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	9302      	str	r3, [sp, #8]
 8000c60:	2301      	movs	r3, #1
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	221c      	movs	r2, #28
 8000c6c:	21d0      	movs	r1, #208	; 0xd0
 8000c6e:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c70:	f001 f880 	bl	8001d74 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8000c74:	2300      	movs	r3, #0
 8000c76:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	1dbb      	adds	r3, r7, #6
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2301      	movs	r3, #1
 8000c88:	221b      	movs	r2, #27
 8000c8a:	21d0      	movs	r1, #208	; 0xd0
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MPU6050_Init+0xa8>)
 8000c8e:	f001 f871 	bl	8001d74 <HAL_I2C_Mem_Write>
	}

}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001e4 	.word	0x200001e4

08000ca0 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2306      	movs	r3, #6
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	223b      	movs	r2, #59	; 0x3b
 8000cb8:	21d0      	movs	r1, #208	; 0xd0
 8000cba:	483f      	ldr	r0, [pc, #252]	; (8000db8 <MPU6050_Read_Accel+0x118>)
 8000cbc:	f001 f954 	bl	8001f68 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000cc0:	783b      	ldrb	r3, [r7, #0]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	787b      	ldrb	r3, [r7, #1]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <MPU6050_Read_Accel+0x11c>)
 8000cd0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000cd2:	78bb      	ldrb	r3, [r7, #2]
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <MPU6050_Read_Accel+0x120>)
 8000ce2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000ce4:	793b      	ldrb	r3, [r7, #4]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <MPU6050_Read_Accel+0x124>)
 8000cf4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW*9.8/16384.0;
 8000cf6:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <MPU6050_Read_Accel+0x11c>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fb79 	bl	80003f4 <__aeabi_i2d>
 8000d02:	a32b      	add	r3, pc, #172	; (adr r3, 8000db0 <MPU6050_Read_Accel+0x110>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fbde 	bl	80004c8 <__aeabi_dmul>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4618      	mov	r0, r3
 8000d12:	4621      	mov	r1, r4
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MPU6050_Read_Accel+0x128>)
 8000d1a:	f7ff fcff 	bl	800071c <__aeabi_ddiv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	4618      	mov	r0, r3
 8000d24:	4621      	mov	r1, r4
 8000d26:	f7ff fde1 	bl	80008ec <__aeabi_d2f>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <MPU6050_Read_Accel+0x12c>)
 8000d2e:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW*9.8/16384.0;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MPU6050_Read_Accel+0x120>)
 8000d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fb5c 	bl	80003f4 <__aeabi_i2d>
 8000d3c:	a31c      	add	r3, pc, #112	; (adr r3, 8000db0 <MPU6050_Read_Accel+0x110>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fbc1 	bl	80004c8 <__aeabi_dmul>
 8000d46:	4603      	mov	r3, r0
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MPU6050_Read_Accel+0x128>)
 8000d54:	f7ff fce2 	bl	800071c <__aeabi_ddiv>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	4621      	mov	r1, r4
 8000d60:	f7ff fdc4 	bl	80008ec <__aeabi_d2f>
 8000d64:	4602      	mov	r2, r0
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MPU6050_Read_Accel+0x130>)
 8000d68:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW*9.8/16384.0;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MPU6050_Read_Accel+0x124>)
 8000d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb3f 	bl	80003f4 <__aeabi_i2d>
 8000d76:	a30e      	add	r3, pc, #56	; (adr r3, 8000db0 <MPU6050_Read_Accel+0x110>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	f7ff fba4 	bl	80004c8 <__aeabi_dmul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	4618      	mov	r0, r3
 8000d86:	4621      	mov	r1, r4
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MPU6050_Read_Accel+0x128>)
 8000d8e:	f7ff fcc5 	bl	800071c <__aeabi_ddiv>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	4618      	mov	r0, r3
 8000d98:	4621      	mov	r1, r4
 8000d9a:	f7ff fda7 	bl	80008ec <__aeabi_d2f>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MPU6050_Read_Accel+0x134>)
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	f3af 8000 	nop.w
 8000db0:	9999999a 	.word	0x9999999a
 8000db4:	40239999 	.word	0x40239999
 8000db8:	200001e4 	.word	0x200001e4
 8000dbc:	200001bc 	.word	0x200001bc
 8000dc0:	200001be 	.word	0x200001be
 8000dc4:	200001c0 	.word	0x200001c0
 8000dc8:	40d00000 	.word	0x40d00000
 8000dcc:	20000240 	.word	0x20000240
 8000dd0:	20000238 	.word	0x20000238
 8000dd4:	20000244 	.word	0x20000244

08000dd8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2306      	movs	r3, #6
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	463b      	mov	r3, r7
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	2243      	movs	r2, #67	; 0x43
 8000df0:	21d0      	movs	r1, #208	; 0xd0
 8000df2:	482b      	ldr	r0, [pc, #172]	; (8000ea0 <MPU6050_Read_Gyro+0xc8>)
 8000df4:	f001 f8b8 	bl	8001f68 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000df8:	783b      	ldrb	r3, [r7, #0]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	787b      	ldrb	r3, [r7, #1]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MPU6050_Read_Gyro+0xcc>)
 8000e08:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000e0a:	78bb      	ldrb	r3, [r7, #2]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <MPU6050_Read_Gyro+0xd0>)
 8000e1a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	797b      	ldrb	r3, [r7, #5]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MPU6050_Read_Gyro+0xd4>)
 8000e2c:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/
	Gx = (Gyro_X_RAW + 100)/divider[divider_level];
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MPU6050_Read_Gyro+0xcc>)
 8000e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e34:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MPU6050_Read_Gyro+0xd8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	491d      	ldr	r1, [pc, #116]	; (8000eb4 <MPU6050_Read_Gyro+0xdc>)
 8000e3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe5a 	bl	8000b00 <__aeabi_i2f>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MPU6050_Read_Gyro+0xe0>)
 8000e50:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW	/		divider[divider_level];
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MPU6050_Read_Gyro+0xd0>)
 8000e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MPU6050_Read_Gyro+0xd8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MPU6050_Read_Gyro+0xdc>)
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe49 	bl	8000b00 <__aeabi_i2f>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MPU6050_Read_Gyro+0xe4>)
 8000e72:	601a      	str	r2, [r3, #0]
	Gz = (Gyro_Z_RAW + 100)/divider[divider_level];
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MPU6050_Read_Gyro+0xd4>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MPU6050_Read_Gyro+0xd8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <MPU6050_Read_Gyro+0xdc>)
 8000e84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe37 	bl	8000b00 <__aeabi_i2f>
 8000e92:	4602      	mov	r2, r0
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MPU6050_Read_Gyro+0xe8>)
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001e4 	.word	0x200001e4
 8000ea4:	200001c2 	.word	0x200001c2
 8000ea8:	200001c4 	.word	0x200001c4
 8000eac:	200001c6 	.word	0x200001c6
 8000eb0:	2000001c 	.word	0x2000001c
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	200001e0 	.word	0x200001e0
 8000ebc:	2000023c 	.word	0x2000023c
 8000ec0:	20000248 	.word	0x20000248

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fade 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f912 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f998 	bl	8001204 <MX_GPIO_Init>
  HAL_Delay (1000);//to solve the reset issue
 8000ed4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed8:	f000 fb38 	bl	800154c <HAL_Delay>
  MX_I2C1_Init();
 8000edc:	f000 f964 	bl	80011a8 <MX_I2C1_Init>
  HAL_Delay (100);//to solve the reset issue
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f000 fb33 	bl	800154c <HAL_Delay>
  MX_USB_DEVICE_Init();
 8000ee6:	f007 fc17 	bl	8008718 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay (100);//to solve the reset issue
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f000 fb2e 	bl	800154c <HAL_Delay>
  MPU6050_Init();
 8000ef0:	f7ff fe80 	bl	8000bf4 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_Accel();
 8000ef4:	f7ff fed4 	bl	8000ca0 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000ef8:	f7ff ff6e 	bl	8000dd8 <MPU6050_Read_Gyro>

	mousehid.mouse_y = -Gz;
 8000efc:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <main+0x1fc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe4f 	bl	8000ba8 <__aeabi_f2iz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b25a      	sxtb	r2, r3
 8000f0e:	4b6d      	ldr	r3, [pc, #436]	; (80010c4 <main+0x200>)
 8000f10:	709a      	strb	r2, [r3, #2]
	mousehid.mouse_x = Gy;
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <main+0x204>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe46 	bl	8000ba8 <__aeabi_f2iz>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <main+0x200>)
 8000f22:	705a      	strb	r2, [r3, #1]

	buttonstate = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000f24:	2120      	movs	r1, #32
 8000f26:	4869      	ldr	r0, [pc, #420]	; (80010cc <main+0x208>)
 8000f28:	f000 fd9a 	bl	8001a60 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <main+0x20c>)
 8000f32:	601a      	str	r2, [r3, #0]
	right_click = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	4865      	ldr	r0, [pc, #404]	; (80010cc <main+0x208>)
 8000f38:	f000 fd92 	bl	8001a60 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <main+0x210>)
 8000f42:	601a      	str	r2, [r3, #0]
	thirdbutton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	4861      	ldr	r0, [pc, #388]	; (80010cc <main+0x208>)
 8000f48:	f000 fd8a 	bl	8001a60 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <main+0x214>)
 8000f52:	601a      	str	r2, [r3, #0]

	if (buttonstate != oldbuttonstate )
 8000f54:	4b5e      	ldr	r3, [pc, #376]	; (80010d0 <main+0x20c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b60      	ldr	r3, [pc, #384]	; (80010dc <main+0x218>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d00e      	beq.n	8000f7e <main+0xba>
	{
	  mousehid.button = buttonstate;  // left click =1, right click =2
 8000f60:	4b5b      	ldr	r3, [pc, #364]	; (80010d0 <main+0x20c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <main+0x200>)
 8000f68:	701a      	strb	r2, [r3, #0]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	4955      	ldr	r1, [pc, #340]	; (80010c4 <main+0x200>)
 8000f6e:	485c      	ldr	r0, [pc, #368]	; (80010e0 <main+0x21c>)
 8000f70:	f006 faf0 	bl	8007554 <USBD_HID_SendReport>
	  oldbuttonstate = buttonstate;
 8000f74:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <main+0x20c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a58      	ldr	r2, [pc, #352]	; (80010dc <main+0x218>)
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e09b      	b.n	80010b6 <main+0x1f2>
	}else if(right_click != oldright_click){
 8000f7e:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <main+0x210>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <main+0x220>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d014      	beq.n	8000fb4 <main+0xf0>
		if(right_click ==1){
 8000f8a:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <main+0x210>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d103      	bne.n	8000f9a <main+0xd6>
			mousehid.button = 2;
 8000f92:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <main+0x200>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	e002      	b.n	8000fa0 <main+0xdc>
		}else{
			mousehid.button = 0;
 8000f9a:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <main+0x200>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
		}
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4948      	ldr	r1, [pc, #288]	; (80010c4 <main+0x200>)
 8000fa4:	484e      	ldr	r0, [pc, #312]	; (80010e0 <main+0x21c>)
 8000fa6:	f006 fad5 	bl	8007554 <USBD_HID_SendReport>
		oldright_click =right_click;
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <main+0x210>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <main+0x220>)
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e080      	b.n	80010b6 <main+0x1f2>
	}else if(thirdbutton){
 8000fb4:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <main+0x214>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d077      	beq.n	80010ac <main+0x1e8>

		HAL_Delay (300);  // wait for a while
 8000fbc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fc0:	f000 fac4 	bl	800154c <HAL_Delay>
		thirdbutton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	4841      	ldr	r0, [pc, #260]	; (80010cc <main+0x208>)
 8000fc8:	f000 fd4a 	bl	8001a60 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <main+0x214>)
 8000fd2:	601a      	str	r2, [r3, #0]
		if(thirdbutton){// if it is still pressed it means scroll if not it means just change sensitivity.
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <main+0x214>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d05a      	beq.n	8001092 <main+0x1ce>
			mousehid.button = 0;
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <main+0x200>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
			mousehid.mouse_x = 0;
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <main+0x200>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	705a      	strb	r2, [r3, #1]
			mousehid.mouse_y = 0;
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <main+0x200>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	709a      	strb	r2, [r3, #2]
			while(thirdbutton){
 8000fee:	e048      	b.n	8001082 <main+0x1be>
				if(Accel_Z_RAW < 128 || Accel_Z_RAW > -128 ){
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <main+0x224>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff8:	dd05      	ble.n	8001006 <main+0x142>
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <main+0x224>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8001004:	db02      	blt.n	800100c <main+0x148>
					accumulate = 0;
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <main+0x228>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
				}
				accumulate = accumulate + Accel_Z_RAW / 256;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <main+0x224>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	2b00      	cmp	r3, #0
 8001014:	da00      	bge.n	8001018 <main+0x154>
 8001016:	33ff      	adds	r3, #255	; 0xff
 8001018:	121b      	asrs	r3, r3, #8
 800101a:	b21b      	sxth	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <main+0x228>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a31      	ldr	r2, [pc, #196]	; (80010ec <main+0x228>)
 8001026:	6013      	str	r3, [r2, #0]
				if (accumulate > 20){
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <main+0x228>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b14      	cmp	r3, #20
 800102e:	dd0b      	ble.n	8001048 <main+0x184>
					mousehid.wheel = 1;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <main+0x200>)
 8001032:	2201      	movs	r2, #1
 8001034:	70da      	strb	r2, [r3, #3]
					accumulate = 0;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <main+0x228>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
					USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 800103c:	2204      	movs	r2, #4
 800103e:	4921      	ldr	r1, [pc, #132]	; (80010c4 <main+0x200>)
 8001040:	4827      	ldr	r0, [pc, #156]	; (80010e0 <main+0x21c>)
 8001042:	f006 fa87 	bl	8007554 <USBD_HID_SendReport>
 8001046:	e00f      	b.n	8001068 <main+0x1a4>
				}else if(accumulate < -16){
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <main+0x228>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f113 0f10 	cmn.w	r3, #16
 8001050:	da0a      	bge.n	8001068 <main+0x1a4>
					mousehid.wheel = -1;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <main+0x200>)
 8001054:	22ff      	movs	r2, #255	; 0xff
 8001056:	70da      	strb	r2, [r3, #3]
					accumulate = 0;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <main+0x228>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
					USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 800105e:	2204      	movs	r2, #4
 8001060:	4918      	ldr	r1, [pc, #96]	; (80010c4 <main+0x200>)
 8001062:	481f      	ldr	r0, [pc, #124]	; (80010e0 <main+0x21c>)
 8001064:	f006 fa76 	bl	8007554 <USBD_HID_SendReport>
				}
				thirdbutton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	4818      	ldr	r0, [pc, #96]	; (80010cc <main+0x208>)
 800106c:	f000 fcf8 	bl	8001a60 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <main+0x214>)
 8001076:	601a      	str	r2, [r3, #0]
				MPU6050_Read_Accel();
 8001078:	f7ff fe12 	bl	8000ca0 <MPU6050_Read_Accel>
				HAL_Delay(50);
 800107c:	2032      	movs	r0, #50	; 0x32
 800107e:	f000 fa65 	bl	800154c <HAL_Delay>
			while(thirdbutton){
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <main+0x214>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1b2      	bne.n	8000ff0 <main+0x12c>
			}
			mousehid.wheel = 0;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <main+0x200>)
 800108c:	2200      	movs	r2, #0
 800108e:	70da      	strb	r2, [r3, #3]
 8001090:	e011      	b.n	80010b6 <main+0x1f2>
		}else{
			divider_level = divider_level + 1;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <main+0x22c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <main+0x22c>)
 800109a:	6013      	str	r3, [r2, #0]
			if(divider_level == 7){
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <main+0x22c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b07      	cmp	r3, #7
 80010a2:	d108      	bne.n	80010b6 <main+0x1f2>
				divider_level= 0;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <main+0x22c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e004      	b.n	80010b6 <main+0x1f2>
			}
		}
	}else{
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 80010ac:	2204      	movs	r2, #4
 80010ae:	4905      	ldr	r1, [pc, #20]	; (80010c4 <main+0x200>)
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <main+0x21c>)
 80010b2:	f006 fa4f 	bl	8007554 <USBD_HID_SendReport>
	}


	HAL_Delay (10);  // wait for a while
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 fa48 	bl	800154c <HAL_Delay>
	MPU6050_Read_Accel();
 80010bc:	e71a      	b.n	8000ef4 <main+0x30>
 80010be:	bf00      	nop
 80010c0:	20000248 	.word	0x20000248
 80010c4:	200001a0 	.word	0x200001a0
 80010c8:	2000023c 	.word	0x2000023c
 80010cc:	40010800 	.word	0x40010800
 80010d0:	200001a4 	.word	0x200001a4
 80010d4:	200001a8 	.word	0x200001a8
 80010d8:	200001ac 	.word	0x200001ac
 80010dc:	200001b0 	.word	0x200001b0
 80010e0:	20000250 	.word	0x20000250
 80010e4:	200001b4 	.word	0x200001b4
 80010e8:	200001c0 	.word	0x200001c0
 80010ec:	200001b8 	.word	0x200001b8
 80010f0:	2000001c 	.word	0x2000001c

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 fee6 	bl	8008ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001124:	2301      	movs	r3, #1
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001132:	2301      	movs	r3, #1
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001140:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f974 	bl	8004438 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001156:	f000 f8b7 	bl	80012c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fbde 	bl	8004938 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001182:	f000 f8a1 	bl	80012c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001186:	2310      	movs	r3, #16
 8001188:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f003 fd59 	bl	8004c48 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800119c:	f000 f894 	bl	80012c8 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	; 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_I2C1_Init+0x54>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_I2C1_Init+0x58>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e6:	f000 fc8d 	bl	8001b04 <HAL_I2C_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 f86a 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001e4 	.word	0x200001e4
 80011fc:	40005400 	.word	0x40005400
 8001200:	000186a0 	.word	0x000186a0

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_GPIO_Init+0xb4>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <MX_GPIO_Init+0xb4>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MX_GPIO_Init+0xb4>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_GPIO_Init+0xb4>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <MX_GPIO_Init+0xb4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_GPIO_Init+0xb4>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_GPIO_Init+0xb4>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <MX_GPIO_Init+0xb4>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_GPIO_Init+0xb4>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2110      	movs	r1, #16
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <MX_GPIO_Init+0xb8>)
 8001266:	f000 fc12 	bl	8001a8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800126a:	23e0      	movs	r3, #224	; 0xe0
 800126c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_GPIO_Init+0xbc>)
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_GPIO_Init+0xc0>)
 800127e:	f000 fa95 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001282:	2310      	movs	r3, #16
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2302      	movs	r3, #2
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	4619      	mov	r1, r3
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <MX_GPIO_Init+0xb8>)
 800129a:	f000 fa87 	bl	80017ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2017      	movs	r0, #23
 80012a4:	f000 fa4b 	bl	800173e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a8:	2017      	movs	r0, #23
 80012aa:	f000 fa64 	bl	8001776 <HAL_NVIC_EnableIRQ>

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	10210000 	.word	0x10210000
 80012c4:	40010800 	.word	0x40010800

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ce:	e7fe      	b.n	80012ce <Error_Handler+0x6>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_MspInit+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x5c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x60>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_MspInit+0x60>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000

08001334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_I2C_MspInit+0x70>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d123      	bne.n	800139c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_I2C_MspInit+0x74>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <HAL_I2C_MspInit+0x74>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_I2C_MspInit+0x74>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800136c:	23c0      	movs	r3, #192	; 0xc0
 800136e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001370:	2312      	movs	r3, #18
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4619      	mov	r1, r3
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <HAL_I2C_MspInit+0x78>)
 8001380:	f000 fa14 	bl	80017ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_I2C_MspInit+0x74>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_I2C_MspInit+0x74>)
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	61d3      	str	r3, [r2, #28]
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_I2C_MspInit+0x74>)
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40005400 	.word	0x40005400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010c00 	.word	0x40010c00

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 f88d 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001406:	f001 fc9c 	bl	8002d42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000714 	.word	0x20000714

08001414 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001418:	2020      	movs	r0, #32
 800141a:	f000 fb51 	bl	8001ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800141e:	2040      	movs	r0, #64	; 0x40
 8001420:	f000 fb4e 	bl	8001ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001424:	2080      	movs	r0, #128	; 0x80
 8001426:	f000 fb4b 	bl	8001ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}

0800142e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	; (8001474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	; (8001480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001462:	f7ff ffe4 	bl	800142e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f007 fd11 	bl	8008e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146a:	f7ff fd2b 	bl	8000ec4 <main>
  bx lr
 800146e:	4770      	bx	lr
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001478:	08008f78 	.word	0x08008f78
  ldr r2, =_sbss
 800147c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001480:	20000a00 	.word	0x20000a00

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_Init+0x28>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_Init+0x28>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f945 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff ff14 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f95d 	bl	8001792 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 f925 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000020 	.word	0x20000020
 800150c:	20000028 	.word	0x20000028
 8001510:	20000024 	.word	0x20000024

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x1c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x20>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_IncTick+0x20>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000028 	.word	0x20000028
 8001534:	2000024c 	.word	0x2000024c

08001538 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <HAL_GetTick+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	2000024c 	.word	0x2000024c

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fff0 	bl	8001538 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_Delay+0x40>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffe0 	bl	8001538 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000028 	.word	0x20000028

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <__NVIC_EnableIRQ+0x34>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff2d 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff42 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff35 	bl	80015f4 <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e127      	b.n	8001a10 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8116 	bne.w	8001a0a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d034      	beq.n	8001850 <HAL_GPIO_Init+0xa4>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d80d      	bhi.n	8001806 <HAL_GPIO_Init+0x5a>
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d02b      	beq.n	8001846 <HAL_GPIO_Init+0x9a>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d804      	bhi.n	80017fc <HAL_GPIO_Init+0x50>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d031      	beq.n	800185a <HAL_GPIO_Init+0xae>
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d01c      	beq.n	8001834 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fa:	e048      	b.n	800188e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d043      	beq.n	8001888 <HAL_GPIO_Init+0xdc>
 8001800:	2b11      	cmp	r3, #17
 8001802:	d01b      	beq.n	800183c <HAL_GPIO_Init+0x90>
          break;
 8001804:	e043      	b.n	800188e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001806:	4a89      	ldr	r2, [pc, #548]	; (8001a2c <HAL_GPIO_Init+0x280>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d026      	beq.n	800185a <HAL_GPIO_Init+0xae>
 800180c:	4a87      	ldr	r2, [pc, #540]	; (8001a2c <HAL_GPIO_Init+0x280>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d806      	bhi.n	8001820 <HAL_GPIO_Init+0x74>
 8001812:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_GPIO_Init+0x284>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d020      	beq.n	800185a <HAL_GPIO_Init+0xae>
 8001818:	4a86      	ldr	r2, [pc, #536]	; (8001a34 <HAL_GPIO_Init+0x288>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01d      	beq.n	800185a <HAL_GPIO_Init+0xae>
          break;
 800181e:	e036      	b.n	800188e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001820:	4a85      	ldr	r2, [pc, #532]	; (8001a38 <HAL_GPIO_Init+0x28c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0xae>
 8001826:	4a85      	ldr	r2, [pc, #532]	; (8001a3c <HAL_GPIO_Init+0x290>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d016      	beq.n	800185a <HAL_GPIO_Init+0xae>
 800182c:	4a84      	ldr	r2, [pc, #528]	; (8001a40 <HAL_GPIO_Init+0x294>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0xae>
          break;
 8001832:	e02c      	b.n	800188e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e028      	b.n	800188e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	3304      	adds	r3, #4
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e023      	b.n	800188e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	3308      	adds	r3, #8
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e01e      	b.n	800188e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	330c      	adds	r3, #12
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e019      	b.n	800188e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001862:	2304      	movs	r3, #4
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e012      	b.n	800188e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	611a      	str	r2, [r3, #16]
          break;
 800187a:	e008      	b.n	800188e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	615a      	str	r2, [r3, #20]
          break;
 8001886:	e002      	b.n	800188e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2bff      	cmp	r3, #255	; 0xff
 8001892:	d801      	bhi.n	8001898 <HAL_GPIO_Init+0xec>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e001      	b.n	800189c <HAL_GPIO_Init+0xf0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3304      	adds	r3, #4
 800189c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2bff      	cmp	r3, #255	; 0xff
 80018a2:	d802      	bhi.n	80018aa <HAL_GPIO_Init+0xfe>
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x104>
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3b08      	subs	r3, #8
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	210f      	movs	r1, #15
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	401a      	ands	r2, r3
 80018c2:	6a39      	ldr	r1, [r7, #32]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	431a      	orrs	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8096 	beq.w	8001a0a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018de:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_GPIO_Init+0x298>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <HAL_GPIO_Init+0x298>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6193      	str	r3, [r2, #24]
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <HAL_GPIO_Init+0x298>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f6:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x29c>)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4b      	ldr	r2, [pc, #300]	; (8001a4c <HAL_GPIO_Init+0x2a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x19e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4a      	ldr	r2, [pc, #296]	; (8001a50 <HAL_GPIO_Init+0x2a4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x19a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_GPIO_Init+0x2a8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x196>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <HAL_GPIO_Init+0x2ac>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x192>
 800193a:	2303      	movs	r3, #3
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x1a0>
 800193e:	2304      	movs	r3, #4
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x1a0>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x1a0>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x1a0>
 800194a:	2300      	movs	r3, #0
 800194c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195c:	493a      	ldr	r1, [pc, #232]	; (8001a48 <HAL_GPIO_Init+0x29c>)
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4938      	ldr	r1, [pc, #224]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	43db      	mvns	r3, r3
 800198c:	4933      	ldr	r1, [pc, #204]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 800198e:	4013      	ands	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d006      	beq.n	80019ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	492e      	ldr	r1, [pc, #184]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
 80019aa:	e006      	b.n	80019ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4924      	ldr	r1, [pc, #144]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	43db      	mvns	r3, r3
 80019dc:	491f      	ldr	r1, [pc, #124]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019de:	4013      	ands	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	491a      	ldr	r1, [pc, #104]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]
 80019fa:	e006      	b.n	8001a0a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4915      	ldr	r1, [pc, #84]	; (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f47f aed0 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001a20:	bf00      	nop
 8001a22:	372c      	adds	r7, #44	; 0x2c
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	10210000 	.word	0x10210000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	10120000 	.word	0x10120000
 8001a38:	10310000 	.word	0x10310000
 8001a3c:	10320000 	.word	0x10320000
 8001a40:	10220000 	.word	0x10220000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40011000 	.word	0x40011000
 8001a58:	40011400 	.word	0x40011400
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e001      	b.n	8001a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	807b      	strh	r3, [r7, #2]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9e:	787b      	ldrb	r3, [r7, #1]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa4:	887a      	ldrh	r2, [r7, #2]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aaa:	e003      	b.n	8001ab4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	041a      	lsls	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f806 	bl	8001af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e11f      	b.n	8001d56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc02 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b68:	f003 f83c 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8001b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a7b      	ldr	r2, [pc, #492]	; (8001d60 <HAL_I2C_Init+0x25c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d807      	bhi.n	8001b88 <HAL_I2C_Init+0x84>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a7a      	ldr	r2, [pc, #488]	; (8001d64 <HAL_I2C_Init+0x260>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bf94      	ite	ls
 8001b80:	2301      	movls	r3, #1
 8001b82:	2300      	movhi	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e006      	b.n	8001b96 <HAL_I2C_Init+0x92>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a77      	ldr	r2, [pc, #476]	; (8001d68 <HAL_I2C_Init+0x264>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bf94      	ite	ls
 8001b90:	2301      	movls	r3, #1
 8001b92:	2300      	movhi	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0db      	b.n	8001d56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4a72      	ldr	r2, [pc, #456]	; (8001d6c <HAL_I2C_Init+0x268>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0c9b      	lsrs	r3, r3, #18
 8001ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a64      	ldr	r2, [pc, #400]	; (8001d60 <HAL_I2C_Init+0x25c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d802      	bhi.n	8001bd8 <HAL_I2C_Init+0xd4>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	e009      	b.n	8001bec <HAL_I2C_Init+0xe8>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_I2C_Init+0x26c>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	3301      	adds	r3, #1
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4956      	ldr	r1, [pc, #344]	; (8001d60 <HAL_I2C_Init+0x25c>)
 8001c08:	428b      	cmp	r3, r1
 8001c0a:	d80d      	bhi.n	8001c28 <HAL_I2C_Init+0x124>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e59      	subs	r1, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	bf38      	it	cc
 8001c24:	2304      	movcc	r3, #4
 8001c26:	e04f      	b.n	8001cc8 <HAL_I2C_Init+0x1c4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d111      	bne.n	8001c54 <HAL_I2C_Init+0x150>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	440b      	add	r3, r1
 8001c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	e012      	b.n	8001c7a <HAL_I2C_Init+0x176>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	0099      	lsls	r1, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Init+0x17e>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e022      	b.n	8001cc8 <HAL_I2C_Init+0x1c4>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10e      	bne.n	8001ca8 <HAL_I2C_Init+0x1a4>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e58      	subs	r0, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6859      	ldr	r1, [r3, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	440b      	add	r3, r1
 8001c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca6:	e00f      	b.n	8001cc8 <HAL_I2C_Init+0x1c4>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	0099      	lsls	r1, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	6809      	ldr	r1, [r1, #0]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6911      	ldr	r1, [r2, #16]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68d2      	ldr	r2, [r2, #12]
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	000186a0 	.word	0x000186a0
 8001d64:	001e847f 	.word	0x001e847f
 8001d68:	003d08ff 	.word	0x003d08ff
 8001d6c:	431bde83 	.word	0x431bde83
 8001d70:	10624dd3 	.word	0x10624dd3

08001d74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d8e:	f7ff fbd3 	bl	8001538 <HAL_GetTick>
 8001d92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	f040 80d9 	bne.w	8001f54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2319      	movs	r3, #25
 8001da8:	2201      	movs	r2, #1
 8001daa:	496d      	ldr	r1, [pc, #436]	; (8001f60 <HAL_I2C_Mem_Write+0x1ec>)
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fcbb 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0cc      	b.n	8001f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Mem_Write+0x56>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e0c5      	b.n	8001f56 <HAL_I2C_Mem_Write+0x1e2>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d007      	beq.n	8001df0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2221      	movs	r2, #33	; 0x21
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_I2C_Mem_Write+0x1f0>)
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e32:	88f8      	ldrh	r0, [r7, #6]
 8001e34:	893a      	ldrh	r2, [r7, #8]
 8001e36:	8979      	ldrh	r1, [r7, #10]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4603      	mov	r3, r0
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 faf2 	bl	800242c <I2C_RequestMemoryWrite>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d052      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e081      	b.n	8001f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fd3c 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d107      	bne.n	8001e7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06b      	b.n	8001f56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d11b      	bne.n	8001ef4 <HAL_I2C_Mem_Write+0x180>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d017      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1aa      	bne.n	8001e52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fd28 	bl	8002956 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00d      	beq.n	8001f28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d107      	bne.n	8001f24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e016      	b.n	8001f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	00100002 	.word	0x00100002
 8001f64:	ffff0000 	.word	0xffff0000

08001f68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	817b      	strh	r3, [r7, #10]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	813b      	strh	r3, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f86:	f7ff fad7 	bl	8001538 <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	f040 823d 	bne.w	8002414 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2319      	movs	r3, #25
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4981      	ldr	r1, [pc, #516]	; (80021a8 <HAL_I2C_Mem_Read+0x240>)
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fbbf 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e230      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Mem_Read+0x5a>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e229      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d007      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2222      	movs	r2, #34	; 0x22
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a61      	ldr	r2, [pc, #388]	; (80021ac <HAL_I2C_Mem_Read+0x244>)
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800202a:	88f8      	ldrh	r0, [r7, #6]
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	4603      	mov	r3, r0
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fa8c 	bl	8002558 <I2C_RequestMemoryRead>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1e5      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	2b00      	cmp	r3, #0
 8002050:	d113      	bne.n	800207a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e1b9      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207e:	2b01      	cmp	r3, #1
 8002080:	d11d      	bne.n	80020be <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020ba:	b662      	cpsie	i
 80020bc:	e197      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d11d      	bne.n	8002102 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020d6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020fe:	b662      	cpsie	i
 8002100:	e175      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002110:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002128:	e161      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	2b03      	cmp	r3, #3
 8002130:	f200 811a 	bhi.w	8002368 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	2b01      	cmp	r3, #1
 800213a:	d123      	bne.n	8002184 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fc49 	bl	80029d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e162      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002182:	e134      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b02      	cmp	r3, #2
 800218a:	d150      	bne.n	800222e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	2200      	movs	r2, #0
 8002194:	4906      	ldr	r1, [pc, #24]	; (80021b0 <HAL_I2C_Mem_Read+0x248>)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fac6 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e137      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
 80021a6:	bf00      	nop
 80021a8:	00100002 	.word	0x00100002
 80021ac:	ffff0000 	.word	0xffff0000
 80021b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021f8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800222c:	e0df      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2200      	movs	r2, #0
 8002236:	497a      	ldr	r1, [pc, #488]	; (8002420 <HAL_I2C_Mem_Read+0x4b8>)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fa75 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0e6      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800228c:	4b65      	ldr	r3, [pc, #404]	; (8002424 <HAL_I2C_Mem_Read+0x4bc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	08db      	lsrs	r3, r3, #3
 8002292:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_I2C_Mem_Read+0x4c0>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	0a1a      	lsrs	r2, r3, #8
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00da      	lsls	r2, r3, #3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d117      	bne.n	80022e2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80022d4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e099      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d1da      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002332:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002366:	e042      	b.n	80023ee <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fb33 	bl	80029d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e04c      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d118      	bne.n	80023ee <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f47f ae99 	bne.w	800212a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	00010004 	.word	0x00010004
 8002424:	20000020 	.word	0x20000020
 8002428:	14f8b589 	.word	0x14f8b589

0800242c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	2200      	movs	r2, #0
 800245e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f960 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247c:	d103      	bne.n	8002486 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e05f      	b.n	800254a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800248a:	897b      	ldrh	r3, [r7, #10]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	492d      	ldr	r1, [pc, #180]	; (8002554 <I2C_RequestMemoryWrite+0x128>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f998 	bl	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e04c      	b.n	800254a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fa02 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d107      	bne.n	80024ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e02b      	b.n	800254a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024f8:	893b      	ldrh	r3, [r7, #8]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	e021      	b.n	8002548 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002504:	893b      	ldrh	r3, [r7, #8]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	b29b      	uxth	r3, r3
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	6a39      	ldr	r1, [r7, #32]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f9dc 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b04      	cmp	r3, #4
 8002528:	d107      	bne.n	800253a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e005      	b.n	800254a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800253e:	893b      	ldrh	r3, [r7, #8]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	00010002 	.word	0x00010002

08002558 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	461a      	mov	r2, r3
 8002566:	4603      	mov	r3, r0
 8002568:	817b      	strh	r3, [r7, #10]
 800256a:	460b      	mov	r3, r1
 800256c:	813b      	strh	r3, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002580:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	2200      	movs	r2, #0
 800259a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f8c2 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d103      	bne.n	80025c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0aa      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	4952      	ldr	r1, [pc, #328]	; (8002724 <I2C_RequestMemoryRead+0x1cc>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f8fa 	bl	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e097      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f964 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b04      	cmp	r3, #4
 8002618:	d107      	bne.n	800262a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e076      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	e021      	b.n	8002684 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002640:	893b      	ldrh	r3, [r7, #8]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	b29b      	uxth	r3, r3
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	6a39      	ldr	r1, [r7, #32]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f93e 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b04      	cmp	r3, #4
 8002664:	d107      	bne.n	8002676 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e050      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800267a:	893b      	ldrh	r3, [r7, #8]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	6a39      	ldr	r1, [r7, #32]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f923 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2b04      	cmp	r3, #4
 800269a:	d107      	bne.n	80026ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e035      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f82b 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d103      	bne.n	80026f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e013      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	6a3a      	ldr	r2, [r7, #32]
 8002708:	4906      	ldr	r1, [pc, #24]	; (8002724 <I2C_RequestMemoryRead+0x1cc>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f863 	bl	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	00010002 	.word	0x00010002

08002728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	e025      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d021      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7fe fef9 	bl	8001538 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e023      	b.n	80027ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10d      	bne.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	e00c      	b.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d0b6      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e4:	e051      	b.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f4:	d123      	bne.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800280e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e046      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d021      	beq.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7fe fe77 	bl	8001538 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e020      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10c      	bne.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e00b      	b.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d18d      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e0:	e02d      	b.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f8ce 	bl	8002a84 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e02d      	b.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d021      	beq.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fe1d 	bl	8001538 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e007      	b.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d1ca      	bne.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002962:	e02d      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f88d 	bl	8002a84 <I2C_IsAcknowledgeFailed>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e02d      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d021      	beq.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297c:	f7fe fddc 	bl	8001538 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d1ca      	bne.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029e4:	e042      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d119      	bne.n	8002a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0210 	mvn.w	r2, #16
 80029fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e029      	b.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a28:	f7fe fd86 	bl	8001538 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d302      	bcc.n	8002a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e007      	b.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d1b5      	bne.n	80029e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d11b      	bne.n	8002ad4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	b08b      	sub	sp, #44	; 0x2c
 8002ae4:	af06      	add	r7, sp, #24
 8002ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0fd      	b.n	8002cee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f005 ff3a 	bl	8008980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 f971 	bl	8004e00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	687e      	ldr	r6, [r7, #4]
 8002b26:	466d      	mov	r5, sp
 8002b28:	f106 0410 	add.w	r4, r6, #16
 8002b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	1d33      	adds	r3, r6, #4
 8002b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f002 f93b 	bl	8004db4 <USB_CoreInit>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0ce      	b.n	8002cee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 f96c 	bl	8004e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
 8002b60:	e04c      	b.n	8002bfc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3301      	adds	r3, #1
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	b298      	uxth	r0, r3
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3336      	adds	r3, #54	; 0x36
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3338      	adds	r3, #56	; 0x38
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	333c      	adds	r3, #60	; 0x3c
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3340      	adds	r3, #64	; 0x40
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3ad      	bcc.n	8002b62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e044      	b.n	8002c96 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3b5      	bcc.n	8002c0c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	687e      	ldr	r6, [r7, #4]
 8002ca8:	466d      	mov	r5, sp
 8002caa:	f106 0410 	add.w	r4, r6, #16
 8002cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	602b      	str	r3, [r5, #0]
 8002cb6:	1d33      	adds	r3, r6, #4
 8002cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	f002 f8c6 	bl	8004e4c <USB_DevInit>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00d      	b.n	8002cee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 fa37 	bl	800715a <USB_DevDisconnect>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_Start+0x16>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e016      	b.n	8002d3a <HAL_PCD_Start+0x44>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 f85b 	bl	8004dd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d1e:	2101      	movs	r1, #1
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f006 f87c 	bl	8008e1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 fa0b 	bl	8007146 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b088      	sub	sp, #32
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 fa0d 	bl	800716e <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5e:	d102      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fb4a 	bl	80033fa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 f9ff 	bl	800716e <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d112      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	b292      	uxth	r2, r2
 8002d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f005 fe6e 	bl	8008a76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f925 	bl	8002fec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 f9e1 	bl	800716e <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db6:	d10b      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f004 f9ca 	bl	800716e <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de4:	d10b      	bne.n	8002dfe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f9b3 	bl	800716e <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d126      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	b292      	uxth	r2, r2
 8002e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0208 	bic.w	r2, r2, #8
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f005 fe4f 	bl	8008ae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f981 	bl	800716e <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e76:	f040 8084 	bne.w	8002f82 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e011      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	8812      	ldrh	r2, [r2, #0]
 8002e90:	b292      	uxth	r2, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	f107 0120 	add.w	r1, r7, #32
 8002e98:	440b      	add	r3, r1
 8002e9a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	2b07      	cmp	r3, #7
 8002ea8:	d9ea      	bls.n	8002e80 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	b292      	uxth	r2, r2
 8002ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002eda:	bf00      	nop
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f6      	beq.n	8002edc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f00:	b292      	uxth	r2, r2
 8002f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e010      	b.n	8002f2e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4611      	mov	r1, r2
 8002f14:	7ffa      	ldrb	r2, [r7, #31]
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	440a      	add	r2, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	f107 0120 	add.w	r1, r7, #32
 8002f20:	440b      	add	r3, r1
 8002f22:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	77fb      	strb	r3, [r7, #31]
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b07      	cmp	r3, #7
 8002f32:	d9eb      	bls.n	8002f0c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0208 	orr.w	r2, r2, #8
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	b292      	uxth	r2, r2
 8002f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f005 fd99 	bl	8008ab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 f8f1 	bl	800716e <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f96:	d10e      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f005 fd52 	bl	8008a5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 f8d7 	bl	800716e <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fca:	d10b      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_PCD_SetAddress+0x1a>
 8003002:	2302      	movs	r3, #2
 8003004:	e013      	b.n	800302e <HAL_PCD_SetAddress+0x42>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f004 f87e 	bl	8007120 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	4608      	mov	r0, r1
 8003040:	4611      	mov	r1, r2
 8003042:	461a      	mov	r2, r3
 8003044:	4603      	mov	r3, r0
 8003046:	70fb      	strb	r3, [r7, #3]
 8003048:	460b      	mov	r3, r1
 800304a:	803b      	strh	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003058:	2b00      	cmp	r3, #0
 800305a:	da0e      	bge.n	800307a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	705a      	strb	r2, [r3, #1]
 8003078:	e00e      	b.n	8003098 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 0207 	and.w	r2, r3, #7
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030a4:	883a      	ldrh	r2, [r7, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	78ba      	ldrb	r2, [r7, #2]
 80030ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d102      	bne.n	80030ce <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_PCD_EP_Open+0xa6>
 80030d8:	2302      	movs	r3, #2
 80030da:	e00e      	b.n	80030fa <HAL_PCD_EP_Open+0xc4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 fece 	bl	8004e8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80030f8:	7afb      	ldrb	r3, [r7, #11]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800310e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da0e      	bge.n	8003134 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	705a      	strb	r2, [r3, #1]
 8003132:	e00e      	b.n	8003152 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 0207 	and.w	r2, r3, #7
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_PCD_EP_Close+0x6a>
 8003168:	2302      	movs	r3, #2
 800316a:	e00e      	b.n	800318a <HAL_PCD_EP_Close+0x88>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68f9      	ldr	r1, [r7, #12]
 800317a:	4618      	mov	r0, r3
 800317c:	f002 f9f0 	bl	8005560 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	460b      	mov	r3, r1
 80031a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	f003 0207 	and.w	r2, r3, #7
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2200      	movs	r2, #0
 80031d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d2:	7afb      	ldrb	r3, [r7, #11]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6979      	ldr	r1, [r7, #20]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fba2 	bl	8005938 <USB_EPStartXfer>
 80031f4:	e005      	b.n	8003202 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6979      	ldr	r1, [r7, #20]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fb9b 	bl	8005938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	460b      	mov	r3, r1
 800321a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321c:	7afb      	ldrb	r3, [r7, #11]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2201      	movs	r2, #1
 8003256:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	b2da      	uxtb	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6979      	ldr	r1, [r7, #20]
 8003274:	4618      	mov	r0, r3
 8003276:	f002 fb5f 	bl	8005938 <USB_EPStartXfer>
 800327a:	e005      	b.n	8003288 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6979      	ldr	r1, [r7, #20]
 8003282:	4618      	mov	r0, r3
 8003284:	f002 fb58 	bl	8005938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 0207 	and.w	r2, r3, #7
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d901      	bls.n	80032b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e04c      	b.n	800334a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da0e      	bge.n	80032d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	705a      	strb	r2, [r3, #1]
 80032d4:	e00c      	b.n	80032f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_PCD_EP_SetStall+0x7e>
 800330c:	2302      	movs	r3, #2
 800330e:	e01c      	b.n	800334a <HAL_PCD_EP_SetStall+0xb8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fe01 	bl	8006f26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	2b00      	cmp	r3, #0
 800332c:	d108      	bne.n	8003340 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f003 ff26 	bl	800718c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d901      	bls.n	8003370 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e040      	b.n	80033f2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da0e      	bge.n	8003396 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	705a      	strb	r2, [r3, #1]
 8003394:	e00e      	b.n	80033b4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	f003 0207 	and.w	r2, r3, #7
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_PCD_EP_ClrStall+0x82>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e00e      	b.n	80033f2 <HAL_PCD_EP_ClrStall+0xa0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fdef 	bl	8006fc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b08e      	sub	sp, #56	; 0x38
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003402:	e2ec      	b.n	80039de <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800340c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800340e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800341a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 8161 	bne.w	80036e6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003424:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d152      	bne.n	80034d4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	81fb      	strh	r3, [r7, #14]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3328      	adds	r3, #40	; 0x28
 8003456:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	3302      	adds	r3, #2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	441a      	add	r2, r3
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003492:	2100      	movs	r1, #0
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f005 fac6 	bl	8008a26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 829b 	beq.w	80039de <PCD_EP_ISR_Handler+0x5e4>
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8296 	bne.w	80039de <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b292      	uxth	r2, r2
 80034c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034d2:	e284      	b.n	80039de <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d034      	beq.n	8003558 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	3306      	adds	r3, #6
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800352c:	b29b      	uxth	r3, r3
 800352e:	f003 fe7c 	bl	800722a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29a      	uxth	r2, r3
 800353a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800353e:	4013      	ands	r3, r2
 8003540:	823b      	strh	r3, [r7, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	8a3a      	ldrh	r2, [r7, #16]
 8003548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354c:	b292      	uxth	r2, r2
 800354e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f005 fa3b 	bl	80089cc <HAL_PCD_SetupStageCallback>
 8003556:	e242      	b.n	80039de <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003558:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800355c:	2b00      	cmp	r3, #0
 800355e:	f280 823e 	bge.w	80039de <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29a      	uxth	r2, r3
 800356a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800356e:	4013      	ands	r3, r2
 8003570:	83bb      	strh	r3, [r7, #28]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	8bba      	ldrh	r2, [r7, #28]
 8003578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357c:	b292      	uxth	r2, r2
 800357e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	3306      	adds	r3, #6
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d019      	beq.n	80035e8 <PCD_EP_ISR_Handler+0x1ee>
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d015      	beq.n	80035e8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	6959      	ldr	r1, [r3, #20]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f003 fe2c 	bl	800722a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	441a      	add	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035e0:	2100      	movs	r1, #0
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f005 fa04 	bl	80089f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 81f2 	bne.w	80039de <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003608:	b29b      	uxth	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	4413      	add	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d112      	bne.n	8003648 <PCD_EP_ISR_Handler+0x24e>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362c:	b29a      	uxth	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003640:	b29a      	uxth	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e02f      	b.n	80036a8 <PCD_EP_ISR_Handler+0x2ae>
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b3e      	cmp	r3, #62	; 0x3e
 800364e:	d813      	bhi.n	8003678 <PCD_EP_ISR_Handler+0x27e>
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <PCD_EP_ISR_Handler+0x270>
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	3301      	adds	r3, #1
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	b29b      	uxth	r3, r3
 800366e:	029b      	lsls	r3, r3, #10
 8003670:	b29a      	uxth	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	e017      	b.n	80036a8 <PCD_EP_ISR_Handler+0x2ae>
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <PCD_EP_ISR_Handler+0x298>
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	3b01      	subs	r3, #1
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	b29b      	uxth	r3, r3
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	b29b      	uxth	r3, r3
 800369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	827b      	strh	r3, [r7, #18]
 80036ba:	8a7b      	ldrh	r3, [r7, #18]
 80036bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036c0:	827b      	strh	r3, [r7, #18]
 80036c2:	8a7b      	ldrh	r3, [r7, #18]
 80036c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036c8:	827b      	strh	r3, [r7, #18]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	8a7b      	ldrh	r3, [r7, #18]
 80036d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]
 80036e4:	e17b      	b.n	80039de <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036f8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f280 80ea 	bge.w	80038d6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29a      	uxth	r2, r3
 8003714:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003718:	4013      	ands	r3, r2
 800371a:	853b      	strh	r3, [r7, #40]	; 0x28
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800372c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003730:	b292      	uxth	r2, r2
 8003732:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003734:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	7b1b      	ldrb	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d122      	bne.n	8003798 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	3306      	adds	r3, #6
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800377a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800377c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	6959      	ldr	r1, [r3, #20]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	88da      	ldrh	r2, [r3, #6]
 8003790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003792:	f003 fd4a 	bl	800722a <USB_ReadPMA>
 8003796:	e07c      	b.n	8003892 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d108      	bne.n	80037b2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037a2:	461a      	mov	r2, r3
 80037a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f927 	bl	80039fa <HAL_PCD_EP_DB_Receive>
 80037ac:	4603      	mov	r3, r0
 80037ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037b0:	e06f      	b.n	8003892 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	3302      	adds	r3, #2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003836:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02a      	beq.n	8003892 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	6959      	ldr	r1, [r3, #20]
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	891a      	ldrh	r2, [r3, #8]
 8003848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800384a:	f003 fcee 	bl	800722a <USB_ReadPMA>
 800384e:	e020      	b.n	8003892 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	3306      	adds	r3, #6
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003878:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800387a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	6959      	ldr	r1, [r3, #20]
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	895a      	ldrh	r2, [r3, #10]
 800388c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800388e:	f003 fccc 	bl	800722a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003898:	441a      	add	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038a4:	441a      	add	r2, r3
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <PCD_EP_ISR_Handler+0x4c2>
 80038b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d206      	bcs.n	80038ca <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f005 f894 	bl	80089f0 <HAL_PCD_DataOutStageCallback>
 80038c8:	e005      	b.n	80038d6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 f831 	bl	8005938 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d07e      	beq.n	80039de <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80038e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	843b      	strh	r3, [r7, #32]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	8c3b      	ldrh	r3, [r7, #32]
 8003920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003928:	b29b      	uxth	r3, r3
 800392a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	78db      	ldrb	r3, [r3, #3]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d00c      	beq.n	800394e <PCD_EP_ISR_Handler+0x554>
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003940:	2b02      	cmp	r3, #2
 8003942:	d146      	bne.n	80039d2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d141      	bne.n	80039d2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003956:	b29b      	uxth	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	3302      	adds	r3, #2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	699a      	ldr	r2, [r3, #24]
 800397c:	8bfb      	ldrh	r3, [r7, #30]
 800397e:	429a      	cmp	r2, r3
 8003980:	d906      	bls.n	8003990 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	8bfb      	ldrh	r3, [r7, #30]
 8003988:	1ad2      	subs	r2, r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	619a      	str	r2, [r3, #24]
 800398e:	e002      	b.n	8003996 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f005 f83e 	bl	8008a26 <HAL_PCD_DataInStageCallback>
 80039aa:	e018      	b.n	80039de <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	8bfb      	ldrh	r3, [r7, #30]
 80039b2:	441a      	add	r2, r3
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	8bfb      	ldrh	r3, [r7, #30]
 80039be:	441a      	add	r2, r3
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 ffb4 	bl	8005938 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039d0:	e005      	b.n	80039de <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039d4:	461a      	mov	r2, r3
 80039d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f91b 	bl	8003c14 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	b21b      	sxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f6ff ad0a 	blt.w	8003404 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3738      	adds	r7, #56	; 0x38
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	4613      	mov	r3, r2
 8003a06:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d07e      	beq.n	8003b10 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	3302      	adds	r3, #2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	8b7b      	ldrh	r3, [r7, #26]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d306      	bcc.n	8003a54 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	8b7b      	ldrh	r3, [r7, #26]
 8003a4c:	1ad2      	subs	r2, r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	619a      	str	r2, [r3, #24]
 8003a52:	e002      	b.n	8003a5a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d123      	bne.n	8003aaa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7c:	833b      	strh	r3, [r7, #24]
 8003a7e:	8b3b      	ldrh	r3, [r7, #24]
 8003a80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a84:	833b      	strh	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	441a      	add	r2, r3
 8003a94:	8b3b      	ldrh	r3, [r7, #24]
 8003a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01f      	beq.n	8003af4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	82fb      	strh	r3, [r7, #22]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	8afb      	ldrh	r3, [r7, #22]
 8003ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003af4:	8b7b      	ldrh	r3, [r7, #26]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8087 	beq.w	8003c0a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6959      	ldr	r1, [r3, #20]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	891a      	ldrh	r2, [r3, #8]
 8003b08:	8b7b      	ldrh	r3, [r7, #26]
 8003b0a:	f003 fb8e 	bl	800722a <USB_ReadPMA>
 8003b0e:	e07c      	b.n	8003c0a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	3306      	adds	r3, #6
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b38:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	8b7b      	ldrh	r3, [r7, #26]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d306      	bcc.n	8003b52 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	8b7b      	ldrh	r3, [r7, #26]
 8003b4a:	1ad2      	subs	r2, r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	619a      	str	r2, [r3, #24]
 8003b50:	e002      	b.n	8003b58 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d123      	bne.n	8003ba8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	83fb      	strh	r3, [r7, #30]
 8003b7c:	8bfb      	ldrh	r3, [r7, #30]
 8003b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b82:	83fb      	strh	r3, [r7, #30]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	441a      	add	r2, r3
 8003b92:	8bfb      	ldrh	r3, [r7, #30]
 8003b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11f      	bne.n	8003bf2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	83bb      	strh	r3, [r7, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	8bbb      	ldrh	r3, [r7, #28]
 8003bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bf2:	8b7b      	ldrh	r3, [r7, #26]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6959      	ldr	r1, [r3, #20]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	895a      	ldrh	r2, [r3, #10]
 8003c04:	8b7b      	ldrh	r3, [r7, #26]
 8003c06:	f003 fb10 	bl	800722a <USB_ReadPMA>
    }
  }

  return count;
 8003c0a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b0a2      	sub	sp, #136	; 0x88
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 81c7 	beq.w	8003fbc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	3302      	adds	r3, #2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d907      	bls.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	619a      	str	r2, [r3, #24]
 8003c74:	e002      	b.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 80b9 	bne.w	8003df8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d126      	bne.n	8003cdc <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	4413      	add	r3, r2
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	011a      	lsls	r2, r3, #4
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	4413      	add	r3, r2
 8003cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	801a      	strh	r2, [r3, #0]
 8003cda:	e01a      	b.n	8003d12 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d116      	bne.n	8003d12 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	4413      	add	r3, r2
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	011a      	lsls	r2, r3, #4
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	2200      	movs	r2, #0
 8003d10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d126      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	011a      	lsls	r2, r3, #4
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4413      	add	r3, r2
 8003d42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	801a      	strh	r2, [r3, #0]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	e017      	b.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d113      	bne.n	8003d9e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	4413      	add	r3, r2
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	011a      	lsls	r2, r3, #4
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f004 fe3e 	bl	8008a26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 82d1 	beq.w	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd0:	827b      	strh	r3, [r7, #18]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	8a7b      	ldrh	r3, [r7, #18]
 8003de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	8013      	strh	r3, [r2, #0]
 8003df6:	e2af      	b.n	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d021      	beq.n	8003e46 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	f040 8283 	bne.w	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e68:	441a      	add	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d309      	bcc.n	8003e8e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	621a      	str	r2, [r3, #32]
 8003e8c:	e015      	b.n	8003eba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e96:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e9a:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ea4:	e009      	b.n	8003eba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d155      	bne.n	8003f6e <HAL_PCD_EP_DB_Transmit+0x35a>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	4413      	add	r3, r2
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	011a      	lsls	r2, r3, #4
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d112      	bne.n	8003f16 <HAL_PCD_EP_DB_Transmit+0x302>
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	e047      	b.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f18:	2b3e      	cmp	r3, #62	; 0x3e
 8003f1a:	d811      	bhi.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
 8003f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2e:	3301      	adds	r3, #1
 8003f30:	653b      	str	r3, [r7, #80]	; 0x50
 8003f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	029b      	lsls	r3, r3, #10
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	e032      	b.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
 8003f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x342>
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	3b01      	subs	r3, #1
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	029b      	lsls	r3, r3, #10
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e01b      	b.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d117      	bne.n	8003fa6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8a:	4413      	add	r3, r2
 8003f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	011a      	lsls	r2, r3, #4
 8003f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f96:	4413      	add	r3, r2
 8003f98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6959      	ldr	r1, [r3, #20]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	891a      	ldrh	r2, [r3, #8]
 8003fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f003 f8f4 	bl	80071a2 <USB_WritePMA>
 8003fba:	e1cd      	b.n	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3306      	adds	r3, #6
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d307      	bcc.n	8004004 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ffc:	1ad2      	subs	r2, r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	619a      	str	r2, [r3, #24]
 8004002:	e002      	b.n	800400a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2200      	movs	r2, #0
 8004008:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 80c1 	bne.w	8004196 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d126      	bne.n	800406a <HAL_PCD_EP_DB_Transmit+0x456>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402a:	b29b      	uxth	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004030:	4413      	add	r3, r2
 8004032:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	011a      	lsls	r2, r3, #4
 800403a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800403c:	4413      	add	r3, r2
 800403e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004042:	67bb      	str	r3, [r7, #120]	; 0x78
 8004044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800404e:	b29a      	uxth	r2, r3
 8004050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800405e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004062:	b29a      	uxth	r2, r3
 8004064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e01a      	b.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d116      	bne.n	80040a0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	673b      	str	r3, [r7, #112]	; 0x70
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004080:	b29b      	uxth	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004086:	4413      	add	r3, r2
 8004088:	673b      	str	r3, [r7, #112]	; 0x70
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	011a      	lsls	r2, r3, #4
 8004090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004092:	4413      	add	r3, r2
 8004094:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004098:	66fb      	str	r3, [r7, #108]	; 0x6c
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	2200      	movs	r2, #0
 800409e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d126      	bne.n	80040fe <HAL_PCD_EP_DB_Transmit+0x4ea>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	4413      	add	r3, r2
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	011a      	lsls	r2, r3, #4
 80040ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d0:	4413      	add	r3, r2
 80040d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e01c      	b.n	8004138 <HAL_PCD_EP_DB_Transmit+0x524>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d118      	bne.n	8004138 <HAL_PCD_EP_DB_Transmit+0x524>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004116:	4413      	add	r3, r2
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	011a      	lsls	r2, r3, #4
 8004122:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004126:	4413      	add	r3, r2
 8004128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800412c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004134:	2200      	movs	r2, #0
 8004136:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f004 fc71 	bl	8008a26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 8104 	bne.w	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800418c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004190:	b29b      	uxth	r3, r3
 8004192:	8013      	strh	r3, [r2, #0]
 8004194:	e0e0      	b.n	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d121      	bne.n	80041e4 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 80b4 	bne.w	8004358 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80041f8:	441a      	add	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004206:	441a      	add	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d309      	bcc.n	800422c <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004224:	1ad2      	subs	r2, r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	621a      	str	r2, [r3, #32]
 800422a:	e015      	b.n	8004258 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 8004234:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004238:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004242:	e009      	b.n	8004258 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	667b      	str	r3, [r7, #100]	; 0x64
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d155      	bne.n	8004312 <HAL_PCD_EP_DB_Transmit+0x6fe>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427a:	4413      	add	r3, r2
 800427c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	011a      	lsls	r2, r3, #4
 8004284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004286:	4413      	add	r3, r2
 8004288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800428c:	65bb      	str	r3, [r7, #88]	; 0x58
 800428e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004290:	2b00      	cmp	r3, #0
 8004292:	d112      	bne.n	80042ba <HAL_PCD_EP_DB_Transmit+0x6a6>
 8004294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800429e:	b29a      	uxth	r2, r3
 80042a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	e044      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x730>
 80042ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042bc:	2b3e      	cmp	r3, #62	; 0x3e
 80042be:	d811      	bhi.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x6d0>
 80042c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	677b      	str	r3, [r7, #116]	; 0x74
 80042c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x6c2>
 80042d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d2:	3301      	adds	r3, #1
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
 80042d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d8:	b29b      	uxth	r3, r3
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e02f      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x730>
 80042e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	677b      	str	r3, [r7, #116]	; 0x74
 80042ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <HAL_PCD_EP_DB_Transmit+0x6e6>
 80042f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f6:	3b01      	subs	r3, #1
 80042f8:	677b      	str	r3, [r7, #116]	; 0x74
 80042fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	029b      	lsls	r3, r3, #10
 8004300:	b29b      	uxth	r3, r3
 8004302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800430a:	b29a      	uxth	r2, r3
 800430c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430e:	801a      	strh	r2, [r3, #0]
 8004310:	e018      	b.n	8004344 <HAL_PCD_EP_DB_Transmit+0x730>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d114      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0x730>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004328:	4413      	add	r3, r2
 800432a:	667b      	str	r3, [r7, #100]	; 0x64
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	011a      	lsls	r2, r3, #4
 8004332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004334:	4413      	add	r3, r2
 8004336:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800433a:	663b      	str	r3, [r7, #96]	; 0x60
 800433c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433e:	b29a      	uxth	r2, r3
 8004340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004342:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6959      	ldr	r1, [r3, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	895a      	ldrh	r2, [r3, #10]
 8004350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004352:	b29b      	uxth	r3, r3
 8004354:	f002 ff25 	bl	80071a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004372:	823b      	strh	r3, [r7, #16]
 8004374:	8a3b      	ldrh	r3, [r7, #16]
 8004376:	f083 0310 	eor.w	r3, r3, #16
 800437a:	823b      	strh	r3, [r7, #16]
 800437c:	8a3b      	ldrh	r3, [r7, #16]
 800437e:	f083 0320 	eor.w	r3, r3, #32
 8004382:	823b      	strh	r3, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	8a3b      	ldrh	r3, [r7, #16]
 8004394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3788      	adds	r7, #136	; 0x88
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	817b      	strh	r3, [r7, #10]
 80043c0:	4613      	mov	r3, r2
 80043c2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043c4:	897b      	ldrh	r3, [r7, #10]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d0:	897b      	ldrh	r3, [r7, #10]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e009      	b.n	80043fc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e8:	897a      	ldrh	r2, [r7, #10]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	b29a      	uxth	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	80da      	strh	r2, [r3, #6]
 8004410:	e00b      	b.n	800442a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2201      	movs	r2, #1
 8004416:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	b29a      	uxth	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	b29a      	uxth	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
	...

08004438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e26c      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8087 	beq.w	8004566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004458:	4b92      	ldr	r3, [pc, #584]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b04      	cmp	r3, #4
 8004462:	d00c      	beq.n	800447e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004464:	4b8f      	ldr	r3, [pc, #572]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d112      	bne.n	8004496 <HAL_RCC_OscConfig+0x5e>
 8004470:	4b8c      	ldr	r3, [pc, #560]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d10b      	bne.n	8004496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800447e:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d06c      	beq.n	8004564 <HAL_RCC_OscConfig+0x12c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d168      	bne.n	8004564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e246      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x76>
 80044a0:	4b80      	ldr	r3, [pc, #512]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a7f      	ldr	r2, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	e02e      	b.n	800450c <HAL_RCC_OscConfig+0xd4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x98>
 80044b6:	4b7b      	ldr	r3, [pc, #492]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a7a      	ldr	r2, [pc, #488]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a77      	ldr	r2, [pc, #476]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e01d      	b.n	800450c <HAL_RCC_OscConfig+0xd4>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0xbc>
 80044da:	4b72      	ldr	r3, [pc, #456]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a71      	ldr	r2, [pc, #452]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a6e      	ldr	r2, [pc, #440]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0xd4>
 80044f4:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a6a      	ldr	r2, [pc, #424]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b68      	ldr	r3, [pc, #416]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a67      	ldr	r2, [pc, #412]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fd f810 	bl	8001538 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd f80c 	bl	8001538 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1fa      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0xe4>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fc fffc 	bl	8001538 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fc fff8 	bl	8001538 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1e6      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x10c>
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004572:	4b4c      	ldr	r3, [pc, #304]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800457e:	4b49      	ldr	r3, [pc, #292]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b08      	cmp	r3, #8
 8004588:	d11c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x18c>
 800458a:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d116      	bne.n	80045c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x176>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1ba      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4939      	ldr	r1, [pc, #228]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	e03a      	b.n	800463a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCC_OscConfig+0x270>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fc ffb1 	bl	8001538 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045da:	f7fc ffad 	bl	8001538 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e19b      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4927      	ldr	r1, [pc, #156]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <HAL_RCC_OscConfig+0x270>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fc ff90 	bl	8001538 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7fc ff8c 	bl	8001538 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e17a      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d03a      	beq.n	80046bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d019      	beq.n	8004682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <HAL_RCC_OscConfig+0x274>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004654:	f7fc ff70 	bl	8001538 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fc ff6c 	bl	8001538 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e15a      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCC_OscConfig+0x26c>)
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800467a:	2001      	movs	r0, #1
 800467c:	f000 fac6 	bl	8004c0c <RCC_Delay>
 8004680:	e01c      	b.n	80046bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_RCC_OscConfig+0x274>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fc ff56 	bl	8001538 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468e:	e00f      	b.n	80046b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fc ff52 	bl	8001538 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d908      	bls.n	80046b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e140      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	42420000 	.word	0x42420000
 80046ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b0:	4b9e      	ldr	r3, [pc, #632]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e9      	bne.n	8004690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a6 	beq.w	8004816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ce:	4b97      	ldr	r3, [pc, #604]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046da:	4b94      	ldr	r3, [pc, #592]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4a93      	ldr	r2, [pc, #588]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	61d3      	str	r3, [r2, #28]
 80046e6:	4b91      	ldr	r3, [pc, #580]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	4b8e      	ldr	r3, [pc, #568]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d118      	bne.n	8004734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004702:	4b8b      	ldr	r3, [pc, #556]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a8a      	ldr	r2, [pc, #552]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470e:	f7fc ff13 	bl	8001538 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004716:	f7fc ff0f 	bl	8001538 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b64      	cmp	r3, #100	; 0x64
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0fd      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	4b81      	ldr	r3, [pc, #516]	; (8004930 <HAL_RCC_OscConfig+0x4f8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x312>
 800473c:	4b7b      	ldr	r3, [pc, #492]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a7a      	ldr	r2, [pc, #488]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6213      	str	r3, [r2, #32]
 8004748:	e02d      	b.n	80047a6 <HAL_RCC_OscConfig+0x36e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x334>
 8004752:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	4a75      	ldr	r2, [pc, #468]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6213      	str	r3, [r2, #32]
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a72      	ldr	r2, [pc, #456]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	6213      	str	r3, [r2, #32]
 800476a:	e01c      	b.n	80047a6 <HAL_RCC_OscConfig+0x36e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d10c      	bne.n	800478e <HAL_RCC_OscConfig+0x356>
 8004774:	4b6d      	ldr	r3, [pc, #436]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4a6c      	ldr	r2, [pc, #432]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	6213      	str	r3, [r2, #32]
 8004780:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6213      	str	r3, [r2, #32]
 800478c:	e00b      	b.n	80047a6 <HAL_RCC_OscConfig+0x36e>
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004794:	f023 0301 	bic.w	r3, r3, #1
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	4b64      	ldr	r3, [pc, #400]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4a63      	ldr	r2, [pc, #396]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d015      	beq.n	80047da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ae:	f7fc fec3 	bl	8001538 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fc febf 	bl	8001538 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0ab      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ee      	beq.n	80047b6 <HAL_RCC_OscConfig+0x37e>
 80047d8:	e014      	b.n	8004804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047da:	f7fc fead 	bl	8001538 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fc fea9 	bl	8001538 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e095      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f8:	4b4c      	ldr	r3, [pc, #304]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004804:	7dfb      	ldrb	r3, [r7, #23]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b48      	ldr	r3, [pc, #288]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	4a47      	ldr	r2, [pc, #284]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8081 	beq.w	8004922 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004820:	4b42      	ldr	r3, [pc, #264]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 030c 	and.w	r3, r3, #12
 8004828:	2b08      	cmp	r3, #8
 800482a:	d061      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d146      	bne.n	80048c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004834:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <HAL_RCC_OscConfig+0x4fc>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fc fe7d 	bl	8001538 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004842:	f7fc fe79 	bl	8001538 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e067      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004854:	4b35      	ldr	r3, [pc, #212]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d108      	bne.n	800487c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800486a:	4b30      	ldr	r3, [pc, #192]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	492d      	ldr	r1, [pc, #180]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487c:	4b2b      	ldr	r3, [pc, #172]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a19      	ldr	r1, [r3, #32]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	430b      	orrs	r3, r1
 800488e:	4927      	ldr	r1, [pc, #156]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <HAL_RCC_OscConfig+0x4fc>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fc fe4d 	bl	8001538 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fc fe49 	bl	8001538 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e037      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0f0      	beq.n	80048a2 <HAL_RCC_OscConfig+0x46a>
 80048c0:	e02f      	b.n	8004922 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCC_OscConfig+0x4fc>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fc fe36 	bl	8001538 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fc fe32 	bl	8001538 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e020      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x498>
 80048ee:	e018      	b.n	8004922 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e013      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x4f4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	429a      	cmp	r2, r3
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	429a      	cmp	r2, r3
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
 8004934:	42420060 	.word	0x42420060

08004938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0d0      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800494c:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d910      	bls.n	800497c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0207 	bic.w	r2, r3, #7
 8004962:	4965      	ldr	r1, [pc, #404]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0b8      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d020      	beq.n	80049ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a58      	ldr	r2, [pc, #352]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800499e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	494d      	ldr	r1, [pc, #308]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d040      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d115      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e07f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e073      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4b3d      	ldr	r3, [pc, #244]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e06b      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a16:	4b39      	ldr	r3, [pc, #228]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4936      	ldr	r1, [pc, #216]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fc fd86 	bl	8001538 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a30:	f7fc fd82 	bl	8001538 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e053      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 020c 	and.w	r2, r3, #12
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d1eb      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a58:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d210      	bcs.n	8004a88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 0207 	bic.w	r2, r3, #7
 8004a6e:	4922      	ldr	r1, [pc, #136]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e032      	b.n	8004aee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4916      	ldr	r1, [pc, #88]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	490e      	ldr	r1, [pc, #56]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ac6:	f000 f821 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004aca:	4601      	mov	r1, r0
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	5cd3      	ldrb	r3, [r2, r3]
 8004ada:	fa21 f303 	lsr.w	r3, r1, r3
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1cc>)
 8004ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_RCC_ClockConfig+0x1d0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc fce4 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40021000 	.word	0x40021000
 8004b00:	08008f58 	.word	0x08008f58
 8004b04:	20000020 	.word	0x20000020
 8004b08:	20000024 	.word	0x20000024

08004b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b490      	push	{r4, r7}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b12:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b14:	1d3c      	adds	r4, r7, #4
 8004b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b36:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x40>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x46>
 8004b4a:	e02d      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b4e:	623b      	str	r3, [r7, #32]
      break;
 8004b50:	e02d      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	0c9b      	lsrs	r3, r3, #18
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b5e:	4413      	add	r3, r2
 8004b60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d013      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	0c5b      	lsrs	r3, r3, #17
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b7e:	4413      	add	r3, r2
 8004b80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	4a0f      	ldr	r2, [pc, #60]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b8a:	fb02 f203 	mul.w	r2, r2, r3
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
 8004b96:	e004      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	623b      	str	r3, [r7, #32]
      break;
 8004ba6:	e002      	b.n	8004bae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba8:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004baa:	623b      	str	r3, [r7, #32]
      break;
 8004bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bae:	6a3b      	ldr	r3, [r7, #32]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc90      	pop	{r4, r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	08008efc 	.word	0x08008efc
 8004bc0:	08008f0c 	.word	0x08008f0c
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	003d0900 	.word	0x003d0900

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b02      	ldr	r3, [pc, #8]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	20000020 	.word	0x20000020

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be8:	f7ff fff2 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bec:	4601      	mov	r1, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4a03      	ldr	r2, [pc, #12]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40021000 	.word	0x40021000
 8004c08:	08008f68 	.word	0x08008f68

08004c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <RCC_Delay+0x34>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <RCC_Delay+0x38>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0a5b      	lsrs	r3, r3, #9
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	fb02 f303 	mul.w	r3, r2, r3
 8004c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c28:	bf00      	nop
  }
  while (Delay --);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1e5a      	subs	r2, r3, #1
 8004c2e:	60fa      	str	r2, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f9      	bne.n	8004c28 <RCC_Delay+0x1c>
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000020 	.word	0x20000020
 8004c44:	10624dd3 	.word	0x10624dd3

08004c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d07d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c64:	2300      	movs	r3, #0
 8004c66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c68:	4b4f      	ldr	r3, [pc, #316]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b4c      	ldr	r3, [pc, #304]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	4a4b      	ldr	r2, [pc, #300]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	61d3      	str	r3, [r2, #28]
 8004c80:	4b49      	ldr	r3, [pc, #292]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b46      	ldr	r3, [pc, #280]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d118      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c9c:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a42      	ldr	r2, [pc, #264]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca8:	f7fc fc46 	bl	8001538 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cae:	e008      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb0:	f7fc fc42 	bl	8001538 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	; 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e06d      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d02e      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d027      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cec:	4b2e      	ldr	r3, [pc, #184]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cf6:	4b2e      	ldr	r3, [pc, #184]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d02:	4a29      	ldr	r2, [pc, #164]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d014      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d12:	f7fc fc11 	bl	8001538 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1a:	f7fc fc0d 	bl	8001538 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e036      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ee      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4917      	ldr	r1, [pc, #92]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d105      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	490b      	ldr	r1, [pc, #44]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4904      	ldr	r1, [pc, #16]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42420440 	.word	0x42420440

08004db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004db4:	b084      	sub	sp, #16
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	f107 0014 	add.w	r0, r7, #20
 8004dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	b004      	add	sp, #16
 8004dd2:	4770      	bx	lr

08004dd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004de4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004de8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4013      	ands	r3, r2
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	f107 0014 	add.w	r0, r7, #20
 8004e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	b004      	add	sp, #16
 8004e8a:	4770      	bx	lr

08004e8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b09b      	sub	sp, #108	; 0x6c
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	78db      	ldrb	r3, [r3, #3]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d81f      	bhi.n	8004efe <USB_ActivateEndpoint+0x72>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <USB_ActivateEndpoint+0x38>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ef1 	.word	0x08004ef1
 8004ecc:	08004f07 	.word	0x08004f07
 8004ed0:	08004ee3 	.word	0x08004ee3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ed4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004edc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ee0:	e012      	b.n	8004f08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ee2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ee6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004eea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004eee:	e00b      	b.n	8004f08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ef0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ef8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004efc:	e004      	b.n	8004f08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004f04:	e000      	b.n	8004f08 <USB_ActivateEndpoint+0x7c>
      break;
 8004f06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	7b1b      	ldrb	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 8149 	bne.w	800520c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8084 	beq.w	800508c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4413      	add	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	011a      	lsls	r2, r3, #4
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	88db      	ldrh	r3, [r3, #6]
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	81fb      	strh	r3, [r7, #14]
 8004fc6:	89fb      	ldrh	r3, [r7, #14]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <USB_ActivateEndpoint+0x17c>
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	81bb      	strh	r3, [r7, #12]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	89bb      	ldrh	r3, [r7, #12]
 8004ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005004:	b29b      	uxth	r3, r3
 8005006:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	78db      	ldrb	r3, [r3, #3]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d020      	beq.n	8005052 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	813b      	strh	r3, [r7, #8]
 8005028:	893b      	ldrh	r3, [r7, #8]
 800502a:	f083 0320 	eor.w	r3, r3, #32
 800502e:	813b      	strh	r3, [r7, #8]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	893b      	ldrh	r3, [r7, #8]
 800503c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]
 8005050:	e27f      	b.n	8005552 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	817b      	strh	r3, [r7, #10]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	897b      	ldrh	r3, [r7, #10]
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]
 800508a:	e262      	b.n	8005552 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005096:	b29b      	uxth	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	4413      	add	r3, r2
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	011a      	lsls	r2, r3, #4
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	88db      	ldrh	r3, [r3, #6]
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	4413      	add	r3, r2
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	011a      	lsls	r2, r3, #4
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	4413      	add	r3, r2
 80050de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d112      	bne.n	8005112 <USB_ActivateEndpoint+0x286>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e02f      	b.n	8005172 <USB_ActivateEndpoint+0x2e6>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	d813      	bhi.n	8005142 <USB_ActivateEndpoint+0x2b6>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <USB_ActivateEndpoint+0x2a8>
 800512e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005130:	3301      	adds	r3, #1
 8005132:	663b      	str	r3, [r7, #96]	; 0x60
 8005134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005136:	b29b      	uxth	r3, r3
 8005138:	029b      	lsls	r3, r3, #10
 800513a:	b29a      	uxth	r2, r3
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	e017      	b.n	8005172 <USB_ActivateEndpoint+0x2e6>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	663b      	str	r3, [r7, #96]	; 0x60
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <USB_ActivateEndpoint+0x2d0>
 8005156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005158:	3b01      	subs	r3, #1
 800515a:	663b      	str	r3, [r7, #96]	; 0x60
 800515c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800515e:	b29b      	uxth	r3, r3
 8005160:	029b      	lsls	r3, r3, #10
 8005162:	b29b      	uxth	r3, r3
 8005164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800516c:	b29a      	uxth	r2, r3
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	83fb      	strh	r3, [r7, #30]
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01b      	beq.n	80051c2 <USB_ActivateEndpoint+0x336>
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	83bb      	strh	r3, [r7, #28]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	8bbb      	ldrh	r3, [r7, #28]
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	837b      	strh	r3, [r7, #26]
 80051da:	8b7b      	ldrh	r3, [r7, #26]
 80051dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051e0:	837b      	strh	r3, [r7, #26]
 80051e2:	8b7b      	ldrh	r3, [r7, #26]
 80051e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051e8:	837b      	strh	r3, [r7, #26]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	441a      	add	r2, r3
 80051f4:	8b7b      	ldrh	r3, [r7, #26]
 80051f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005206:	b29b      	uxth	r3, r3
 8005208:	8013      	strh	r3, [r2, #0]
 800520a:	e1a2      	b.n	8005552 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	b29b      	uxth	r3, r3
 8005246:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	65bb      	str	r3, [r7, #88]	; 0x58
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005258:	4413      	add	r3, r2
 800525a:	65bb      	str	r3, [r7, #88]	; 0x58
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	011a      	lsls	r2, r3, #4
 8005262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005264:	4413      	add	r3, r2
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	657b      	str	r3, [r7, #84]	; 0x54
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	891b      	ldrh	r3, [r3, #8]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	4413      	add	r3, r2
 800528e:	653b      	str	r3, [r7, #80]	; 0x50
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	011a      	lsls	r2, r3, #4
 8005296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005298:	4413      	add	r3, r2
 800529a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800529e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	895b      	ldrh	r3, [r3, #10]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 8091 	bne.w	80053dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80052c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01b      	beq.n	800530a <USB_ActivateEndpoint+0x47e>
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	873b      	strh	r3, [r7, #56]	; 0x38
 8005318:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01b      	beq.n	800535a <USB_ActivateEndpoint+0x4ce>
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005338:	86fb      	strh	r3, [r7, #54]	; 0x36
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	441a      	add	r2, r3
 8005344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005352:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005356:	b29b      	uxth	r3, r3
 8005358:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005372:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005374:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005378:	86bb      	strh	r3, [r7, #52]	; 0x34
 800537a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800537c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005380:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]
 80053da:	e0ba      	b.n	8005552 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01d      	beq.n	8005434 <USB_ActivateEndpoint+0x5a8>
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	441a      	add	r2, r3
 800541c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01d      	beq.n	800548c <USB_ActivateEndpoint+0x600>
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005484:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005488:	b29b      	uxth	r3, r3
 800548a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	78db      	ldrb	r3, [r3, #3]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d024      	beq.n	80054de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054b2:	f083 0320 	eor.w	r3, r3, #32
 80054b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	b29b      	uxth	r3, r3
 80054da:	8013      	strh	r3, [r2, #0]
 80054dc:	e01d      	b.n	800551a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005552:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005556:	4618      	mov	r0, r3
 8005558:	376c      	adds	r7, #108	; 0x6c
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005560:	b480      	push	{r7}
 8005562:	b08d      	sub	sp, #52	; 0x34
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	7b1b      	ldrb	r3, [r3, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 808e 	bne.w	8005690 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d044      	beq.n	8005606 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	81bb      	strh	r3, [r7, #12]
 800558a:	89bb      	ldrh	r3, [r7, #12]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <USB_DeactivateEndpoint+0x6c>
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	817b      	strh	r3, [r7, #10]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e2:	813b      	strh	r3, [r7, #8]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	893b      	ldrh	r3, [r7, #8]
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
 8005604:	e192      	b.n	800592c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	827b      	strh	r3, [r7, #18]
 8005614:	8a7b      	ldrh	r3, [r7, #18]
 8005616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01b      	beq.n	8005656 <USB_DeactivateEndpoint+0xf6>
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	823b      	strh	r3, [r7, #16]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	8a3b      	ldrh	r3, [r7, #16]
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566c:	81fb      	strh	r3, [r7, #14]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	89fb      	ldrh	r3, [r7, #14]
 800567a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]
 800568e:	e14d      	b.n	800592c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 80a5 	bne.w	80057e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	843b      	strh	r3, [r7, #32]
 80056a8:	8c3b      	ldrh	r3, [r7, #32]
 80056aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01b      	beq.n	80056ea <USB_DeactivateEndpoint+0x18a>
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c8:	83fb      	strh	r3, [r7, #30]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	441a      	add	r2, r3
 80056d4:	8bfb      	ldrh	r3, [r7, #30]
 80056d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	83bb      	strh	r3, [r7, #28]
 80056f8:	8bbb      	ldrh	r3, [r7, #28]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01b      	beq.n	800573a <USB_DeactivateEndpoint+0x1da>
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005718:	837b      	strh	r3, [r7, #26]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	441a      	add	r2, r3
 8005724:	8b7b      	ldrh	r3, [r7, #26]
 8005726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	833b      	strh	r3, [r7, #24]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	8b3b      	ldrh	r3, [r7, #24]
 800575e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800576e:	b29b      	uxth	r3, r3
 8005770:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	82fb      	strh	r3, [r7, #22]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	441a      	add	r2, r3
 8005794:	8afb      	ldrh	r3, [r7, #22]
 8005796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	82bb      	strh	r3, [r7, #20]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	8abb      	ldrh	r3, [r7, #20]
 80057ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8013      	strh	r3, [r2, #0]
 80057e2:	e0a3      	b.n	800592c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <USB_DeactivateEndpoint+0x2d4>
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005830:	b29b      	uxth	r3, r3
 8005832:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <USB_DeactivateEndpoint+0x324>
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	853b      	strh	r3, [r7, #40]	; 0x28
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	441a      	add	r2, r3
 80058a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590a:	847b      	strh	r3, [r7, #34]	; 0x22
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3734      	adds	r7, #52	; 0x34
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0cc      	sub	sp, #304	; 0x130
 800593c:	af00      	add	r7, sp, #0
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	6018      	str	r0, [r3, #0]
 8005942:	463b      	mov	r3, r7
 8005944:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005946:	463b      	mov	r3, r7
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b01      	cmp	r3, #1
 800594e:	f040 872e 	bne.w	80067ae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	429a      	cmp	r2, r3
 8005960:	d905      	bls.n	800596e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005962:	463b      	mov	r3, r7
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800596c:	e004      	b.n	8005978 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	7b1b      	ldrb	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d134      	bne.n	80059ec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6959      	ldr	r1, [r3, #20]
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	88da      	ldrh	r2, [r3, #6]
 800598e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005992:	b29b      	uxth	r3, r3
 8005994:	1d38      	adds	r0, r7, #4
 8005996:	6800      	ldr	r0, [r0, #0]
 8005998:	f001 fc03 	bl	80071a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	1d3a      	adds	r2, r7, #4
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	f107 0210 	add.w	r2, r7, #16
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	440a      	add	r2, r1
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	011a      	lsls	r2, r3, #4
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4413      	add	r3, r2
 80059d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059de:	b29a      	uxth	r2, r3
 80059e0:	f107 030c 	add.w	r3, r7, #12
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	f000 beac 	b.w	8006744 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	78db      	ldrb	r3, [r3, #3]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	f040 838c 	bne.w	8006110 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a1a      	ldr	r2, [r3, #32]
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f240 8330 	bls.w	800606a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	463b      	mov	r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	441a      	add	r2, r3
 8005a36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 819e 	beq.w	8005db8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a80:	1d3a      	adds	r2, r7, #4
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	785b      	ldrb	r3, [r3, #1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d17a      	bne.n	8005b86 <USB_EPStartXfer+0x24e>
 8005a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a94:	1d3a      	adds	r2, r7, #4
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	011a      	lsls	r2, r3, #4
 8005abc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d11a      	bne.n	8005b0c <USB_EPStartXfer+0x1d4>
 8005ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	801a      	strh	r2, [r3, #0]
 8005b0a:	e062      	b.n	8005bd2 <USB_EPStartXfer+0x29a>
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b10:	2b3e      	cmp	r3, #62	; 0x3e
 8005b12:	d819      	bhi.n	8005b48 <USB_EPStartXfer+0x210>
 8005b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <USB_EPStartXfer+0x1fc>
 8005b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	e044      	b.n	8005bd2 <USB_EPStartXfer+0x29a>
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <USB_EPStartXfer+0x230>
 8005b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b62:	3b01      	subs	r3, #1
 8005b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	029b      	lsls	r3, r3, #10
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e025      	b.n	8005bd2 <USB_EPStartXfer+0x29a>
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d120      	bne.n	8005bd2 <USB_EPStartXfer+0x29a>
 8005b90:	1d3b      	adds	r3, r7, #4
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ba0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	011a      	lsls	r2, r3, #4
 8005bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	895b      	ldrh	r3, [r3, #10]
 8005bd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bdc:	463b      	mov	r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6959      	ldr	r1, [r3, #20]
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bec:	1d38      	adds	r0, r7, #4
 8005bee:	6800      	ldr	r0, [r0, #0]
 8005bf0:	f001 fad7 	bl	80071a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfe:	441a      	add	r2, r3
 8005c00:	463b      	mov	r3, r7
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d909      	bls.n	8005c2a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	463b      	mov	r3, r7
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	621a      	str	r2, [r3, #32]
 8005c28:	e008      	b.n	8005c3c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d17a      	bne.n	8005d3c <USB_EPStartXfer+0x404>
 8005c46:	f107 0318 	add.w	r3, r7, #24
 8005c4a:	1d3a      	adds	r2, r7, #4
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	f107 0318 	add.w	r3, r7, #24
 8005c60:	f107 0218 	add.w	r2, r7, #24
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	440a      	add	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	f107 0318 	add.w	r3, r7, #24
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c7e:	f107 0314 	add.w	r3, r7, #20
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11a      	bne.n	8005cc2 <USB_EPStartXfer+0x38a>
 8005c8c:	f107 0314 	add.w	r3, r7, #20
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	f107 0314 	add.w	r3, r7, #20
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f107 0314 	add.w	r3, r7, #20
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e067      	b.n	8005d92 <USB_EPStartXfer+0x45a>
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc8:	d819      	bhi.n	8005cfe <USB_EPStartXfer+0x3c6>
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <USB_EPStartXfer+0x3b2>
 8005ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e049      	b.n	8005d92 <USB_EPStartXfer+0x45a>
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <USB_EPStartXfer+0x3e6>
 8005d14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e02a      	b.n	8005d92 <USB_EPStartXfer+0x45a>
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d125      	bne.n	8005d92 <USB_EPStartXfer+0x45a>
 8005d46:	f107 0320 	add.w	r3, r7, #32
 8005d4a:	1d3a      	adds	r2, r7, #4
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f107 0320 	add.w	r3, r7, #32
 8005d60:	f107 0220 	add.w	r2, r7, #32
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	440a      	add	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	011a      	lsls	r2, r3, #4
 8005d72:	f107 0320 	add.w	r3, r7, #32
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d7e:	f107 031c 	add.w	r3, r7, #28
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f107 031c 	add.w	r3, r7, #28
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d92:	463b      	mov	r3, r7
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	891b      	ldrh	r3, [r3, #8]
 8005d98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6959      	ldr	r1, [r3, #20]
 8005da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dac:	1d38      	adds	r0, r7, #4
 8005dae:	6800      	ldr	r0, [r0, #0]
 8005db0:	f001 f9f7 	bl	80071a2 <USB_WritePMA>
 8005db4:	f000 bcc6 	b.w	8006744 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d164      	bne.n	8005e8c <USB_EPStartXfer+0x554>
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc8:	1d3b      	adds	r3, r7, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd6:	4413      	add	r3, r2
 8005dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dda:	463b      	mov	r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	011a      	lsls	r2, r3, #4
 8005de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44
 8005dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d112      	bne.n	8005e1a <USB_EPStartXfer+0x4e2>
 8005df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e057      	b.n	8005eca <USB_EPStartXfer+0x592>
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e20:	d817      	bhi.n	8005e52 <USB_EPStartXfer+0x51a>
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <USB_EPStartXfer+0x50a>
 8005e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	e03b      	b.n	8005eca <USB_EPStartXfer+0x592>
 8005e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <USB_EPStartXfer+0x53a>
 8005e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	e01e      	b.n	8005eca <USB_EPStartXfer+0x592>
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d119      	bne.n	8005eca <USB_EPStartXfer+0x592>
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	4413      	add	r3, r2
 8005eac:	653b      	str	r3, [r7, #80]	; 0x50
 8005eae:	463b      	mov	r3, r7
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	891b      	ldrh	r3, [r3, #8]
 8005ed0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6959      	ldr	r1, [r3, #20]
 8005eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ee4:	1d38      	adds	r0, r7, #4
 8005ee6:	6800      	ldr	r0, [r0, #0]
 8005ee8:	f001 f95b 	bl	80071a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	441a      	add	r2, r3
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005efe:	463b      	mov	r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	463b      	mov	r3, r7
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d909      	bls.n	8005f22 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005f0e:	463b      	mov	r3, r7
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	621a      	str	r2, [r3, #32]
 8005f20:	e008      	b.n	8005f34 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2200      	movs	r2, #0
 8005f32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d164      	bne.n	800600e <USB_EPStartXfer+0x6d6>
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f4a:	1d3b      	adds	r3, r7, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f58:	4413      	add	r3, r2
 8005f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	011a      	lsls	r2, r3, #4
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	4413      	add	r3, r2
 8005f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d112      	bne.n	8005f9c <USB_EPStartXfer+0x664>
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	e054      	b.n	8006046 <USB_EPStartXfer+0x70e>
 8005f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa2:	d817      	bhi.n	8005fd4 <USB_EPStartXfer+0x69c>
 8005fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <USB_EPStartXfer+0x68c>
 8005fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	029b      	lsls	r3, r3, #10
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e038      	b.n	8006046 <USB_EPStartXfer+0x70e>
 8005fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <USB_EPStartXfer+0x6bc>
 8005fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	029b      	lsls	r3, r3, #10
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006006:	b29a      	uxth	r2, r3
 8006008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e01b      	b.n	8006046 <USB_EPStartXfer+0x70e>
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d116      	bne.n	8006046 <USB_EPStartXfer+0x70e>
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006026:	4413      	add	r3, r2
 8006028:	643b      	str	r3, [r7, #64]	; 0x40
 800602a:	463b      	mov	r3, r7
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	011a      	lsls	r2, r3, #4
 8006032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006034:	4413      	add	r3, r2
 8006036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006040:	b29a      	uxth	r2, r3
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006046:	463b      	mov	r3, r7
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	895b      	ldrh	r3, [r3, #10]
 800604c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6959      	ldr	r1, [r3, #20]
 8006056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605a:	b29b      	uxth	r3, r3
 800605c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006060:	1d38      	adds	r0, r7, #4
 8006062:	6800      	ldr	r0, [r0, #0]
 8006064:	f001 f89d 	bl	80071a2 <USB_WritePMA>
 8006068:	e36c      	b.n	8006744 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006074:	1d3b      	adds	r3, r7, #4
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	463b      	mov	r3, r7
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060b8:	1d3b      	adds	r3, r7, #4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060cc:	4413      	add	r3, r2
 80060ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	011a      	lsls	r2, r3, #4
 80060d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060da:	4413      	add	r3, r2
 80060dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	891b      	ldrh	r3, [r3, #8]
 80060f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6959      	ldr	r1, [r3, #20]
 80060fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006100:	b29b      	uxth	r3, r3
 8006102:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006106:	1d38      	adds	r0, r7, #4
 8006108:	6800      	ldr	r0, [r0, #0]
 800610a:	f001 f84a 	bl	80071a2 <USB_WritePMA>
 800610e:	e319      	b.n	8006744 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	463b      	mov	r3, r7
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800612e:	1d3b      	adds	r3, r7, #4
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006154:	463b      	mov	r3, r7
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	463b      	mov	r3, r7
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29b      	uxth	r3, r3
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8162 	beq.w	8006446 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d164      	bne.n	800625e <USB_EPStartXfer+0x926>
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	67bb      	str	r3, [r7, #120]	; 0x78
 800619a:	1d3b      	adds	r3, r7, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a8:	4413      	add	r3, r2
 80061aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ac:	463b      	mov	r3, r7
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	011a      	lsls	r2, r3, #4
 80061b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b6:	4413      	add	r3, r2
 80061b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061bc:	677b      	str	r3, [r7, #116]	; 0x74
 80061be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d112      	bne.n	80061ec <USB_EPStartXfer+0x8b4>
 80061c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	e057      	b.n	800629c <USB_EPStartXfer+0x964>
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	2b3e      	cmp	r3, #62	; 0x3e
 80061f2:	d817      	bhi.n	8006224 <USB_EPStartXfer+0x8ec>
 80061f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <USB_EPStartXfer+0x8dc>
 800620a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800620e:	3301      	adds	r3, #1
 8006210:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29a      	uxth	r2, r3
 800621e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e03b      	b.n	800629c <USB_EPStartXfer+0x964>
 8006224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800622e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <USB_EPStartXfer+0x90c>
 800623a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800623e:	3b01      	subs	r3, #1
 8006240:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006244:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006248:	b29b      	uxth	r3, r3
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006256:	b29a      	uxth	r2, r3
 8006258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e01e      	b.n	800629c <USB_EPStartXfer+0x964>
 800625e:	463b      	mov	r3, r7
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d119      	bne.n	800629c <USB_EPStartXfer+0x964>
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006278:	4413      	add	r3, r2
 800627a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800627e:	463b      	mov	r3, r7
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	011a      	lsls	r2, r3, #4
 8006286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800628a:	4413      	add	r3, r2
 800628c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006296:	b29a      	uxth	r2, r3
 8006298:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800629a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	895b      	ldrh	r3, [r3, #10]
 80062a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062a6:	463b      	mov	r3, r7
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6959      	ldr	r1, [r3, #20]
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062b6:	1d38      	adds	r0, r7, #4
 80062b8:	6800      	ldr	r0, [r0, #0]
 80062ba:	f000 ff72 	bl	80071a2 <USB_WritePMA>
          ep->xfer_buff += len;
 80062be:	463b      	mov	r3, r7
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c8:	441a      	add	r2, r3
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062d0:	463b      	mov	r3, r7
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d909      	bls.n	80062f4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80062e0:	463b      	mov	r3, r7
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6a1a      	ldr	r2, [r3, #32]
 80062e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	621a      	str	r2, [r3, #32]
 80062f2:	e008      	b.n	8006306 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 821a 	beq.w	8006744 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d164      	bne.n	80063e4 <USB_EPStartXfer+0xaac>
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006328:	b29b      	uxth	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800632e:	4413      	add	r3, r2
 8006330:	66bb      	str	r3, [r7, #104]	; 0x68
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	011a      	lsls	r2, r3, #4
 800633a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800633c:	4413      	add	r3, r2
 800633e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006342:	667b      	str	r3, [r7, #100]	; 0x64
 8006344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d112      	bne.n	8006372 <USB_EPStartXfer+0xa3a>
 800634c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006356:	b29a      	uxth	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636a:	b29a      	uxth	r2, r3
 800636c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e057      	b.n	8006422 <USB_EPStartXfer+0xaea>
 8006372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006376:	2b3e      	cmp	r3, #62	; 0x3e
 8006378:	d817      	bhi.n	80063aa <USB_EPStartXfer+0xa72>
 800637a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <USB_EPStartXfer+0xa62>
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006394:	3301      	adds	r3, #1
 8006396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	b29b      	uxth	r3, r3
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	e03b      	b.n	8006422 <USB_EPStartXfer+0xaea>
 80063aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <USB_EPStartXfer+0xa92>
 80063c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c4:	3b01      	subs	r3, #1
 80063c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e01e      	b.n	8006422 <USB_EPStartXfer+0xaea>
 80063e4:	463b      	mov	r3, r7
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d119      	bne.n	8006422 <USB_EPStartXfer+0xaea>
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	673b      	str	r3, [r7, #112]	; 0x70
 80063f4:	1d3b      	adds	r3, r7, #4
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006402:	4413      	add	r3, r2
 8006404:	673b      	str	r3, [r7, #112]	; 0x70
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006410:	4413      	add	r3, r2
 8006412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641c:	b29a      	uxth	r2, r3
 800641e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006420:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	891b      	ldrh	r3, [r3, #8]
 8006428:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800642c:	463b      	mov	r3, r7
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6959      	ldr	r1, [r3, #20]
 8006432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006436:	b29b      	uxth	r3, r3
 8006438:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800643c:	1d38      	adds	r0, r7, #4
 800643e:	6800      	ldr	r0, [r0, #0]
 8006440:	f000 feaf 	bl	80071a2 <USB_WritePMA>
 8006444:	e17e      	b.n	8006744 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d16f      	bne.n	8006530 <USB_EPStartXfer+0xbf8>
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006468:	4413      	add	r3, r2
 800646a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	011a      	lsls	r2, r3, #4
 8006476:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800647a:	4413      	add	r3, r2
 800647c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d116      	bne.n	80064ba <USB_EPStartXfer+0xb82>
 800648c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e05f      	b.n	800657a <USB_EPStartXfer+0xc42>
 80064ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064be:	2b3e      	cmp	r3, #62	; 0x3e
 80064c0:	d818      	bhi.n	80064f4 <USB_EPStartXfer+0xbbc>
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80064cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <USB_EPStartXfer+0xbaa>
 80064d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064dc:	3301      	adds	r3, #1
 80064de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80064e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	029b      	lsls	r3, r3, #10
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	e042      	b.n	800657a <USB_EPStartXfer+0xc42>
 80064f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <USB_EPStartXfer+0xbdc>
 800650a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800650e:	3b01      	subs	r3, #1
 8006510:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006514:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006518:	b29b      	uxth	r3, r3
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e024      	b.n	800657a <USB_EPStartXfer+0xc42>
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d11f      	bne.n	800657a <USB_EPStartXfer+0xc42>
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006542:	1d3b      	adds	r3, r7, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006552:	4413      	add	r3, r2
 8006554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	011a      	lsls	r2, r3, #4
 8006560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006564:	4413      	add	r3, r2
 8006566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800656e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006572:	b29a      	uxth	r2, r3
 8006574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800657a:	463b      	mov	r3, r7
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	891b      	ldrh	r3, [r3, #8]
 8006580:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6959      	ldr	r1, [r3, #20]
 800658a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658e:	b29b      	uxth	r3, r3
 8006590:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006594:	1d38      	adds	r0, r7, #4
 8006596:	6800      	ldr	r0, [r0, #0]
 8006598:	f000 fe03 	bl	80071a2 <USB_WritePMA>
          ep->xfer_buff += len;
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	441a      	add	r2, r3
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a1a      	ldr	r2, [r3, #32]
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d909      	bls.n	80065d2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	463b      	mov	r3, r7
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	621a      	str	r2, [r3, #32]
 80065d0:	e008      	b.n	80065e4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80065d2:	463b      	mov	r3, r7
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2200      	movs	r2, #0
 80065e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80ab 	beq.w	8006744 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065f6:	463b      	mov	r3, r7
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d16f      	bne.n	80066e0 <USB_EPStartXfer+0xda8>
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006608:	1d3b      	adds	r3, r7, #4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006610:	b29b      	uxth	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006618:	4413      	add	r3, r2
 800661a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800661e:	463b      	mov	r3, r7
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	011a      	lsls	r2, r3, #4
 8006626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800662a:	4413      	add	r3, r2
 800662c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <USB_EPStartXfer+0xd32>
 800663c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006660:	b29a      	uxth	r2, r3
 8006662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	e05b      	b.n	8006722 <USB_EPStartXfer+0xdea>
 800666a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666e:	2b3e      	cmp	r3, #62	; 0x3e
 8006670:	d818      	bhi.n	80066a4 <USB_EPStartXfer+0xd6c>
 8006672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800667c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <USB_EPStartXfer+0xd5a>
 8006688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668c:	3301      	adds	r3, #1
 800668e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006696:	b29b      	uxth	r3, r3
 8006698:	029b      	lsls	r3, r3, #10
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e03e      	b.n	8006722 <USB_EPStartXfer+0xdea>
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <USB_EPStartXfer+0xd8c>
 80066ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066be:	3b01      	subs	r3, #1
 80066c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e020      	b.n	8006722 <USB_EPStartXfer+0xdea>
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d11b      	bne.n	8006722 <USB_EPStartXfer+0xdea>
 80066ea:	1d3b      	adds	r3, r7, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066fa:	4413      	add	r3, r2
 80066fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	011a      	lsls	r2, r3, #4
 8006708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800670c:	4413      	add	r3, r2
 800670e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006722:	463b      	mov	r3, r7
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	895b      	ldrh	r3, [r3, #10]
 8006728:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6959      	ldr	r1, [r3, #20]
 8006732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006736:	b29b      	uxth	r3, r3
 8006738:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800673c:	1d38      	adds	r0, r7, #4
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	f000 fd2f 	bl	80071a2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f107 020a 	add.w	r2, r7, #10
 800675a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006762:	8013      	strh	r3, [r2, #0]
 8006764:	f107 030a 	add.w	r3, r7, #10
 8006768:	f107 020a 	add.w	r2, r7, #10
 800676c:	8812      	ldrh	r2, [r2, #0]
 800676e:	f082 0210 	eor.w	r2, r2, #16
 8006772:	801a      	strh	r2, [r3, #0]
 8006774:	f107 030a 	add.w	r3, r7, #10
 8006778:	f107 020a 	add.w	r2, r7, #10
 800677c:	8812      	ldrh	r2, [r2, #0]
 800677e:	f082 0220 	eor.w	r2, r2, #32
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	1d3b      	adds	r3, r7, #4
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	f107 030a 	add.w	r3, r7, #10
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]
 80067ac:	e3b5      	b.n	8006f1a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	7b1b      	ldrb	r3, [r3, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f040 8090 	bne.w	80068da <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90e      	bls.n	80067e8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80067ca:	463b      	mov	r3, r7
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80067d4:	463b      	mov	r3, r7
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	463b      	mov	r3, r7
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	619a      	str	r2, [r3, #24]
 80067e6:	e008      	b.n	80067fa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80067e8:	463b      	mov	r3, r7
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80067f2:	463b      	mov	r3, r7
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006802:	1d3b      	adds	r3, r7, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680a:	b29b      	uxth	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006812:	4413      	add	r3, r2
 8006814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	011a      	lsls	r2, r3, #4
 8006820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006824:	4413      	add	r3, r2
 8006826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800682a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800682e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d116      	bne.n	8006864 <USB_EPStartXfer+0xf2c>
 8006836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e32c      	b.n	8006ebe <USB_EPStartXfer+0x1586>
 8006864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006868:	2b3e      	cmp	r3, #62	; 0x3e
 800686a:	d818      	bhi.n	800689e <USB_EPStartXfer+0xf66>
 800686c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <USB_EPStartXfer+0xf54>
 8006882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006886:	3301      	adds	r3, #1
 8006888:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800688c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006890:	b29b      	uxth	r3, r3
 8006892:	029b      	lsls	r3, r3, #10
 8006894:	b29a      	uxth	r2, r3
 8006896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	e30f      	b.n	8006ebe <USB_EPStartXfer+0x1586>
 800689e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <USB_EPStartXfer+0xf86>
 80068b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b8:	3b01      	subs	r3, #1
 80068ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e2f1      	b.n	8006ebe <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068da:	463b      	mov	r3, r7
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	78db      	ldrb	r3, [r3, #3]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	f040 818f 	bne.w	8006c04 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d175      	bne.n	80069dc <USB_EPStartXfer+0x10a4>
 80068f0:	1d3b      	adds	r3, r7, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006900:	b29b      	uxth	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006908:	4413      	add	r3, r2
 800690a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800690e:	463b      	mov	r3, r7
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	011a      	lsls	r2, r3, #4
 8006916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800691a:	4413      	add	r3, r2
 800691c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006924:	463b      	mov	r3, r7
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d116      	bne.n	800695c <USB_EPStartXfer+0x1024>
 800692e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800693a:	b29a      	uxth	r2, r3
 800693c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006940:	801a      	strh	r2, [r3, #0]
 8006942:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006952:	b29a      	uxth	r2, r3
 8006954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006958:	801a      	strh	r2, [r3, #0]
 800695a:	e065      	b.n	8006a28 <USB_EPStartXfer+0x10f0>
 800695c:	463b      	mov	r3, r7
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b3e      	cmp	r3, #62	; 0x3e
 8006964:	d81a      	bhi.n	800699c <USB_EPStartXfer+0x1064>
 8006966:	463b      	mov	r3, r7
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <USB_EPStartXfer+0x1052>
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006984:	3301      	adds	r3, #1
 8006986:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	b29b      	uxth	r3, r3
 8006990:	029b      	lsls	r3, r3, #10
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	e045      	b.n	8006a28 <USB_EPStartXfer+0x10f0>
 800699c:	463b      	mov	r3, r7
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <USB_EPStartXfer+0x1088>
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	3b01      	subs	r3, #1
 80069bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e025      	b.n	8006a28 <USB_EPStartXfer+0x10f0>
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d120      	bne.n	8006a28 <USB_EPStartXfer+0x10f0>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fe:	4413      	add	r3, r2
 8006a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006a04:	463b      	mov	r3, r7
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d175      	bne.n	8006b26 <USB_EPStartXfer+0x11ee>
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a52:	4413      	add	r3, r2
 8006a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a58:	463b      	mov	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	011a      	lsls	r2, r3, #4
 8006a60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a64:	4413      	add	r3, r2
 8006a66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d116      	bne.n	8006aa6 <USB_EPStartXfer+0x116e>
 8006a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e061      	b.n	8006b6a <USB_EPStartXfer+0x1232>
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b3e      	cmp	r3, #62	; 0x3e
 8006aae:	d81a      	bhi.n	8006ae6 <USB_EPStartXfer+0x11ae>
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006abc:	463b      	mov	r3, r7
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <USB_EPStartXfer+0x119c>
 8006aca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ace:	3301      	adds	r3, #1
 8006ad0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	029b      	lsls	r3, r3, #10
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	e041      	b.n	8006b6a <USB_EPStartXfer+0x1232>
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <USB_EPStartXfer+0x11d2>
 8006b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b04:	3b01      	subs	r3, #1
 8006b06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	029b      	lsls	r3, r3, #10
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b22:	801a      	strh	r2, [r3, #0]
 8006b24:	e021      	b.n	8006b6a <USB_EPStartXfer+0x1232>
 8006b26:	463b      	mov	r3, r7
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d11c      	bne.n	8006b6a <USB_EPStartXfer+0x1232>
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b40:	4413      	add	r3, r2
 8006b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b46:	463b      	mov	r3, r7
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	011a      	lsls	r2, r3, #4
 8006b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b52:	4413      	add	r3, r2
 8006b54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 81a4 	beq.w	8006ebe <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <USB_EPStartXfer+0x126a>
 8006b96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10d      	bne.n	8006bbe <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ba2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 8187 	bne.w	8006ebe <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 8180 	bne.w	8006ebe <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006bdc:	1d3b      	adds	r3, r7, #4
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
 8006c02:	e15c      	b.n	8006ebe <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	78db      	ldrb	r3, [r3, #3]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	f040 8155 	bne.w	8006eba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	463b      	mov	r3, r7
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d90e      	bls.n	8006c3e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006c20:	463b      	mov	r3, r7
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006c2a:	463b      	mov	r3, r7
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	463b      	mov	r3, r7
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	619a      	str	r2, [r3, #24]
 8006c3c:	e008      	b.n	8006c50 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006c3e:	463b      	mov	r3, r7
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c50:	463b      	mov	r3, r7
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d16f      	bne.n	8006d3a <USB_EPStartXfer+0x1402>
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c72:	4413      	add	r3, r2
 8006c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c78:	463b      	mov	r3, r7
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	011a      	lsls	r2, r3, #4
 8006c80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c84:	4413      	add	r3, r2
 8006c86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d116      	bne.n	8006cc4 <USB_EPStartXfer+0x138c>
 8006c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e05f      	b.n	8006d84 <USB_EPStartXfer+0x144c>
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8006cca:	d818      	bhi.n	8006cfe <USB_EPStartXfer+0x13c6>
 8006ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <USB_EPStartXfer+0x13b4>
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	029b      	lsls	r3, r3, #10
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	e042      	b.n	8006d84 <USB_EPStartXfer+0x144c>
 8006cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <USB_EPStartXfer+0x13e6>
 8006d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	029b      	lsls	r3, r3, #10
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e024      	b.n	8006d84 <USB_EPStartXfer+0x144c>
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d11f      	bne.n	8006d84 <USB_EPStartXfer+0x144c>
 8006d44:	1d3b      	adds	r3, r7, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d4c:	1d3b      	adds	r3, r7, #4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	011a      	lsls	r2, r3, #4
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	1d3b      	adds	r3, r7, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d16f      	bne.n	8006e76 <USB_EPStartXfer+0x153e>
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	4413      	add	r3, r2
 8006db0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	011a      	lsls	r2, r3, #4
 8006dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d116      	bne.n	8006e00 <USB_EPStartXfer+0x14c8>
 8006dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	e05e      	b.n	8006ebe <USB_EPStartXfer+0x1586>
 8006e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e04:	2b3e      	cmp	r3, #62	; 0x3e
 8006e06:	d818      	bhi.n	8006e3a <USB_EPStartXfer+0x1502>
 8006e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <USB_EPStartXfer+0x14f0>
 8006e1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e22:	3301      	adds	r3, #1
 8006e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	029b      	lsls	r3, r3, #10
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	e041      	b.n	8006ebe <USB_EPStartXfer+0x1586>
 8006e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e48:	f003 031f 	and.w	r3, r3, #31
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d104      	bne.n	8006e5a <USB_EPStartXfer+0x1522>
 8006e50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e54:	3b01      	subs	r3, #1
 8006e56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	029b      	lsls	r3, r3, #10
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e023      	b.n	8006ebe <USB_EPStartXfer+0x1586>
 8006e76:	463b      	mov	r3, r7
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d11e      	bne.n	8006ebe <USB_EPStartXfer+0x1586>
 8006e80:	1d3b      	adds	r3, r7, #4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e90:	4413      	add	r3, r2
 8006e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e96:	463b      	mov	r3, r7
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	011a      	lsls	r2, r3, #4
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e001      	b.n	8006ebe <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e02e      	b.n	8006f1c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006edc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ee4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ee8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006eec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ef0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	463b      	mov	r3, r7
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	441a      	add	r2, r3
 8006f02:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d020      	beq.n	8006f7a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f4e:	81bb      	strh	r3, [r7, #12]
 8006f50:	89bb      	ldrh	r3, [r7, #12]
 8006f52:	f083 0310 	eor.w	r3, r3, #16
 8006f56:	81bb      	strh	r3, [r7, #12]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	89bb      	ldrh	r3, [r7, #12]
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]
 8006f78:	e01f      	b.n	8006fba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f90:	81fb      	strh	r3, [r7, #14]
 8006f92:	89fb      	ldrh	r3, [r7, #14]
 8006f94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f98:	81fb      	strh	r3, [r7, #14]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	441a      	add	r2, r3
 8006fa4:	89fb      	ldrh	r3, [r7, #14]
 8006fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b087      	sub	sp, #28
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 809d 	bne.w	8007114 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d04c      	beq.n	800707c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	823b      	strh	r3, [r7, #16]
 8006ff0:	8a3b      	ldrh	r3, [r7, #16]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01b      	beq.n	8007032 <USB_EPClearStall+0x6c>
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007010:	81fb      	strh	r3, [r7, #14]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	441a      	add	r2, r3
 800701c:	89fb      	ldrh	r3, [r7, #14]
 800701e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	78db      	ldrb	r3, [r3, #3]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d06c      	beq.n	8007114 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	81bb      	strh	r3, [r7, #12]
 8007052:	89bb      	ldrh	r3, [r7, #12]
 8007054:	f083 0320 	eor.w	r3, r3, #32
 8007058:	81bb      	strh	r3, [r7, #12]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	89bb      	ldrh	r3, [r7, #12]
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]
 800707a:	e04b      	b.n	8007114 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	82fb      	strh	r3, [r7, #22]
 800708a:	8afb      	ldrh	r3, [r7, #22]
 800708c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01b      	beq.n	80070cc <USB_EPClearStall+0x106>
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	82bb      	strh	r3, [r7, #20]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	8abb      	ldrh	r3, [r7, #20]
 80070b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	827b      	strh	r3, [r7, #18]
 80070e4:	8a7b      	ldrh	r3, [r7, #18]
 80070e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070ea:	827b      	strh	r3, [r7, #18]
 80070ec:	8a7b      	ldrh	r3, [r7, #18]
 80070ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070f2:	827b      	strh	r3, [r7, #18]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	441a      	add	r2, r3
 80070fe:	8a7b      	ldrh	r3, [r7, #18]
 8007100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	b29b      	uxth	r3, r3
 8007112:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2280      	movs	r2, #128	; 0x80
 8007136:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800717c:	b29b      	uxth	r3, r3
 800717e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007180:	68fb      	ldr	r3, [r7, #12]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr

080071a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b08d      	sub	sp, #52	; 0x34
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	4611      	mov	r1, r2
 80071ae:	461a      	mov	r2, r3
 80071b0:	460b      	mov	r3, r1
 80071b2:	80fb      	strh	r3, [r7, #6]
 80071b4:	4613      	mov	r3, r2
 80071b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071b8:	88bb      	ldrh	r3, [r7, #4]
 80071ba:	3301      	adds	r3, #1
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	005a      	lsls	r2, r3, #1
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071da:	e01e      	b.n	800721a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	3301      	adds	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	3302      	adds	r3, #2
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	3302      	adds	r3, #2
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	3301      	adds	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	3b01      	subs	r3, #1
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1dd      	bne.n	80071dc <USB_WritePMA+0x3a>
  }
}
 8007220:	bf00      	nop
 8007222:	3734      	adds	r7, #52	; 0x34
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800722a:	b480      	push	{r7}
 800722c:	b08b      	sub	sp, #44	; 0x2c
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	4611      	mov	r1, r2
 8007236:	461a      	mov	r2, r3
 8007238:	460b      	mov	r3, r1
 800723a:	80fb      	strh	r3, [r7, #6]
 800723c:	4613      	mov	r3, r2
 800723e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007240:	88bb      	ldrh	r3, [r7, #4]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	b29b      	uxth	r3, r3
 8007246:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	005a      	lsls	r2, r3, #1
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800725c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
 8007262:	e01b      	b.n	800729c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	3302      	adds	r3, #2
 8007270:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	b2da      	uxtb	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	3301      	adds	r3, #1
 800728e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	3302      	adds	r3, #2
 8007294:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	3b01      	subs	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e0      	bne.n	8007264 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80072a2:	88bb      	ldrh	r3, [r7, #4]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	701a      	strb	r2, [r3, #0]
  }
}
 80072be:	bf00      	nop
 80072c0:	372c      	adds	r7, #44	; 0x2c
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80072d4:	2304      	movs	r3, #4
 80072d6:	2203      	movs	r2, #3
 80072d8:	2181      	movs	r1, #129	; 0x81
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 fc75 	bl	8008bca <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80072e6:	2010      	movs	r0, #16
 80072e8:	f001 fd84 	bl	8008df4 <USBD_static_malloc>
 80072ec:	4602      	mov	r2, r0
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80072fe:	2302      	movs	r3, #2
 8007300:	e005      	b.n	800730e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007308:	2200      	movs	r2, #0
 800730a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007322:	2181      	movs	r1, #129	; 0x81
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fc76 	bl	8008c16 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fd63 	bl	8008e0c <USBD_static_free>
    pdev->pClassData = NULL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007368:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007382:	2b00      	cmp	r3, #0
 8007384:	d045      	beq.n	8007412 <USBD_HID_Setup+0xba>
 8007386:	2b20      	cmp	r3, #32
 8007388:	f040 80d3 	bne.w	8007532 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	3b02      	subs	r3, #2
 8007392:	2b09      	cmp	r3, #9
 8007394:	d835      	bhi.n	8007402 <USBD_HID_Setup+0xaa>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBD_HID_Setup+0x44>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073f3 	.word	0x080073f3
 80073a0:	080073d3 	.word	0x080073d3
 80073a4:	08007403 	.word	0x08007403
 80073a8:	08007403 	.word	0x08007403
 80073ac:	08007403 	.word	0x08007403
 80073b0:	08007403 	.word	0x08007403
 80073b4:	08007403 	.word	0x08007403
 80073b8:	08007403 	.word	0x08007403
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073c5 	.word	0x080073c5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	601a      	str	r2, [r3, #0]
          break;
 80073d0:	e01e      	b.n	8007410 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2201      	movs	r2, #1
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f937 	bl	800864c <USBD_CtlSendData>
          break;
 80073de:	e017      	b.n	8007410 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	885b      	ldrh	r3, [r3, #2]
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	605a      	str	r2, [r3, #4]
          break;
 80073f0:	e00e      	b.n	8007410 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	3304      	adds	r3, #4
 80073f6:	2201      	movs	r2, #1
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 f926 	bl	800864c <USBD_CtlSendData>
          break;
 8007400:	e006      	b.n	8007410 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 f8b7 	bl	8008578 <USBD_CtlError>
          ret = USBD_FAIL;
 800740a:	2302      	movs	r3, #2
 800740c:	75fb      	strb	r3, [r7, #23]
          break;
 800740e:	bf00      	nop
      }
      break;
 8007410:	e096      	b.n	8007540 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b0b      	cmp	r3, #11
 8007418:	f200 8083 	bhi.w	8007522 <USBD_HID_Setup+0x1ca>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <USBD_HID_Setup+0xcc>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	08007455 	.word	0x08007455
 8007428:	08007523 	.word	0x08007523
 800742c:	08007523 	.word	0x08007523
 8007430:	08007523 	.word	0x08007523
 8007434:	08007523 	.word	0x08007523
 8007438:	08007523 	.word	0x08007523
 800743c:	0800747d 	.word	0x0800747d
 8007440:	08007523 	.word	0x08007523
 8007444:	08007523 	.word	0x08007523
 8007448:	08007523 	.word	0x08007523
 800744c:	080074d5 	.word	0x080074d5
 8007450:	080074fd 	.word	0x080074fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745a:	2b03      	cmp	r3, #3
 800745c:	d107      	bne.n	800746e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800745e:	f107 030e 	add.w	r3, r7, #14
 8007462:	2202      	movs	r2, #2
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 f8f0 	bl	800864c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800746c:	e060      	b.n	8007530 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f881 	bl	8008578 <USBD_CtlError>
            ret = USBD_FAIL;
 8007476:	2302      	movs	r3, #2
 8007478:	75fb      	strb	r3, [r7, #23]
          break;
 800747a:	e059      	b.n	8007530 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	885b      	ldrh	r3, [r3, #2]
 8007480:	0a1b      	lsrs	r3, r3, #8
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b22      	cmp	r3, #34	; 0x22
 8007486:	d108      	bne.n	800749a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	88db      	ldrh	r3, [r3, #6]
 800748c:	2b4a      	cmp	r3, #74	; 0x4a
 800748e:	bf28      	it	cs
 8007490:	234a      	movcs	r3, #74	; 0x4a
 8007492:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007494:	4b2d      	ldr	r3, [pc, #180]	; (800754c <USBD_HID_Setup+0x1f4>)
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	e015      	b.n	80074c6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	885b      	ldrh	r3, [r3, #2]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b21      	cmp	r3, #33	; 0x21
 80074a4:	d108      	bne.n	80074b8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80074a6:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <USBD_HID_Setup+0x1f8>)
 80074a8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	88db      	ldrh	r3, [r3, #6]
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	bf28      	it	cs
 80074b2:	2309      	movcs	r3, #9
 80074b4:	83fb      	strh	r3, [r7, #30]
 80074b6:	e006      	b.n	80074c6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 f85c 	bl	8008578 <USBD_CtlError>
            ret = USBD_FAIL;
 80074c0:	2302      	movs	r3, #2
 80074c2:	75fb      	strb	r3, [r7, #23]
            break;
 80074c4:	e034      	b.n	8007530 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80074c6:	8bfb      	ldrh	r3, [r7, #30]
 80074c8:	461a      	mov	r2, r3
 80074ca:	69b9      	ldr	r1, [r7, #24]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 f8bd 	bl	800864c <USBD_CtlSendData>
          break;
 80074d2:	e02d      	b.n	8007530 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d107      	bne.n	80074ee <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3308      	adds	r3, #8
 80074e2:	2201      	movs	r2, #1
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 f8b0 	bl	800864c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ec:	e020      	b.n	8007530 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 f841 	bl	8008578 <USBD_CtlError>
            ret = USBD_FAIL;
 80074f6:	2302      	movs	r3, #2
 80074f8:	75fb      	strb	r3, [r7, #23]
          break;
 80074fa:	e019      	b.n	8007530 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007502:	2b03      	cmp	r3, #3
 8007504:	d106      	bne.n	8007514 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	885b      	ldrh	r3, [r3, #2]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007512:	e00d      	b.n	8007530 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f82e 	bl	8008578 <USBD_CtlError>
            ret = USBD_FAIL;
 800751c:	2302      	movs	r3, #2
 800751e:	75fb      	strb	r3, [r7, #23]
          break;
 8007520:	e006      	b.n	8007530 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f827 	bl	8008578 <USBD_CtlError>
          ret = USBD_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	75fb      	strb	r3, [r7, #23]
          break;
 800752e:	bf00      	nop
      }
      break;
 8007530:	e006      	b.n	8007540 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 f81f 	bl	8008578 <USBD_CtlError>
      ret = USBD_FAIL;
 800753a:	2302      	movs	r3, #2
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	bf00      	nop
  }

  return ret;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200000e8 	.word	0x200000e8
 8007550:	200000d0 	.word	0x200000d0

08007554 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	2b03      	cmp	r3, #3
 8007572:	d10c      	bne.n	800758e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	7b1b      	ldrb	r3, [r3, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d108      	bne.n	800758e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2201      	movs	r2, #1
 8007580:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	2181      	movs	r1, #129	; 0x81
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f001 fbec 	bl	8008d66 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2222      	movs	r2, #34	; 0x22
 80075a4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80075a6:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000064 	.word	0x20000064

080075b8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2222      	movs	r2, #34	; 0x22
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000088 	.word	0x20000088

080075d8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2222      	movs	r2, #34	; 0x22
 80075e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	200000ac 	.word	0x200000ac

080075f8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	2200      	movs	r2, #0
 800760c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
	...

0800761c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220a      	movs	r2, #10
 8007628:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800762a:	4b03      	ldr	r3, [pc, #12]	; (8007638 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	200000dc 	.word	0x200000dc

0800763c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007650:	2302      	movs	r3, #2
 8007652:	e01a      	b.n	800768a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	79fa      	ldrb	r2, [r7, #7]
 8007680:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f001 fa3e 	bl	8008b04 <USBD_LL_Init>

  return USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
 80076b2:	e001      	b.n	80076b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80076b4:	2302      	movs	r3, #2
 80076b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 fa61 	bl	8008b94 <USBD_LL_Start>

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr

080076f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076fc:	2302      	movs	r3, #2
 80076fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	78fa      	ldrb	r2, [r7, #3]
 8007714:	4611      	mov	r1, r2
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	4611      	mov	r1, r2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3

  return USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 feca 	bl	8008500 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	2b01      	cmp	r3, #1
 800778e:	d00c      	beq.n	80077aa <USBD_LL_SetupStage+0x56>
 8007790:	2b01      	cmp	r3, #1
 8007792:	d302      	bcc.n	800779a <USBD_LL_SetupStage+0x46>
 8007794:	2b02      	cmp	r3, #2
 8007796:	d010      	beq.n	80077ba <USBD_LL_SetupStage+0x66>
 8007798:	e017      	b.n	80077ca <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9ca 	bl	8007b3c <USBD_StdDevReq>
      break;
 80077a8:	e01a      	b.n	80077e0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa2c 	bl	8007c10 <USBD_StdItfReq>
      break;
 80077b8:	e012      	b.n	80077e0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa6a 	bl	8007c9c <USBD_StdEPReq>
      break;
 80077c8:	e00a      	b.n	80077e0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80077d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 fa3b 	bl	8008c54 <USBD_LL_StallEP>
      break;
 80077de:	bf00      	nop
  }

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	460b      	mov	r3, r1
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d14b      	bne.n	8007896 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007804:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800780c:	2b03      	cmp	r3, #3
 800780e:	d134      	bne.n	800787a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	68da      	ldr	r2, [r3, #12]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	d919      	bls.n	8007850 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	1ad2      	subs	r2, r2, r3
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007832:	429a      	cmp	r2, r3
 8007834:	d203      	bcs.n	800783e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800783a:	b29b      	uxth	r3, r3
 800783c:	e002      	b.n	8007844 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007842:	b29b      	uxth	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 ff2d 	bl	80086a8 <USBD_CtlContinueRx>
 800784e:	e038      	b.n	80078c2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007862:	2b03      	cmp	r3, #3
 8007864:	d105      	bne.n	8007872 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 ff2a 	bl	80086cc <USBD_CtlSendStatus>
 8007878:	e023      	b.n	80078c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007880:	2b05      	cmp	r3, #5
 8007882:	d11e      	bne.n	80078c2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800788c:	2100      	movs	r1, #0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f001 f9e0 	bl	8008c54 <USBD_LL_StallEP>
 8007894:	e015      	b.n	80078c2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d108      	bne.n	80078be <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	7afa      	ldrb	r2, [r7, #11]
 80078b6:	4611      	mov	r1, r2
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	4798      	blx	r3
 80078bc:	e001      	b.n	80078c2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078be:	2302      	movs	r3, #2
 80078c0:	e000      	b.n	80078c4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	460b      	mov	r3, r1
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d17f      	bne.n	80079e0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3314      	adds	r3, #20
 80078e4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d15c      	bne.n	80079aa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d915      	bls.n	8007928 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	1ad2      	subs	r2, r2, r3
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	b29b      	uxth	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 feb5 	bl	8008684 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800791a:	2300      	movs	r3, #0
 800791c:	2200      	movs	r2, #0
 800791e:	2100      	movs	r1, #0
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f001 fa43 	bl	8008dac <USBD_LL_PrepareReceive>
 8007926:	e04e      	b.n	80079c6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	6912      	ldr	r2, [r2, #16]
 8007930:	fbb3 f1f2 	udiv	r1, r3, r2
 8007934:	fb02 f201 	mul.w	r2, r2, r1
 8007938:	1a9b      	subs	r3, r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d11c      	bne.n	8007978 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007946:	429a      	cmp	r2, r3
 8007948:	d316      	bcc.n	8007978 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007954:	429a      	cmp	r2, r3
 8007956:	d20f      	bcs.n	8007978 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fe91 	bl	8008684 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800796a:	2300      	movs	r3, #0
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f001 fa1b 	bl	8008dac <USBD_LL_PrepareReceive>
 8007976:	e026      	b.n	80079c6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800798a:	2b03      	cmp	r3, #3
 800798c:	d105      	bne.n	800799a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800799a:	2180      	movs	r1, #128	; 0x80
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 f959 	bl	8008c54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fea5 	bl	80086f2 <USBD_CtlReceiveStatus>
 80079a8:	e00d      	b.n	80079c6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d004      	beq.n	80079be <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d103      	bne.n	80079c6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80079be:	2180      	movs	r1, #128	; 0x80
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f001 f947 	bl	8008c54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d11d      	bne.n	8007a0c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff fe83 	bl	80076dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079de:	e015      	b.n	8007a0c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00d      	beq.n	8007a08 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d108      	bne.n	8007a08 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	7afa      	ldrb	r2, [r7, #11]
 8007a00:	4611      	mov	r1, r2
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3
 8007a06:	e001      	b.n	8007a0c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e000      	b.n	8007a0e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a1e:	2340      	movs	r3, #64	; 0x40
 8007a20:	2200      	movs	r2, #0
 8007a22:	2100      	movs	r1, #0
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f8d0 	bl	8008bca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2240      	movs	r2, #64	; 0x40
 8007a36:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2180      	movs	r1, #128	; 0x80
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f8c2 	bl	8008bca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2240      	movs	r2, #64	; 0x40
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6852      	ldr	r2, [r2, #4]
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	4611      	mov	r1, r2
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
  }

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr

08007ab6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2204      	movs	r2, #4
 8007ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	d105      	bne.n	8007afc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d10b      	bne.n	8007b32 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d004      	beq.n	8007b60 <USBD_StdDevReq+0x24>
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d002      	beq.n	8007b60 <USBD_StdDevReq+0x24>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <USBD_StdDevReq+0x34>
 8007b5e:	e04c      	b.n	8007bfa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
      break;
 8007b6e:	e049      	b.n	8007c04 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d83a      	bhi.n	8007bee <USBD_StdDevReq+0xb2>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <USBD_StdDevReq+0x44>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	08007be5 	.word	0x08007be5
 8007b88:	08007bef 	.word	0x08007bef
 8007b8c:	08007bdb 	.word	0x08007bdb
 8007b90:	08007bef 	.word	0x08007bef
 8007b94:	08007bb3 	.word	0x08007bb3
 8007b98:	08007ba9 	.word	0x08007ba9
 8007b9c:	08007bef 	.word	0x08007bef
 8007ba0:	08007bc7 	.word	0x08007bc7
 8007ba4:	08007bbd 	.word	0x08007bbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9d4 	bl	8007f58 <USBD_GetDescriptor>
          break;
 8007bb0:	e022      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb37 	bl	8008228 <USBD_SetAddress>
          break;
 8007bba:	e01d      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fb74 	bl	80082ac <USBD_SetConfig>
          break;
 8007bc4:	e018      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fbfd 	bl	80083c8 <USBD_GetConfig>
          break;
 8007bce:	e013      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fc2c 	bl	8008430 <USBD_GetStatus>
          break;
 8007bd8:	e00e      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fc5a 	bl	8008496 <USBD_SetFeature>
          break;
 8007be2:	e009      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc69 	bl	80084be <USBD_ClrFeature>
          break;
 8007bec:	e004      	b.n	8007bf8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fcc1 	bl	8008578 <USBD_CtlError>
          break;
 8007bf6:	bf00      	nop
      }
      break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fcbb 	bl	8008578 <USBD_CtlError>
      break;
 8007c02:	bf00      	nop
  }

  return ret;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop

08007c10 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d003      	beq.n	8007c32 <USBD_StdItfReq+0x22>
 8007c2a:	2b40      	cmp	r3, #64	; 0x40
 8007c2c:	d001      	beq.n	8007c32 <USBD_StdItfReq+0x22>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d12a      	bne.n	8007c88 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d81d      	bhi.n	8007c7a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	889b      	ldrh	r3, [r3, #4]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d813      	bhi.n	8007c70 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	88db      	ldrh	r3, [r3, #6]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d110      	bne.n	8007c84 <USBD_StdItfReq+0x74>
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10d      	bne.n	8007c84 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fd2f 	bl	80086cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c6e:	e009      	b.n	8007c84 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc80 	bl	8008578 <USBD_CtlError>
          break;
 8007c78:	e004      	b.n	8007c84 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fc7b 	bl	8008578 <USBD_CtlError>
          break;
 8007c82:	e000      	b.n	8007c86 <USBD_StdItfReq+0x76>
          break;
 8007c84:	bf00      	nop
      }
      break;
 8007c86:	e004      	b.n	8007c92 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fc74 	bl	8008578 <USBD_CtlError>
      break;
 8007c90:	bf00      	nop
  }

  return USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	889b      	ldrh	r3, [r3, #4]
 8007cae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d004      	beq.n	8007cc6 <USBD_StdEPReq+0x2a>
 8007cbc:	2b40      	cmp	r3, #64	; 0x40
 8007cbe:	d002      	beq.n	8007cc6 <USBD_StdEPReq+0x2a>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <USBD_StdEPReq+0x3a>
 8007cc4:	e13d      	b.n	8007f42 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
      break;
 8007cd4:	e13a      	b.n	8007f4c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cde:	2b20      	cmp	r3, #32
 8007ce0:	d10a      	bne.n	8007cf8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	e12a      	b.n	8007f4e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d03e      	beq.n	8007d7e <USBD_StdEPReq+0xe2>
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d002      	beq.n	8007d0a <USBD_StdEPReq+0x6e>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d070      	beq.n	8007dea <USBD_StdEPReq+0x14e>
 8007d08:	e115      	b.n	8007f36 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d002      	beq.n	8007d1a <USBD_StdEPReq+0x7e>
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d015      	beq.n	8007d44 <USBD_StdEPReq+0xa8>
 8007d18:	e02b      	b.n	8007d72 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <USBD_StdEPReq+0x9e>
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d009      	beq.n	8007d3a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 ff92 	bl	8008c54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d30:	2180      	movs	r1, #128	; 0x80
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ff8e 	bl	8008c54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d38:	e020      	b.n	8007d7c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fc1b 	bl	8008578 <USBD_CtlError>
              break;
 8007d42:	e01b      	b.n	8007d7c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10e      	bne.n	8007d6a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <USBD_StdEPReq+0xce>
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	2b80      	cmp	r3, #128	; 0x80
 8007d56:	d008      	beq.n	8007d6a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	88db      	ldrh	r3, [r3, #6]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 ff75 	bl	8008c54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fcae 	bl	80086cc <USBD_CtlSendStatus>

              break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fbff 	bl	8008578 <USBD_CtlError>
              break;
 8007d7a:	bf00      	nop
          }
          break;
 8007d7c:	e0e0      	b.n	8007f40 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d002      	beq.n	8007d8e <USBD_StdEPReq+0xf2>
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d015      	beq.n	8007db8 <USBD_StdEPReq+0x11c>
 8007d8c:	e026      	b.n	8007ddc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00c      	beq.n	8007dae <USBD_StdEPReq+0x112>
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b80      	cmp	r3, #128	; 0x80
 8007d98:	d009      	beq.n	8007dae <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 ff58 	bl	8008c54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007da4:	2180      	movs	r1, #128	; 0x80
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 ff54 	bl	8008c54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dac:	e01c      	b.n	8007de8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fbe1 	bl	8008578 <USBD_CtlError>
              break;
 8007db6:	e017      	b.n	8007de8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	885b      	ldrh	r3, [r3, #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d112      	bne.n	8007de6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 ff5f 	bl	8008c92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fc79 	bl	80086cc <USBD_CtlSendStatus>
              }
              break;
 8007dda:	e004      	b.n	8007de6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fbca 	bl	8008578 <USBD_CtlError>
              break;
 8007de4:	e000      	b.n	8007de8 <USBD_StdEPReq+0x14c>
              break;
 8007de6:	bf00      	nop
          }
          break;
 8007de8:	e0aa      	b.n	8007f40 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d002      	beq.n	8007dfa <USBD_StdEPReq+0x15e>
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d032      	beq.n	8007e5e <USBD_StdEPReq+0x1c2>
 8007df8:	e097      	b.n	8007f2a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d007      	beq.n	8007e10 <USBD_StdEPReq+0x174>
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	2b80      	cmp	r3, #128	; 0x80
 8007e04:	d004      	beq.n	8007e10 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fbb5 	bl	8008578 <USBD_CtlError>
                break;
 8007e0e:	e091      	b.n	8007f34 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da0b      	bge.n	8007e30 <USBD_StdEPReq+0x194>
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	3310      	adds	r3, #16
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	e00b      	b.n	8007e48 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4413      	add	r3, r2
 8007e46:	3304      	adds	r3, #4
 8007e48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2202      	movs	r2, #2
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fbf8 	bl	800864c <USBD_CtlSendData>
              break;
 8007e5c:	e06a      	b.n	8007f34 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da11      	bge.n	8007e8a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	f003 020f 	and.w	r2, r3, #15
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	3318      	adds	r3, #24
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d117      	bne.n	8007eb0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fb78 	bl	8008578 <USBD_CtlError>
                  break;
 8007e88:	e054      	b.n	8007f34 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	f003 020f 	and.w	r2, r3, #15
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb65 	bl	8008578 <USBD_CtlError>
                  break;
 8007eae:	e041      	b.n	8007f34 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	da0b      	bge.n	8007ed0 <USBD_StdEPReq+0x234>
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	3310      	adds	r3, #16
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	3304      	adds	r3, #4
 8007ece:	e00b      	b.n	8007ee8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <USBD_StdEPReq+0x25a>
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	2b80      	cmp	r3, #128	; 0x80
 8007ef4:	d103      	bne.n	8007efe <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	e00e      	b.n	8007f1c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fee4 	bl	8008cd0 <USBD_LL_IsStallEP>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e002      	b.n	8007f1c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fb92 	bl	800864c <USBD_CtlSendData>
              break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fb23 	bl	8008578 <USBD_CtlError>
              break;
 8007f32:	bf00      	nop
          }
          break;
 8007f34:	e004      	b.n	8007f40 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fb1d 	bl	8008578 <USBD_CtlError>
          break;
 8007f3e:	bf00      	nop
      }
      break;
 8007f40:	e004      	b.n	8007f4c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fb17 	bl	8008578 <USBD_CtlError>
      break;
 8007f4a:	bf00      	nop
  }

  return ret;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	2b06      	cmp	r3, #6
 8007f7a:	f200 8128 	bhi.w	80081ce <USBD_GetDescriptor+0x276>
 8007f7e:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <USBD_GetDescriptor+0x2c>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007fa1 	.word	0x08007fa1
 8007f88:	08007fb9 	.word	0x08007fb9
 8007f8c:	08007ff9 	.word	0x08007ff9
 8007f90:	080081cf 	.word	0x080081cf
 8007f94:	080081cf 	.word	0x080081cf
 8007f98:	0800816f 	.word	0x0800816f
 8007f9c:	0800819b 	.word	0x0800819b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	7c12      	ldrb	r2, [r2, #16]
 8007fac:	f107 0108 	add.w	r1, r7, #8
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	60f8      	str	r0, [r7, #12]
      break;
 8007fb6:	e112      	b.n	80081de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7c1b      	ldrb	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10d      	bne.n	8007fdc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f107 0208 	add.w	r2, r7, #8
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
 8007fd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fda:	e100      	b.n	80081de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	f107 0208 	add.w	r2, r7, #8
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	701a      	strb	r2, [r3, #0]
      break;
 8007ff6:	e0f2      	b.n	80081de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	885b      	ldrh	r3, [r3, #2]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	f200 80ac 	bhi.w	800815c <USBD_GetDescriptor+0x204>
 8008004:	a201      	add	r2, pc, #4	; (adr r2, 800800c <USBD_GetDescriptor+0xb4>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	08008025 	.word	0x08008025
 8008010:	08008059 	.word	0x08008059
 8008014:	0800808d 	.word	0x0800808d
 8008018:	080080c1 	.word	0x080080c1
 800801c:	080080f5 	.word	0x080080f5
 8008020:	08008129 	.word	0x08008129
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7c12      	ldrb	r2, [r2, #16]
 800803c:	f107 0108 	add.w	r1, r7, #8
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008046:	e091      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa94 	bl	8008578 <USBD_CtlError>
            err++;
 8008050:	7afb      	ldrb	r3, [r7, #11]
 8008052:	3301      	adds	r3, #1
 8008054:	72fb      	strb	r3, [r7, #11]
          break;
 8008056:	e089      	b.n	800816c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	7c12      	ldrb	r2, [r2, #16]
 8008070:	f107 0108 	add.w	r1, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807a:	e077      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa7a 	bl	8008578 <USBD_CtlError>
            err++;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	3301      	adds	r3, #1
 8008088:	72fb      	strb	r3, [r7, #11]
          break;
 800808a:	e06f      	b.n	800816c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ae:	e05d      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa60 	bl	8008578 <USBD_CtlError>
            err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
          break;
 80080be:	e055      	b.n	800816c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080e2:	e043      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa46 	bl	8008578 <USBD_CtlError>
            err++;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	3301      	adds	r3, #1
 80080f0:	72fb      	strb	r3, [r7, #11]
          break;
 80080f2:	e03b      	b.n	800816c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008116:	e029      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa2c 	bl	8008578 <USBD_CtlError>
            err++;
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	3301      	adds	r3, #1
 8008124:	72fb      	strb	r3, [r7, #11]
          break;
 8008126:	e021      	b.n	800816c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800814a:	e00f      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa12 	bl	8008578 <USBD_CtlError>
            err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
          break;
 800815a:	e007      	b.n	800816c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa0a 	bl	8008578 <USBD_CtlError>
          err++;
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	3301      	adds	r3, #1
 8008168:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800816a:	e038      	b.n	80081de <USBD_GetDescriptor+0x286>
 800816c:	e037      	b.n	80081de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7c1b      	ldrb	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d109      	bne.n	800818a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	f107 0208 	add.w	r2, r7, #8
 8008182:	4610      	mov	r0, r2
 8008184:	4798      	blx	r3
 8008186:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008188:	e029      	b.n	80081de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f9f3 	bl	8008578 <USBD_CtlError>
        err++;
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	3301      	adds	r3, #1
 8008196:	72fb      	strb	r3, [r7, #11]
      break;
 8008198:	e021      	b.n	80081de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	7c1b      	ldrb	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10d      	bne.n	80081be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081aa:	f107 0208 	add.w	r2, r7, #8
 80081ae:	4610      	mov	r0, r2
 80081b0:	4798      	blx	r3
 80081b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	2207      	movs	r2, #7
 80081ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081bc:	e00f      	b.n	80081de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f9d9 	bl	8008578 <USBD_CtlError>
        err++;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	3301      	adds	r3, #1
 80081ca:	72fb      	strb	r3, [r7, #11]
      break;
 80081cc:	e007      	b.n	80081de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9d1 	bl	8008578 <USBD_CtlError>
      err++;
 80081d6:	7afb      	ldrb	r3, [r7, #11]
 80081d8:	3301      	adds	r3, #1
 80081da:	72fb      	strb	r3, [r7, #11]
      break;
 80081dc:	bf00      	nop
  }

  if (err != 0U)
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d11c      	bne.n	800821e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80081e4:	893b      	ldrh	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d011      	beq.n	800820e <USBD_GetDescriptor+0x2b6>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	88db      	ldrh	r3, [r3, #6]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00d      	beq.n	800820e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	88da      	ldrh	r2, [r3, #6]
 80081f6:	893b      	ldrh	r3, [r7, #8]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bf28      	it	cs
 80081fc:	4613      	movcs	r3, r2
 80081fe:	b29b      	uxth	r3, r3
 8008200:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008202:	893b      	ldrh	r3, [r7, #8]
 8008204:	461a      	mov	r2, r3
 8008206:	68f9      	ldr	r1, [r7, #12]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa1f 	bl	800864c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	88db      	ldrh	r3, [r3, #6]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d104      	bne.n	8008220 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa58 	bl	80086cc <USBD_CtlSendStatus>
 800821c:	e000      	b.n	8008220 <USBD_GetDescriptor+0x2c8>
    return;
 800821e:	bf00      	nop
    }
  }
}
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop

08008228 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	889b      	ldrh	r3, [r3, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d130      	bne.n	800829c <USBD_SetAddress+0x74>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	88db      	ldrh	r3, [r3, #6]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d12c      	bne.n	800829c <USBD_SetAddress+0x74>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	2b7f      	cmp	r3, #127	; 0x7f
 8008248:	d828      	bhi.n	800829c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	885b      	ldrh	r3, [r3, #2]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008254:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825c:	2b03      	cmp	r3, #3
 800825e:	d104      	bne.n	800826a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f988 	bl	8008578 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008268:	e01c      	b.n	80082a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7bfa      	ldrb	r2, [r7, #15]
 800826e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fd56 	bl	8008d28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fa25 	bl	80086cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008290:	e008      	b.n	80082a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829a:	e003      	b.n	80082a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f96a 	bl	8008578 <USBD_CtlError>
  }
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <USBD_SetConfig+0x118>)
 80082be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082c0:	4b40      	ldr	r3, [pc, #256]	; (80083c4 <USBD_SetConfig+0x118>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d904      	bls.n	80082d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f954 	bl	8008578 <USBD_CtlError>
 80082d0:	e075      	b.n	80083be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d002      	beq.n	80082e2 <USBD_SetConfig+0x36>
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d023      	beq.n	8008328 <USBD_SetConfig+0x7c>
 80082e0:	e062      	b.n	80083a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80082e2:	4b38      	ldr	r3, [pc, #224]	; (80083c4 <USBD_SetConfig+0x118>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01a      	beq.n	8008320 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80082ea:	4b36      	ldr	r3, [pc, #216]	; (80083c4 <USBD_SetConfig+0x118>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2203      	movs	r2, #3
 80082f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082fc:	4b31      	ldr	r3, [pc, #196]	; (80083c4 <USBD_SetConfig+0x118>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff f9f4 	bl	80076f0 <USBD_SetClassConfig>
 8008308:	4603      	mov	r3, r0
 800830a:	2b02      	cmp	r3, #2
 800830c:	d104      	bne.n	8008318 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f931 	bl	8008578 <USBD_CtlError>
            return;
 8008316:	e052      	b.n	80083be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f9d7 	bl	80086cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800831e:	e04e      	b.n	80083be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f9d3 	bl	80086cc <USBD_CtlSendStatus>
        break;
 8008326:	e04a      	b.n	80083be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008328:	4b26      	ldr	r3, [pc, #152]	; (80083c4 <USBD_SetConfig+0x118>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d112      	bne.n	8008356 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008338:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <USBD_SetConfig+0x118>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008342:	4b20      	ldr	r3, [pc, #128]	; (80083c4 <USBD_SetConfig+0x118>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff f9f0 	bl	800772e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9bc 	bl	80086cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008354:	e033      	b.n	80083be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008356:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <USBD_SetConfig+0x118>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d01d      	beq.n	80083a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff f9de 	bl	800772e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008372:	4b14      	ldr	r3, [pc, #80]	; (80083c4 <USBD_SetConfig+0x118>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <USBD_SetConfig+0x118>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff f9b4 	bl	80076f0 <USBD_SetClassConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	2b02      	cmp	r3, #2
 800838c:	d104      	bne.n	8008398 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8f1 	bl	8008578 <USBD_CtlError>
            return;
 8008396:	e012      	b.n	80083be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f997 	bl	80086cc <USBD_CtlSendStatus>
        break;
 800839e:	e00e      	b.n	80083be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f993 	bl	80086cc <USBD_CtlSendStatus>
        break;
 80083a6:	e00a      	b.n	80083be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8e4 	bl	8008578 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80083b0:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <USBD_SetConfig+0x118>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff f9b9 	bl	800772e <USBD_ClrClassConfig>
        break;
 80083bc:	bf00      	nop
    }
  }
}
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	200001c8 	.word	0x200001c8

080083c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88db      	ldrh	r3, [r3, #6]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d004      	beq.n	80083e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f8cb 	bl	8008578 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083e2:	e021      	b.n	8008428 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	db17      	blt.n	800841e <USBD_GetConfig+0x56>
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	dd02      	ble.n	80083f8 <USBD_GetConfig+0x30>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d00b      	beq.n	800840e <USBD_GetConfig+0x46>
 80083f6:	e012      	b.n	800841e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3308      	adds	r3, #8
 8008402:	2201      	movs	r2, #1
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f920 	bl	800864c <USBD_CtlSendData>
        break;
 800840c:	e00c      	b.n	8008428 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3304      	adds	r3, #4
 8008412:	2201      	movs	r2, #1
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f918 	bl	800864c <USBD_CtlSendData>
        break;
 800841c:	e004      	b.n	8008428 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8a9 	bl	8008578 <USBD_CtlError>
        break;
 8008426:	bf00      	nop
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008440:	3b01      	subs	r3, #1
 8008442:	2b02      	cmp	r3, #2
 8008444:	d81e      	bhi.n	8008484 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d004      	beq.n	8008458 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f891 	bl	8008578 <USBD_CtlError>
        break;
 8008456:	e01a      	b.n	800848e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f043 0202 	orr.w	r2, r3, #2
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	330c      	adds	r3, #12
 8008478:	2202      	movs	r2, #2
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f8e5 	bl	800864c <USBD_CtlSendData>
      break;
 8008482:	e004      	b.n	800848e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f876 	bl	8008578 <USBD_CtlError>
      break;
 800848c:	bf00      	nop
  }
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	885b      	ldrh	r3, [r3, #2]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d106      	bne.n	80084b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f90b 	bl	80086cc <USBD_CtlSendStatus>
  }
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d80b      	bhi.n	80084ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	885b      	ldrh	r3, [r3, #2]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d10c      	bne.n	80084f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f8f1 	bl	80086cc <USBD_CtlSendStatus>
      }
      break;
 80084ea:	e004      	b.n	80084f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f842 	bl	8008578 <USBD_CtlError>
      break;
 80084f4:	e000      	b.n	80084f8 <USBD_ClrFeature+0x3a>
      break;
 80084f6:	bf00      	nop
  }
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781a      	ldrb	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	785a      	ldrb	r2, [r3, #1]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	3302      	adds	r3, #2
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b29a      	uxth	r2, r3
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	3303      	adds	r3, #3
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	b29b      	uxth	r3, r3
 800852e:	4413      	add	r3, r2
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	3304      	adds	r3, #4
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	3305      	adds	r3, #5
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	4413      	add	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	3306      	adds	r3, #6
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b29a      	uxth	r2, r3
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	3307      	adds	r3, #7
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	b29b      	uxth	r3, r3
 8008566:	4413      	add	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	80da      	strh	r2, [r3, #6]

}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fb65 	bl	8008c54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800858a:	2100      	movs	r1, #0
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fb61 	bl	8008c54 <USBD_LL_StallEP>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d032      	beq.n	8008616 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f834 	bl	800861e <USBD_GetLen>
 80085b6:	4603      	mov	r3, r0
 80085b8:	3301      	adds	r3, #1
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	75fa      	strb	r2, [r7, #23]
 80085ca:	461a      	mov	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4413      	add	r3, r2
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	75fa      	strb	r2, [r7, #23]
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	2203      	movs	r2, #3
 80085e4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085e6:	e012      	b.n	800860e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	60fa      	str	r2, [r7, #12]
 80085ee:	7dfa      	ldrb	r2, [r7, #23]
 80085f0:	1c51      	adds	r1, r2, #1
 80085f2:	75f9      	strb	r1, [r7, #23]
 80085f4:	4611      	mov	r1, r2
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	440a      	add	r2, r1
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	75fa      	strb	r2, [r7, #23]
 8008604:	461a      	mov	r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	4413      	add	r3, r2
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e8      	bne.n	80085e8 <USBD_GetString+0x4e>
    }
  }
}
 8008616:	bf00      	nop
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800862a:	e005      	b.n	8008638 <USBD_GetLen+0x1a>
  {
    len++;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	3301      	adds	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3301      	adds	r3, #1
 8008636:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1f5      	bne.n	800862c <USBD_GetLen+0xe>
  }

  return len;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr

0800864c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2202      	movs	r2, #2
 800865e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008668:	88fa      	ldrh	r2, [r7, #6]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	2100      	movs	r1, #0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 fb76 	bl	8008d66 <USBD_LL_Transmit>

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	2100      	movs	r1, #0
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fb64 	bl	8008d66 <USBD_LL_Transmit>

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086b6:	88fb      	ldrh	r3, [r7, #6]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	2100      	movs	r1, #0
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fb75 	bl	8008dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2204      	movs	r2, #4
 80086d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086dc:	2300      	movs	r3, #0
 80086de:	2200      	movs	r2, #0
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fb3f 	bl	8008d66 <USBD_LL_Transmit>

  return USBD_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2205      	movs	r2, #5
 80086fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008702:	2300      	movs	r3, #0
 8008704:	2200      	movs	r2, #0
 8008706:	2100      	movs	r1, #0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fb4f 	bl	8008dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800871c:	2200      	movs	r2, #0
 800871e:	490e      	ldr	r1, [pc, #56]	; (8008758 <MX_USB_DEVICE_Init+0x40>)
 8008720:	480e      	ldr	r0, [pc, #56]	; (800875c <MX_USB_DEVICE_Init+0x44>)
 8008722:	f7fe ff8b 	bl	800763c <USBD_Init>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800872c:	f7f8 fdcc 	bl	80012c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008730:	490b      	ldr	r1, [pc, #44]	; (8008760 <MX_USB_DEVICE_Init+0x48>)
 8008732:	480a      	ldr	r0, [pc, #40]	; (800875c <MX_USB_DEVICE_Init+0x44>)
 8008734:	f7fe ffad 	bl	8007692 <USBD_RegisterClass>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800873e:	f7f8 fdc3 	bl	80012c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008742:	4806      	ldr	r0, [pc, #24]	; (800875c <MX_USB_DEVICE_Init+0x44>)
 8008744:	f7fe ffbe 	bl	80076c4 <USBD_Start>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800874e:	f7f8 fdbb 	bl	80012c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000134 	.word	0x20000134
 800875c:	20000250 	.word	0x20000250
 8008760:	2000002c 	.word	0x2000002c

08008764 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2212      	movs	r2, #18
 8008774:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008776:	4b03      	ldr	r3, [pc, #12]	; (8008784 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000150 	.word	0x20000150

08008788 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2204      	movs	r2, #4
 8008798:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	20000164 	.word	0x20000164

080087ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d105      	bne.n	80087ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4907      	ldr	r1, [pc, #28]	; (80087e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087c2:	4808      	ldr	r0, [pc, #32]	; (80087e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087c4:	f7ff fee9 	bl	800859a <USBD_GetString>
 80087c8:	e004      	b.n	80087d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4904      	ldr	r1, [pc, #16]	; (80087e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80087ce:	4805      	ldr	r0, [pc, #20]	; (80087e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80087d0:	f7ff fee3 	bl	800859a <USBD_GetString>
  }
  return USBD_StrDesc;
 80087d4:	4b02      	ldr	r3, [pc, #8]	; (80087e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000514 	.word	0x20000514
 80087e4:	08008f10 	.word	0x08008f10

080087e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	4603      	mov	r3, r0
 80087f0:	6039      	str	r1, [r7, #0]
 80087f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	4904      	ldr	r1, [pc, #16]	; (8008808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087f8:	4804      	ldr	r0, [pc, #16]	; (800880c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087fa:	f7ff fece 	bl	800859a <USBD_GetString>
  return USBD_StrDesc;
 80087fe:	4b02      	ldr	r3, [pc, #8]	; (8008808 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000514 	.word	0x20000514
 800880c:	08008f28 	.word	0x08008f28

08008810 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	6039      	str	r1, [r7, #0]
 800881a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	221a      	movs	r2, #26
 8008820:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008822:	f000 f843 	bl	80088ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008826:	4b02      	ldr	r3, [pc, #8]	; (8008830 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20000168 	.word	0x20000168

08008834 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4907      	ldr	r1, [pc, #28]	; (8008868 <USBD_FS_ConfigStrDescriptor+0x34>)
 800884a:	4808      	ldr	r0, [pc, #32]	; (800886c <USBD_FS_ConfigStrDescriptor+0x38>)
 800884c:	f7ff fea5 	bl	800859a <USBD_GetString>
 8008850:	e004      	b.n	800885c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	4904      	ldr	r1, [pc, #16]	; (8008868 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008856:	4805      	ldr	r0, [pc, #20]	; (800886c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008858:	f7ff fe9f 	bl	800859a <USBD_GetString>
  }
  return USBD_StrDesc;
 800885c:	4b02      	ldr	r3, [pc, #8]	; (8008868 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000514 	.word	0x20000514
 800886c:	08008f3c 	.word	0x08008f3c

08008870 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	6039      	str	r1, [r7, #0]
 800887a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d105      	bne.n	800888e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4907      	ldr	r1, [pc, #28]	; (80088a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008886:	4808      	ldr	r0, [pc, #32]	; (80088a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008888:	f7ff fe87 	bl	800859a <USBD_GetString>
 800888c:	e004      	b.n	8008898 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008892:	4805      	ldr	r0, [pc, #20]	; (80088a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008894:	f7ff fe81 	bl	800859a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000514 	.word	0x20000514
 80088a8:	08008f48 	.word	0x08008f48

080088ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <Get_SerialNum+0x44>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088b8:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <Get_SerialNum+0x48>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <Get_SerialNum+0x4c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088d2:	2208      	movs	r2, #8
 80088d4:	4909      	ldr	r1, [pc, #36]	; (80088fc <Get_SerialNum+0x50>)
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f814 	bl	8008904 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088dc:	2204      	movs	r2, #4
 80088de:	4908      	ldr	r1, [pc, #32]	; (8008900 <Get_SerialNum+0x54>)
 80088e0:	68b8      	ldr	r0, [r7, #8]
 80088e2:	f000 f80f 	bl	8008904 <IntToUnicode>
  }
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	1ffff7e8 	.word	0x1ffff7e8
 80088f4:	1ffff7ec 	.word	0x1ffff7ec
 80088f8:	1ffff7f0 	.word	0x1ffff7f0
 80088fc:	2000016a 	.word	0x2000016a
 8008900:	2000017a 	.word	0x2000017a

08008904 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008916:	2300      	movs	r3, #0
 8008918:	75fb      	strb	r3, [r7, #23]
 800891a:	e027      	b.n	800896c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	0f1b      	lsrs	r3, r3, #28
 8008920:	2b09      	cmp	r3, #9
 8008922:	d80b      	bhi.n	800893c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	0f1b      	lsrs	r3, r3, #28
 8008928:	b2da      	uxtb	r2, r3
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	4619      	mov	r1, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	440b      	add	r3, r1
 8008934:	3230      	adds	r2, #48	; 0x30
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e00a      	b.n	8008952 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	0f1b      	lsrs	r3, r3, #28
 8008940:	b2da      	uxtb	r2, r3
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	4619      	mov	r1, r3
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	440b      	add	r3, r1
 800894c:	3237      	adds	r2, #55	; 0x37
 800894e:	b2d2      	uxtb	r2, r2
 8008950:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	3301      	adds	r3, #1
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	3301      	adds	r3, #1
 800896a:	75fb      	strb	r3, [r7, #23]
 800896c:	7dfa      	ldrb	r2, [r7, #23]
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	429a      	cmp	r2, r3
 8008972:	d3d3      	bcc.n	800891c <IntToUnicode+0x18>
  }
}
 8008974:	bf00      	nop
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	bc80      	pop	{r7}
 800897c:	4770      	bx	lr
	...

08008980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a0d      	ldr	r2, [pc, #52]	; (80089c4 <HAL_PCD_MspInit+0x44>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d113      	bne.n	80089ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008992:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <HAL_PCD_MspInit+0x48>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	4a0c      	ldr	r2, [pc, #48]	; (80089c8 <HAL_PCD_MspInit+0x48>)
 8008998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800899c:	61d3      	str	r3, [r2, #28]
 800899e:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <HAL_PCD_MspInit+0x48>)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80089aa:	2200      	movs	r2, #0
 80089ac:	2100      	movs	r1, #0
 80089ae:	2014      	movs	r0, #20
 80089b0:	f7f8 fec5 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80089b4:	2014      	movs	r0, #20
 80089b6:	f7f8 fede 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40005c00 	.word	0x40005c00
 80089c8:	40021000 	.word	0x40021000

080089cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fe feb6 	bl	8007754 <USBD_LL_SetupStage>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	440b      	add	r3, r1
 8008a10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7fe fee6 	bl	80077ea <USBD_LL_DataOutStage>
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	440b      	add	r3, r1
 8008a46:	333c      	adds	r3, #60	; 0x3c
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7fe ff3d 	bl	80078cc <USBD_LL_DataInStage>
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff f84d 	bl	8007b08 <USBD_LL_SOF>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d001      	beq.n	8008a8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a8a:	f7f8 fc1d 	bl	80012c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a94:	7bfa      	ldrb	r2, [r7, #15]
 8008a96:	4611      	mov	r1, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fffd 	bl	8007a98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe ffb6 	bl	8007a16 <USBD_LL_Reset>
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fff7 	bl	8007ab6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ad0:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <HAL_PCD_SuspendCallback+0x30>)
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	4a03      	ldr	r2, [pc, #12]	; (8008ae4 <HAL_PCD_SuspendCallback+0x30>)
 8008ad6:	f043 0306 	orr.w	r3, r3, #6
 8008ada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	e000ed00 	.word	0xe000ed00

08008ae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fff1 	bl	8007ade <USBD_LL_Resume>
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b0c:	4a1f      	ldr	r2, [pc, #124]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a1d      	ldr	r2, [pc, #116]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008b1c:	4b1b      	ldr	r3, [pc, #108]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b1e:	4a1c      	ldr	r2, [pc, #112]	; (8008b90 <USBD_LL_Init+0x8c>)
 8008b20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b22:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b24:	2208      	movs	r2, #8
 8008b26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b2e:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b34:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b40:	4812      	ldr	r0, [pc, #72]	; (8008b8c <USBD_LL_Init+0x88>)
 8008b42:	f7f9 ffcd 	bl	8002ae0 <HAL_PCD_Init>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008b4c:	f7f8 fbbc 	bl	80012c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b56:	2318      	movs	r3, #24
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f7fb fc29 	bl	80043b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b66:	2358      	movs	r3, #88	; 0x58
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2180      	movs	r1, #128	; 0x80
 8008b6c:	f7fb fc21 	bl	80043b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2181      	movs	r1, #129	; 0x81
 8008b7e:	f7fb fc18 	bl	80043b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000714 	.word	0x20000714
 8008b90:	40005c00 	.word	0x40005c00

08008b94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fa f8a3 	bl	8002cf6 <HAL_PCD_Start>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f93c 	bl	8008e34 <USBD_Get_USB_Status>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4603      	mov	r3, r0
 8008bda:	70fb      	strb	r3, [r7, #3]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70bb      	strb	r3, [r7, #2]
 8008be0:	4613      	mov	r3, r2
 8008be2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bf2:	78bb      	ldrb	r3, [r7, #2]
 8008bf4:	883a      	ldrh	r2, [r7, #0]
 8008bf6:	78f9      	ldrb	r1, [r7, #3]
 8008bf8:	f7fa fa1d 	bl	8003036 <HAL_PCD_EP_Open>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f916 	bl	8008e34 <USBD_Get_USB_Status>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fa fa64 	bl	8003102 <HAL_PCD_EP_Close>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 f8f7 	bl	8008e34 <USBD_Get_USB_Status>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fa fb0d 	bl	8003292 <HAL_PCD_EP_SetStall>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f8d8 	bl	8008e34 <USBD_Get_USB_Status>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fa fb4e 	bl	8003352 <HAL_PCD_EP_ClrStall>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f8b9 	bl	8008e34 <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ce2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	da0c      	bge.n	8008d06 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	440b      	add	r3, r1
 8008d00:	3302      	adds	r3, #2
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	e00b      	b.n	8008d1e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d06:	78fb      	ldrb	r3, [r7, #3]
 8008d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d0c:	68f9      	ldr	r1, [r7, #12]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	440b      	add	r3, r1
 8008d18:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008d1c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr

08008d28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fa f950 	bl	8002fec <HAL_PCD_SetAddress>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 f86e 	bl	8008e34 <USBD_Get_USB_Status>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	461a      	mov	r2, r3
 8008d72:	460b      	mov	r3, r1
 8008d74:	72fb      	strb	r3, [r7, #11]
 8008d76:	4613      	mov	r3, r2
 8008d78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d88:	893b      	ldrh	r3, [r7, #8]
 8008d8a:	7af9      	ldrb	r1, [r7, #11]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f7fa fa3d 	bl	800320c <HAL_PCD_EP_Transmit>
 8008d92:	4603      	mov	r3, r0
 8008d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f84b 	bl	8008e34 <USBD_Get_USB_Status>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	607a      	str	r2, [r7, #4]
 8008db6:	461a      	mov	r2, r3
 8008db8:	460b      	mov	r3, r1
 8008dba:	72fb      	strb	r3, [r7, #11]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dce:	893b      	ldrh	r3, [r7, #8]
 8008dd0:	7af9      	ldrb	r1, [r7, #11]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f7fa f9dd 	bl	8003192 <HAL_PCD_EP_Receive>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 f828 	bl	8008e34 <USBD_Get_USB_Status>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008de8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <USBD_static_malloc+0x14>)
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bc80      	pop	{r7}
 8008e06:	4770      	bx	lr
 8008e08:	200001cc 	.word	0x200001cc

08008e0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]

}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr

08008e1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e2a:	bf00      	nop
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e42:	79fb      	ldrb	r3, [r7, #7]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d817      	bhi.n	8008e78 <USBD_Get_USB_Status+0x44>
 8008e48:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <USBD_Get_USB_Status+0x1c>)
 8008e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008e61 	.word	0x08008e61
 8008e54:	08008e67 	.word	0x08008e67
 8008e58:	08008e6d 	.word	0x08008e6d
 8008e5c:	08008e73 	.word	0x08008e73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
    break;
 8008e64:	e00b      	b.n	8008e7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e66:	2302      	movs	r3, #2
 8008e68:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6a:	e008      	b.n	8008e7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e70:	e005      	b.n	8008e7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	73fb      	strb	r3, [r7, #15]
    break;
 8008e76:	e002      	b.n	8008e7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7c:	bf00      	nop
  }
  return usb_status;
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop

08008e8c <__libc_init_array>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	2500      	movs	r5, #0
 8008e90:	4e0c      	ldr	r6, [pc, #48]	; (8008ec4 <__libc_init_array+0x38>)
 8008e92:	4c0d      	ldr	r4, [pc, #52]	; (8008ec8 <__libc_init_array+0x3c>)
 8008e94:	1ba4      	subs	r4, r4, r6
 8008e96:	10a4      	asrs	r4, r4, #2
 8008e98:	42a5      	cmp	r5, r4
 8008e9a:	d109      	bne.n	8008eb0 <__libc_init_array+0x24>
 8008e9c:	f000 f822 	bl	8008ee4 <_init>
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	4e0a      	ldr	r6, [pc, #40]	; (8008ecc <__libc_init_array+0x40>)
 8008ea4:	4c0a      	ldr	r4, [pc, #40]	; (8008ed0 <__libc_init_array+0x44>)
 8008ea6:	1ba4      	subs	r4, r4, r6
 8008ea8:	10a4      	asrs	r4, r4, #2
 8008eaa:	42a5      	cmp	r5, r4
 8008eac:	d105      	bne.n	8008eba <__libc_init_array+0x2e>
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eb4:	4798      	blx	r3
 8008eb6:	3501      	adds	r5, #1
 8008eb8:	e7ee      	b.n	8008e98 <__libc_init_array+0xc>
 8008eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ebe:	4798      	blx	r3
 8008ec0:	3501      	adds	r5, #1
 8008ec2:	e7f2      	b.n	8008eaa <__libc_init_array+0x1e>
 8008ec4:	08008f70 	.word	0x08008f70
 8008ec8:	08008f70 	.word	0x08008f70
 8008ecc:	08008f70 	.word	0x08008f70
 8008ed0:	08008f74 	.word	0x08008f74

08008ed4 <memset>:
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	4402      	add	r2, r0
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d100      	bne.n	8008ede <memset+0xa>
 8008edc:	4770      	bx	lr
 8008ede:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee2:	e7f9      	b.n	8008ed8 <memset+0x4>

08008ee4 <_init>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr

08008ef0 <_fini>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr
